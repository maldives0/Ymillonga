{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\hashtag\\\\[tag].js\";\n// import React, { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import AppLayout from '../../components/AppLayout';\n// import PostCard from '../../components/PostCard';\n// import { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\n// import { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\n// import wrapper from '../../store/configureStore';\n// import { END } from 'redux-saga';\n// import axios from 'axios';\n// import { useRouter } from 'next/router';\n// const User = () => {\n//     const router = useRouter();\n//     const { tag } = router.query;//next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\n//     const dispatch = useDispatch();\n//     const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(state => state.post);\n//     useEffect(() => {\n//         function onScroll() {\n//             if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n//                 if (hasMorePosts && !loadPostsLoading) {\n//                     const lastId = mainPosts[mainPosts.length - 1]?.id;\n//                     dispatch({\n//                         type: LOAD_HASHTAG_POSTS_REQUEST,\n//                         lastId,\n//                         data: tag,\n//                     });\n//                 }\n//             }\n//         }\n//         window.addEventListener('scroll', onScroll);\n//         return () => {\n//             //쌓여있는 이벤트 메모리를 제거해주기\n//             window.removeEventListener('scroll', onScroll);\n//         };\n//     }, [mainPosts.length, hasMorePosts, loadPostsLoading, tag]);\n//     //og:카카오톡에 나오는 정보\n//     return (\n//         <AppLayout>\n//             {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n//         </AppLayout>\n//     );\n// };\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n//     console.log('getServerSideProps start');\n//     const cookie = context.req ? context.req.headers.cookie : '';\n//     axios.defaults.headers.Cookie = '';\n//     if (context.req && cookie) {\n//         axios.defaults.headers.Cookie = cookie;\n//     }\n//     context.store.dispatch({\n//         type: LOAD_MY_INFO_REQUEST,\n//     });\n//     context.store.dispatch({\n//         type: LOAD_HASHTAG_POSTS_REQUEST,\n//         data: context.params.tag,\n//     });\n//     context.store.dispatch(END);\n//     await context.store.sagaTask.toPromise();\n// });\n// export default User; \nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\nimport PostCard from '../../components/PostCard';\nimport wrapper from '../../store/configureStore';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\nimport AppLayout from '../../components/AppLayout';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Hashtag = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    tag\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadHashtagPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadHashtagPostsLoading) {\n          dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n            data: tag\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, tag]);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    },\n    __self: this\n  }, mainPosts.map(c => ___EmotionJSX(PostCard, {\n    key: c.id,\n    post: c,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    },\n    __self: this\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context);\n  const cookie = context.req ? context.req.headers.cookie : '';\n  console.log(context);\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: context.params.tag\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {}\n  };\n});\nexport default Hashtag;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/hashtag/[tag].js"],"names":["React","useCallback","useEffect","useDispatch","useSelector","useRouter","END","axios","LOAD_HASHTAG_POSTS_REQUEST","PostCard","wrapper","LOAD_MY_INFO_REQUEST","AppLayout","Hashtag","dispatch","router","tag","query","mainPosts","hasMorePosts","loadHashtagPostsLoading","state","post","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","data","addEventListener","removeEventListener","map","c","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","params","sagaTask","toPromise","props"],"mappings":"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","sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import AppLayout from '../../components/AppLayout';\r\n// import PostCard from '../../components/PostCard';\r\n// import { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\r\n// import { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\n// import wrapper from '../../store/configureStore';\r\n// import { END } from 'redux-saga';\r\n// import axios from 'axios';\r\n// import { useRouter } from 'next/router';\r\n\r\n\r\n// const User = () => {\r\n//     const router = useRouter();\r\n//     const { tag } = router.query;//next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\r\n//     const dispatch = useDispatch();\r\n//     const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(state => state.post);\r\n\r\n\r\n//     useEffect(() => {\r\n//         function onScroll() {\r\n\r\n//             if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n//                 if (hasMorePosts && !loadPostsLoading) {\r\n//                     const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n//                     dispatch({\r\n//                         type: LOAD_HASHTAG_POSTS_REQUEST,\r\n//                         lastId,\r\n//                         data: tag,\r\n//                     });\r\n//                 }\r\n//             }\r\n//         }\r\n//         window.addEventListener('scroll', onScroll);\r\n//         return () => {\r\n//             //쌓여있는 이벤트 메모리를 제거해주기\r\n//             window.removeEventListener('scroll', onScroll);\r\n//         };\r\n//     }, [mainPosts.length, hasMorePosts, loadPostsLoading, tag]);\r\n//     //og:카카오톡에 나오는 정보\r\n//     return (\r\n//         <AppLayout>\r\n//             {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n//         </AppLayout>\r\n//     );\r\n// };\r\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n//     console.log('getServerSideProps start');\r\n\r\n//     const cookie = context.req ? context.req.headers.cookie : '';\r\n//     axios.defaults.headers.Cookie = '';\r\n//     if (context.req && cookie) {\r\n//         axios.defaults.headers.Cookie = cookie;\r\n//     }\r\n//     context.store.dispatch({\r\n//         type: LOAD_MY_INFO_REQUEST,\r\n//     });\r\n//     context.store.dispatch({\r\n//         type: LOAD_HASHTAG_POSTS_REQUEST,\r\n//         data: context.params.tag,\r\n//     });\r\n//     context.store.dispatch(END);\r\n//     await context.store.sagaTask.toPromise();\r\n// });\r\n\r\n// export default User; \r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useRouter } from 'next/router';\r\nimport { END } from 'redux-saga';\r\n\r\nimport axios from 'axios';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\r\nimport PostCard from '../../components/PostCard';\r\nimport wrapper from '../../store/configureStore';\r\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\nimport AppLayout from '../../components/AppLayout';\r\n\r\nconst Hashtag = () => {\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    const { tag } = router.query;\r\n    const { mainPosts, hasMorePosts, loadHashtagPostsLoading } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        const onScroll = () => {\r\n            if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadHashtagPostsLoading) {\r\n                    dispatch({\r\n                        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n                        lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n                        data: tag,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts.length, hasMorePosts, tag]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {mainPosts.map((c) => (\r\n                <PostCard key={c.id} post={c} />\r\n            ))}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    console.log(context);\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    console.log(context);\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n        data: context.params.tag,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n    return { props: {} };\r\n});\r\n\r\nexport default Hashtag;\r\n"]},"metadata":{},"sourceType":"module"}