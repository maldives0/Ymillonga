{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../../components/AppLayout';\nimport PostForm from '../../components/PostForm';\nimport PostCard from '../../components/PostCard';\nimport UserProfile from '../../components/UserProfile';\nimport { LOAD_RELATED_POSTS_REQUEST } from '../../reducers/post';\nimport Link from 'next/link';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var mainPosts = useSelector(function (state) {\n    return state.post.mainPosts;\n  });\n  var hasMorePosts = useSelector(function (state) {\n    return state.post.hasMorePosts;\n  });\n  var loadPostsLoading = useSelector(function (state) {\n    return state.post.loadPostsLoading;\n  });\n  var loadPostsDone = useSelector(function (state) {\n    return state.post.loadPostsDone;\n  });\n  var reportPostDone = useSelector(function (state) {\n    return state.post.reportPostDone;\n  });\n  var reportPostError = useSelector(function (state) {\n    return state.post.reportPostError;\n  });\n  var retweetError = useSelector(function (state) {\n    return state.post.retweetError;\n  });\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  useEffect(function () {\n    if (reportPostDone) {\n      _message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      _message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_RELATED_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, null, me && me.id && ___EmotionJSX(_Button, null, ___EmotionJSX(Link, {\n    href: \"/\"\n  }, ___EmotionJSX(\"a\", null, \"\\uC804\\uCCB4 \\uAC8C\\uC2DC\\uAE00 \\uBCF4\\uAE30\"))), me && me.id && ___EmotionJSX(UserProfile, null), me && ___EmotionJSX(PostForm, null), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n};\n\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\n//getServerSideProps는 방문할 때마다 불러온다\nexport var __N_SSP = true;\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}