{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment, Modal, Form, Tooltip, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { InputReport, CardWrapper } from './style';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport { default as RetweetOutlined } from '@ant-design/icons/RetweetOutlined';\nimport { default as HeartTwoTone } from '@ant-design/icons/HeartTwoTone';\nimport { default as HeartOutlined } from '@ant-design/icons/HeartOutlined';\nimport { default as MessageOutlined } from '@ant-design/icons/MessageOutlined';\nimport { default as EllipsisOutlined } from '@ant-design/icons/EllipsisOutlined';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, UPDATE_POST_REQUEST, REPORT_POST_REQUEST } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Likers;\n\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const [reportText, onChangeReportText] = useInput('');\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const reportPostLoading = useSelector(state => state.post.reportLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const removePostLoading = useSelector(state => state.post.removePostLoading);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState(false);\n  const onLike = useCallback(() => {\n    if (!id) message.info('로그인 후 좋아요를 할 수 있습니다.');\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) message.info('로그인 후 리트윗할 수 있습니다.');\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    if (id) {\n      setCommentFormOpened(prev => !prev);\n    } else {\n      message.info('로그인 후 댓글을 입력할 수 있습니다.');\n    }\n  }, [id]);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n    ;\n  }, []);\n  const onChangePost = useCallback(editText => () => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: UPDATE_POST_REQUEST,\n      data: {\n        PostId: post.id,\n        content: editText\n      }\n    });\n  }, [post]);\n  const onReport = useCallback(() => {\n    setModalVisible(true);\n  }, []);\n  const onsubmitReport = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: REPORT_POST_REQUEST,\n      data: {\n        postId: post.id,\n        reason: reportText\n      }\n    });\n  }, [reportText]);\n  const reportCancel = useCallback(() => {\n    setModalVisible(false);\n  }, []);\n  useEffect(() => {\n    if (reportPostDone) {\n      setModalVisible(false);\n    }\n\n    if (reportPostError) {\n      setModalVisible(false);\n    }\n  }, [reportPostDone, reportPostError]);\n  const liked = (_post$Likers = post.Likers) === null || _post$Likers === void 0 ? void 0 : _post$Likers.find(v => v.id === id);\n  return ___EmotionJSX(CardWrapper, {\n    key: post.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    },\n    __self: this\n  }, ___EmotionJSX(Card, {\n    cover: post.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 42\n      },\n      __self: this\n    }),\n    actions: [___EmotionJSX(Tooltip, {\n      title: \"\\uB9AC\\uD2B8\\uC717\\uD558\\uAE30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      },\n      __self: this\n    }, ___EmotionJSX(RetweetOutlined, {\n      onClick: onRetweet,\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      },\n      __self: this\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uC88B\\uC544\\uC694\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      },\n      __self: this\n    }, liked ? ___EmotionJSX(HeartTwoTone, {\n      key: \"heart\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onUnlike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      },\n      __self: this\n    }) : ___EmotionJSX(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      },\n      __self: this\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uB313\\uAE00\\uB2EC\\uAE30\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      },\n      __self: this\n    }, ___EmotionJSX(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      },\n      __self: this\n    })), ___EmotionJSX(Popover, {\n      key: \"ellipsis\",\n      content: ___EmotionJSX(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        },\n        __self: this\n      }, id && post.User.id === id ? ___EmotionJSX(React.Fragment, null, !post.RetweetId && ___EmotionJSX(Button, {\n        onClick: onClickUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 66\n        },\n        __self: this\n      }, \"\\uC218\\uC815\"), ___EmotionJSX(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        loading: removePostLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 45\n        },\n        __self: this\n      }, \"\\uC0AD\\uC81C\")) : ___EmotionJSX(Button, {\n        onClick: onReport,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 37\n        },\n        __self: this\n      }, \"\\uC2E0\\uACE0\\uD558\\uAE30\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      },\n      __self: this\n    }, ___EmotionJSX(EllipsisOutlined, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      },\n      __self: this\n    }))],\n    extra: id && ___EmotionJSX(FollowButton, {\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 30\n      },\n      __self: this\n    }),\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    },\n    __self: this\n  }, ___EmotionJSX(Modal, {\n    title: \"report\",\n    visible: modalVisible,\n    onOk: onsubmitReport,\n    confirmLoading: reportPostLoading,\n    onCancel: reportCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    },\n    __self: this\n  }, ___EmotionJSX(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    },\n    __self: this\n  }, ___EmotionJSX(InputReport, {\n    rows: 4,\n    value: reportText,\n    onChange: onChangeReportText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    },\n    __self: this\n  })), ___EmotionJSX(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    },\n    __self: this\n  }, \"\\uC2E0\\uACE0\\uD558\\uC2E4 \\uACBD\\uC6B0 \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uACC4\\uC18D \\uC9C4\\uD589\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\")), post.RetweetId && post.Retweet ? ___EmotionJSX(Card, {\n    cover: post.Retweet.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Retweet.Images,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    },\n    __self: this\n  }, ___EmotionJSX(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 29\n    },\n    __self: this\n  }, moment(post.Retweet.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, {\n      prefetch: false,\n      href: `/user/${post.Retweet.UserId}`,\n      prefetch: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 37\n      },\n      __self: this\n    }, ___EmotionJSX(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 58\n      },\n      __self: this\n    }, ___EmotionJSX(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 61\n      },\n      __self: this\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: ___EmotionJSX(PostCardContent, {\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      editMode: editMode,\n      postData: post.Retweet.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 37\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 29\n    },\n    __self: this\n  })) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    },\n    __self: this\n  }, moment(post.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, {\n      prefetch: false,\n      href: `/user/${post.User.id}`,\n      prefetch: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 37\n      },\n      __self: this\n    }, ___EmotionJSX(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 41\n      },\n      __self: this\n    }, ___EmotionJSX(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 44\n      },\n      __self: this\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: ___EmotionJSX(PostCardContent, {\n      editMode: editMode,\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      postData: post.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 37\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 29\n    },\n    __self: this\n  }))), id && commentFormOpened && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(CommentForm, {\n    post: post,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 21\n    },\n    __self: this\n  }), ___EmotionJSX(List, {\n    header: `댓글: ${post.Comments ? post.Comments.length : 0}개`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => ___EmotionJSX(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 29\n      },\n      __self: this\n    }, ___EmotionJSX(Comment, {\n      author: item.User.nickname,\n      avatar: ___EmotionJSX(Link, {\n        href: `/user/${item.User.id}`,\n        prefetch: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 41\n        },\n        __self: this\n      }, ___EmotionJSX(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 45\n        },\n        __self: this\n      }, ___EmotionJSX(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 49\n        },\n        __self: this\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 33\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Popover","List","Comment","Modal","Form","Tooltip","message","PropTypes","useSelector","useDispatch","InputReport","CardWrapper","moment","Link","default","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","CommentForm","PostImages","FollowButton","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","UPDATE_POST_REQUEST","REPORT_POST_REQUEST","useInput","locale","PostCard","post","dispatch","id","state","user","me","reportText","onChangeReportText","commentFormOpened","setCommentFormOpened","editMode","setEditMode","reportPostLoading","reportLoading","reportPostDone","reportPostError","removePostLoading","modalVisible","setModalVisible","onLike","info","type","data","onUnlike","alert","onRemovePost","onRetweet","onToggleComment","prev","onClickUpdate","onCancelUpdate","onChangePost","editText","PostId","content","onReport","onsubmitReport","postId","reason","reportCancel","liked","Likers","find","v","Images","User","RetweetId","nickname","Retweet","float","createdAt","startOf","fromNow","UserId","Comments","length","item","propTypes","shape","number","object","string","arrayOf","any","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Card, Button, Avatar, Popover, List, Comment, Modal, Form, Tooltip, message } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { InputReport, CardWrapper } from './style';\r\n\r\nimport moment from 'moment';\r\nimport Link from 'next/link';\r\nimport {\r\n    default as RetweetOutlined,\r\n} from '@ant-design/icons/RetweetOutlined';\r\nimport {\r\n    default as HeartTwoTone,\r\n} from '@ant-design/icons/HeartTwoTone';\r\nimport {\r\n    default as HeartOutlined,\r\n} from '@ant-design/icons/HeartOutlined';\r\nimport {\r\n    default as MessageOutlined,\r\n} from '@ant-design/icons/MessageOutlined';\r\nimport {\r\n    default as EllipsisOutlined,\r\n} from '@ant-design/icons/EllipsisOutlined';\r\n\r\n\r\nimport CommentForm from './CommentForm';\r\nimport PostImages from './PostImages';\r\nimport FollowButton from './FollowButton';\r\nimport PostCardContent from './PostCardContent';\r\nimport {\r\n    REMOVE_POST_REQUEST,\r\n    LIKE_POST_REQUEST,\r\n    UNLIKE_POST_REQUEST,\r\n    RETWEET_REQUEST,\r\n    UPDATE_POST_REQUEST,\r\n    REPORT_POST_REQUEST,\r\n} from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\nmoment.locale('ko');\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const id = useSelector((state) => state.user.me?.id);\r\n    const [reportText, onChangeReportText] = useInput('');\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const reportPostLoading = useSelector((state) => state.post.reportLoading);\r\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\r\n    const reportPostError = useSelector((state) => state.post.reportPostError);\r\n    const removePostLoading = useSelector(state => state.post.removePostLoading);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n\r\n    const onLike = useCallback(() => {\r\n        if (!id) message.info('로그인 후 좋아요를 할 수 있습니다.');\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n    const onUnlike = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n    const onRemovePost = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [id]);\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) message.info('로그인 후 리트윗할 수 있습니다.')\r\n        dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [id]);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        if (id) {\r\n            setCommentFormOpened((prev) => !prev);\r\n        } else {\r\n            message.info('로그인 후 댓글을 입력할 수 있습니다.');\r\n        }\r\n    }, [id]);\r\n\r\n    const onClickUpdate = useCallback(() => {\r\n        setEditMode(true);\r\n    }, []);\r\n    const onCancelUpdate = useCallback(() => {\r\n        setEditMode(false);;\r\n    }, []);\r\n    const onChangePost = useCallback((editText) => () => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        dispatch({\r\n            type: UPDATE_POST_REQUEST,\r\n            data: {\r\n                PostId: post.id,\r\n                content: editText,\r\n            },\r\n        });\r\n    }, [post]);\r\n    const onReport = useCallback(() => {\r\n        setModalVisible(true);\r\n    }, []);\r\n    const onsubmitReport = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        dispatch({\r\n            type: REPORT_POST_REQUEST,\r\n            data: {\r\n                postId: post.id,\r\n                reason: reportText,\r\n            }\r\n        });\r\n    }, [reportText]);\r\n    const reportCancel = useCallback(() => {\r\n        setModalVisible(false);\r\n    }, []);\r\n    useEffect(() => {\r\n        if (reportPostDone) {\r\n            setModalVisible(false);\r\n        }\r\n        if (reportPostError) {\r\n            setModalVisible(false);\r\n        }\r\n    }, [reportPostDone, reportPostError]);\r\n    const liked = post.Likers?.find((v) => v.id === id);\r\n    return (\r\n        <CardWrapper key={post.id}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <Tooltip title=\"리트윗하기\">\r\n                        <RetweetOutlined\r\n                            onClick={onRetweet}\r\n                            key=\"retweet\" />\r\n                    </Tooltip>,\r\n                    <Tooltip title=\"좋아요\">\r\n                        {liked ?\r\n                            <HeartTwoTone\r\n                                key=\"heart\"\r\n                                twoToneColor=\"#eb2f96\"\r\n                                onClick={onUnlike} /> :\r\n                            <HeartOutlined\r\n                                key=\"heart\"\r\n                                onClick={onLike} />}\r\n                    </Tooltip>,\r\n                    <Tooltip title=\"댓글달기\">\r\n                        <MessageOutlined\r\n                            key=\"message\"\r\n                            onClick={onToggleComment} />\r\n                    </Tooltip>,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post.User.id === id ?\r\n                                    (\r\n                                        <>\r\n                                            {!post.RetweetId && (<Button\r\n                                                onClick={onClickUpdate}>수정</Button>)}\r\n                                            <Button\r\n                                                type=\"danger\"\r\n                                                onClick={onRemovePost}\r\n                                                loading={removePostLoading} >삭제</Button>\r\n                                        </>\r\n                                    ) :\r\n                                    <Button onClick={onReport}>신고하기</Button>\r\n                                }\r\n                            </Button.Group>\r\n                        )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n                extra={id && <FollowButton post={post} />}\r\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n            >\r\n                <Modal\r\n                    title=\"report\"\r\n                    visible={modalVisible}\r\n                    onOk={onsubmitReport}\r\n                    confirmLoading={reportPostLoading}\r\n                    onCancel={reportCancel}\r\n                >\r\n                    <Form >\r\n                        <InputReport\r\n                            rows={4}\r\n                            value={reportText}\r\n                            onChange={onChangeReportText}\r\n\r\n                        />\r\n                    </Form>\r\n                    <p>신고하실 경우 되돌릴 수 없습니다. 계속 진행하시겠습니까?</p>\r\n                </Modal>\r\n                {post.RetweetId && post.Retweet ?\r\n                    (\r\n                        <Card\r\n                            cover={post.Retweet.Images[0] &&\r\n                                <PostImages images={post.Retweet.Images} />}>\r\n                            <div style={{ float: 'right' }}>\r\n                                {moment(post.Retweet.createdAt).startOf('hour').fromNow()}\r\n                            </div>\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link\r\n                                        prefetch={false}\r\n                                        href={`/user/${post.Retweet.UserId}`}\r\n                                        prefetch={false}><a><Avatar>\r\n                                            {post.Retweet.User.nickname[0]}\r\n                                        </Avatar></a></Link>\r\n                                )}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={\r\n                                    <PostCardContent\r\n                                        onCancelUpdate={onCancelUpdate}\r\n                                        onChangePost={onChangePost}\r\n                                        editMode={editMode}\r\n                                        postData={post.Retweet.content}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Card>\r\n                    ) : (\r\n                        <>\r\n                            <div style={{ float: 'right' }}>\r\n                                {moment(post.createdAt).startOf('hour').fromNow()}\r\n                            </div>\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link\r\n                                        prefetch={false}\r\n                                        href={`/user/${post.User.id}`}\r\n                                        prefetch={false}>\r\n                                        <a><Avatar>\r\n                                            {post.User.nickname[0]}\r\n                                        </Avatar></a>\r\n                                    </Link>\r\n                                )}\r\n                                title={post.User.nickname}\r\n                                description={\r\n                                    <PostCardContent\r\n                                        editMode={editMode}\r\n                                        onCancelUpdate={\r\n                                            onCancelUpdate\r\n                                        }\r\n                                        onChangePost={onChangePost}\r\n                                        postData={post.content}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </>\r\n                    )}\r\n            </Card>\r\n            {id && commentFormOpened && (\r\n                <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`댓글: ${post.Comments ? post.Comments.length : 0}개`}\r\n                        itemLayout='horizontal'\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link\r\n                                            href={`/user/${item.User.id}`}\r\n                                            prefetch={false}>\r\n                                            <a>\r\n                                                <Avatar>{item.User.nickname[0]}</Avatar>\r\n                                            </a>\r\n                                        </Link>\r\n                                    )}\r\n                                    content={item.content} />\r\n                            </li>\r\n                        )} />\r\n                </>\r\n            )}\r\n        </CardWrapper >\r\n    );\r\n};\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.any),\r\n        Images: PropTypes.arrayOf(PropTypes.any),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n        RetweetId: PropTypes.number,\r\n        Retweet: PropTypes.objectOf(PropTypes.any),\r\n    }).isRequired,\r\n};\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}