{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Avatar } from 'antd';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport wrapper from '../../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst User = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query; //next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\n\n  const dispatch = useDispatch();\n  const mainPosts = useSelector(state => state.post.mainPosts);\n  const hasMorePosts = useSelector(state => state.post.hasMorePosts);\n  const loadPostsLoading = useSelector(state => state.post.loadPostsLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const me = useSelector(state => state.user.me);\n  const userInfo = useSelector(state => state.user.userInfo);\n  useEffect(() => {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.');\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId,\n            data: id\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, loadPostsLoading, id]); //og:카카오톡에 나오는 정보\n  // console.log('userInfo', userInfo);\n\n  return ___EmotionJSX(AppLayout, null, userInfo && ___EmotionJSX(Head, null, ___EmotionJSX(\"title\", null, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: `${userInfo.nickname}님의 게시글`\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://ymillonga.com/favicon.ico\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:url\",\n    content: `https://ymillonga.com/user/${id}`\n  })), userInfo && userInfo.id !== (me === null || me === void 0 ? void 0 : me.id) ? ___EmotionJSX(Card, {\n    style: {\n      marginBottom: 20\n    },\n    actions: [___EmotionJSX(\"div\", {\n      key: \"twit\"\n    }, \"\\uAC8C\\uC2DC\\uAE00\", ___EmotionJSX(\"br\", null), userInfo.Posts), ___EmotionJSX(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", ___EmotionJSX(\"br\", null), userInfo.Followings), ___EmotionJSX(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6CC\", ___EmotionJSX(\"br\", null), userInfo.Followers)]\n  }, ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(post => ___EmotionJSX(PostCard, {\n    key: post.id,\n    post: post\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: context.params.id //context.query.id와 함께 router.query를 통해 가져온 특정 유저 아이디 값을 가져올 수 있다\n\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default User;","map":null,"metadata":{},"sourceType":"module"}