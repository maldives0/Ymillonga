{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\hashtag\\\\[tag].js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\nimport wrapper from '../../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst User = () => {\n  const router = useRouter();\n  const {\n    tag\n  } = router.query; //next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\n\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_HASHTAG_POSTS_REQUEST,\n            lastId,\n            data: tag\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, loadPostsLoading, tag]); //og:카카오톡에 나오는 정보\n\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    },\n    __self: this\n  }, mainPosts.map(post => ___EmotionJSX(PostCard, {\n    key: post.id,\n    post: post,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 38\n    },\n    __self: this\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('getServerSideProps start');\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: context.params.tag\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default User;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/hashtag/[tag].js"],"names":["React","useEffect","useSelector","useDispatch","AppLayout","PostCard","LOAD_HASHTAG_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","END","axios","useRouter","Head","User","router","tag","query","dispatch","mainPosts","hasMorePosts","loadPostsLoading","state","post","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","data","addEventListener","removeEventListener","map","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\nimport wrapper from '../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\n\r\nconst User = () => {\r\n    const router = useRouter();\r\n    const { tag } = router.query;//next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(state => state.post);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n                        lastId,\r\n                        data: tag,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts.length, hasMorePosts, loadPostsLoading, tag]);\r\n    //og:카카오톡에 나오는 정보\r\n    return (\r\n        <AppLayout>\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    console.log('getServerSideProps start');\r\n\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_HASHTAG_POSTS_REQUEST,\r\n        data: context.params.tag,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default User; \r\n"]},"metadata":{},"sourceType":"module"}