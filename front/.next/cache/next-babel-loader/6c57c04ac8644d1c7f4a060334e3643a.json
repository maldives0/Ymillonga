{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    //게시글 아이디\n    User: {\n      //게시글 작성자 \n      id: 1,\n      nickname: 'admin'\n    },\n    content: '첫 번째 게시글 #first',\n    Images: [{\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }],\n    Likers: [],\n    Comments: [{\n      User: {\n        id: nanoid(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  }],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // mainPosts: [{\n//     id: 1,//게시글 아이디\n//     User: {//게시글 작성자 \n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     content: '첫 번째 게시글 #first',\n//     Images: [{\n//         src: faker.image.image(),\n//     },\n//     {\n//         src: faker.image.image(),\n//     }, {\n//         src: faker.image.image(),\n//     }\n//     ],\n//     Likers: [],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }],\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n// const dummyComment = (data) => ({\n//     id: nanoid(),\n//     User: {\n//         id: 2,\n//         nickname: 'soso',\n//     },\n//     content: data,\n// });\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: nanoid(),\n//     User: {\n//         id: nanoid(),\n//         nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data); //mainPosts 앞으로 최신글 순으로 새로운 게시글 더해주기\n\n      draft.hasMorePosts = draft.mainPosts.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = []; //대기중 파일 목록 없애기\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = true;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = true;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","id","User","nickname","content","Images","src","image","Likers","Comments","name","findName","lorem","sentence","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","draft","type","concat","data","length","error","unshift","post","find","v","PostId","filter"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n\r\n    mainPosts: [{\r\n        id: 1,//게시글 아이디\r\n        User: {//게시글 작성자 \r\n            id: 1,\r\n            nickname: 'admin',\r\n        },\r\n        content: '첫 번째 게시글 #first',\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        },\r\n        {\r\n            src: faker.image.image(),\r\n        }, {\r\n            src: faker.image.image(),\r\n        }\r\n        ],\r\n        Likers: [],\r\n        Comments: [{\r\n            User: {\r\n                id: nanoid(),\r\n                nickname: faker.name.findName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n\r\n};\r\n// mainPosts: [{\r\n//     id: 1,//게시글 아이디\r\n//     User: {//게시글 작성자 \r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     content: '첫 번째 게시글 #first',\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     },\r\n//     {\r\n//         src: faker.image.image(),\r\n//     }, {\r\n//         src: faker.image.image(),\r\n//     }\r\n//     ],\r\n//     Likers: [],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }],\r\n// const dummyPost = (data) => ({\r\n//     id: data.id,\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n// const dummyComment = (data) => ({\r\n//     id: nanoid(),\r\n//     User: {\r\n//         id: 2,\r\n//         nickname: 'soso',\r\n//     },\r\n//     content: data,\r\n// });\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//     id: nanoid(),\r\n//     User: {\r\n//         id: nanoid(),\r\n//         nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            //mainPosts 앞으로 최신글 순으로 새로운 게시글 더해주기\r\n            draft.hasMorePosts = draft.mainPosts.length === 10;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];//대기중 파일 목록 없애기\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            break;\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = true;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}