{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log('loggerMiddleware', action);\n  return next(action);\n};\n\nconst configureStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [loggerMiddleware, sagaMiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middleware)) : composeWithDevTools(applyMiddleware(...middleware));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: false // debug: process.env.NODE_ENV === 'development'\n\n});\nexport default wrapper;","map":null,"metadata":{},"sourceType":"module"}