{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n//     console.log('loggerMiddleware', action);\n//     return next(action);\n// };\n\nvar configureStore = function configureStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middleware = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middleware)) : composeWithDevTools(applyMiddleware.apply(void 0, middleware));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: false // debug: process.env.NODE_ENV === 'development'\n\n});\nexport default wrapper;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","sagaMiddleware","middleware","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAEhC,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AACA,MAAMM,UAAU,GAAG,CAACD,cAAD,CAAnB;AACA,MAAME,QAAQ,GAAG,QACbV,OAAO,CAACF,eAAe,MAAf,SAAmBW,UAAnB,CAAD,CADM,GAEbP,mBAAmB,CAACJ,eAAe,MAAf,SAAmBW,UAAnB,CAAD,CAFvB;AAIA,MAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBR,QAAnB,CAAjB;AACA,SAAOM,KAAP;AACH,CAXD;;AAYA,IAAMG,OAAO,GAAGb,aAAa,CAACK,cAAD,EAAiB;AAC1CS,EAAAA,KAAK,EAAE,KADmC,CAE1C;;AAF0C,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\n// const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n//     console.log('loggerMiddleware', action);\r\n//     return next(action);\r\n// };\r\nconst configureStore = (context) => {\r\n\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middleware = [sagaMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production' ?\r\n        compose(applyMiddleware(...middleware)) :\r\n        composeWithDevTools(applyMiddleware(...middleware)\r\n        );\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: false,\r\n    // debug: process.env.NODE_ENV === 'development'\r\n});\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}