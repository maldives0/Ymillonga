{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\user\\\\[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Avatar } from 'antd';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar User = function User() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id; //next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePosts = _useSelector.hasMorePosts,\n      loadPostsLoading = _useSelector.loadPostsLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector2.userInfo;\n\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: lastId,\n            data: id\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id]); //og:카카오톡에 나오는 정보\n\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    },\n    __self: _this\n  }, userInfo && ___EmotionJSX(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    },\n    __self: _this\n  }, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://ymillonga.com/favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:url\",\n    content: \"https://ymillonga.com/user/\".concat(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    },\n    __self: _this\n  })), userInfo ? ___EmotionJSX(Card, {\n    actions: [___EmotionJSX(\"div\", {\n      key: \"twit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      },\n      __self: _this\n    }, ___EmotionJSX(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      },\n      __self: _this\n    }), userInfo.Posts), ___EmotionJSX(\"div\", {\n      key: \"following\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      },\n      __self: _this\n    }, ___EmotionJSX(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      },\n      __self: _this\n    }), userInfo.Followings), ___EmotionJSX(\"div\", {\n      key: \"follower\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      },\n      __self: _this\n    }, ___EmotionJSX(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      },\n      __self: _this\n    }), userInfo.Followers)],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 30\n      },\n      __self: _this\n    }, userInfo.nickname[0]),\n    title: userInfo.nickname,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    },\n    __self: _this\n  })) : null, mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 38\n      },\n      __self: _this\n    });\n  }));\n};\n\n_s(User, \"3x8DdiqB+cE0KeYQjDDMk45ZAyA=\", false, function () {\n  return [useRouter, useDispatch, useSelector, useSelector];\n});\n\n_c = User;\nexport var __N_SSP = true;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/user/[id].js"],"names":["React","useEffect","useSelector","useDispatch","Card","Avatar","AppLayout","PostCard","LOAD_USER_POSTS_REQUEST","useRouter","Head","User","router","id","query","dispatch","state","post","mainPosts","hasMorePosts","loadPostsLoading","user","userInfo","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","type","data","addEventListener","removeEventListener","nickname","Posts","Followings","Followers","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Card, Avatar } from 'antd';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\r\nimport wrapper from '../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\n\r\nconst User = () => {\r\n    const router = useRouter();\r\n    const { id } = router.query;//next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(state => state.post);\r\n    const { userInfo } = useSelector(state => state.user);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_USER_POSTS_REQUEST,\r\n                        lastId,\r\n                        data: id,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts.length, hasMorePosts, id]);\r\n    //og:카카오톡에 나오는 정보\r\n    return (\r\n        <AppLayout>\r\n            {userInfo && (\r\n                <Head>\r\n                    <title>{userInfo.nickname}님의 글</title>\r\n                    <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:image\" content=\"https://ymillonga.com/favicon.ico\" />\r\n                    <meta property=\"og:url\" content={`https://ymillonga.com/user/${id}`} />\r\n                </Head>\r\n            )}\r\n            {userInfo ? (\r\n                <Card\r\n                    actions={[\r\n                        <div key=\"twit\">\r\n                            <br />{userInfo.Posts}\r\n                        </div>,\r\n                        <div key=\"following\">\r\n                            <br />{userInfo.Followings}\r\n                        </div>,\r\n                        <div key=\"follower\">\r\n                            <br />{userInfo.Followers}\r\n                        </div>,\r\n                    ]}\r\n                >\r\n                    <Card.Meta\r\n                        avatar={\r\n                            (<Avatar>\r\n                                {userInfo.nickname[0]}</Avatar>)\r\n                        }\r\n                        title={userInfo.nickname}\r\n                    />\r\n                </Card>\r\n            ) : null}\r\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    console.log('getServerSideProps start');\r\n\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: context.params.id,//context.query.id와 함께 router.query를 통해 가져온 특정 유저 아이디 값을 가져올 수 있다\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_USER_POSTS_REQUEST,\r\n        data: context.params.id,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default User; \r\n"]},"metadata":{},"sourceType":"module"}