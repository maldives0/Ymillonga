{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { CardWrapper } from './style';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from '../components/PostCardContent';\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false); // const { removePostLoading, updatePostLoading } = useSelector(state => state.post);\n  // const liked = post.Likers.find((v) => v.id === id);\n\n  const onLike = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, [id]);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n    ;\n  }, []);\n  const onChangePost = useCallback(editText => {\n    setCommentFormOpened(prev => !prev);\n  }, [post]);\n  return /*#__PURE__*/_jsxDEV(CardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 42\n      }, this),\n      action: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this),\n      /*#__PURE__*/\n      // liked ? <HeartTwoTone\n      //     key=\"heart\"\n      //     twoToneColor=\"#eb2f96\"\n      //     onClick={onUnlike} /> :\n      _jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [!post.RetweetId && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickUpdate,\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 65\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)\n      }, \"ellipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)],\n      extra: id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 30\n      }, this),\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxDEV(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n          images: post.Retweet.Images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 33\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/`,\n            prefetch: false,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 37\n          }, this),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            onCancelUpdate: onCancelUpdate,\n            onChangePost: onChangePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${post.User.id}`,\n            prefetch: false,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 37\n          }, this) // title={post.Retweet.User.nickname}\n          ,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            onCancelUpdate: onCancelUpdate,\n            onChangePost: onChangePost // postData={post.Retweet.content}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: `/user/${item.User.id}`,\n              prefetch: false,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 41\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    // createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Button","Avatar","Popover","List","Comment","PropTypes","useSelector","CardWrapper","moment","Link","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","CommentForm","PostImages","FollowButton","PostCardContent","locale","PostCard","post","id","state","user","me","commentFormOpened","setCommentFormOpened","editMode","setEditMode","onLike","alert","onUnlike","onRemovePost","onRetweet","onToggleComment","prev","onClickUpdate","onCancelUpdate","onChangePost","editText","Images","User","RetweetId","nickname","Retweet","Comments","length","item","content","propTypes","shape","number","object","string","arrayOf","any","Likers","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport { CardWrapper } from './style';\r\nimport moment from 'moment';\r\nimport Link from 'next/link';\r\nimport {\r\n    RetweetOutlined,\r\n    HeartTwoTone,\r\n    HeartOutlined,\r\n    MessageOutlined,\r\n    EllipsisOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport CommentForm from './CommentForm';\r\nimport PostImages from './PostImages';\r\nimport FollowButton from './FollowButton';\r\nimport PostCardContent from '../components/PostCardContent';\r\n\r\nmoment.locale('ko');\r\nconst PostCard = ({ post }) => {\r\n    const id = useSelector((state) => state.user.me?.id);\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [editMode, setEditMode] = useState(false);\r\n    // const { removePostLoading, updatePostLoading } = useSelector(state => state.post);\r\n    // const liked = post.Likers.find((v) => v.id === id);\r\n\r\n    const onLike = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n    }, [id]);\r\n    const onUnlike = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n    }, [id]);\r\n    const onRemovePost = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n    }, [id]);\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n    }, [id]);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, [id]);\r\n    const onClickUpdate = useCallback(() => {\r\n        setEditMode(true);\r\n    }, []);\r\n    const onCancelUpdate = useCallback(() => {\r\n        setEditMode(false);;\r\n    }, []);\r\n    const onChangePost = useCallback((editText) => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, [post]);\r\n\r\n    return (\r\n        <CardWrapper key={post.id}>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                action={[\r\n                    <RetweetOutlined\r\n                        key=\"retweet\"\r\n                        onClick={onRetweet} />,\r\n                    // liked ? <HeartTwoTone\r\n                    //     key=\"heart\"\r\n                    //     twoToneColor=\"#eb2f96\"\r\n                    //     onClick={onUnlike} /> :\r\n                    <HeartOutlined\r\n                        key=\"heart\"\r\n                        onClick={onLike} />,\r\n                    <MessageOutlined\r\n                        key=\"message\"\r\n                        onClick={onToggleComment} />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post.User.id === id ?\r\n                                    (\r\n                                        <>\r\n                                            {!post.RetweetId && <Button\r\n                                                onClick={onClickUpdate}>수정</Button>}\r\n                                            <Button\r\n                                                type=\"danger\"\r\n\r\n                                                onClick={onRemovePost}>삭제</Button>\r\n                                        </>\r\n                                    ) :\r\n                                    <Button>신고하기</Button>}\r\n                            </Button.Group>\r\n                        )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n                extra={id && <FollowButton post={post} />}\r\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n            >\r\n                {post.RetweetId && post.Retweet ?\r\n                    (\r\n                        <Card\r\n                            cover={post.Retweet.Images[0] &&\r\n                                <PostImages images={post.Retweet.Images} />}>\r\n                            {/* <div style={{float: 'right'}}>\r\n                            {moment(post.createdAt).startOf('day').fromNow()}\r\n                        </div> */}\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link href={`/`}\r\n                                        prefetch={false}><a><Avatar>\r\n                                            {/* {post.Retweet.User.nickname[0]} */}\r\n                                        </Avatar></a></Link>\r\n                                )}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={\r\n                                    <PostCardContent\r\n                                        onCancelUpdate={\r\n                                            onCancelUpdate\r\n                                        }\r\n                                        onChangePost={onChangePost}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Card>\r\n                    ) : (\r\n                        <>\r\n                            {/* <div style={{float: 'right'}}>\r\n                            {moment(post.createdAt).startOf('day').fromNow()}\r\n                        </div> */}\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link href={`/user/${post.User.id}`}\r\n                                        prefetch={false}><a><Avatar>\r\n\r\n                                        </Avatar></a></Link>\r\n                                )}\r\n                                // title={post.Retweet.User.nickname}\r\n                                description={\r\n                                    <PostCardContent\r\n                                        onCancelUpdate={\r\n                                            onCancelUpdate\r\n                                        }\r\n                                        onChangePost={onChangePost}\r\n                                    // postData={post.Retweet.content}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </>\r\n                    )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`${post.Comments.length}댓글`}\r\n                        itemLayout='horizontal'\r\n                        dataSource={post.Comments}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link\r\n                                            href={`/user/${item.User.id}`}\r\n                                            prefetch={false}>\r\n                                            <a>\r\n                                                <Avatar>{item.User.nickname[0]}</Avatar>\r\n                                            </a>\r\n                                        </Link>\r\n                                    )}\r\n                                    content={item.content} />\r\n                            </li>\r\n                        )} />\r\n                </>\r\n            )}\r\n        </CardWrapper>\r\n    );\r\n};\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        // createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.any),\r\n        Images: PropTypes.arrayOf(PropTypes.any),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n        RetweetId: PropTypes.number,\r\n        Retweet: PropTypes.objectOf(PropTypes.any),\r\n    }).isRequired,\r\n};\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}