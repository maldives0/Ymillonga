{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback } from 'react';\nimport useInput from '../hooks/useInput';\nimport { Form } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CHANGE_NICKNAME_REQUEST } from '../reducers/user';\nimport { NicknameInputSearch } from './style';\nimport { initialState } from \"../reducers/user\";\nimport useSWR, { mutate, trigger } from \"swr\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst NicknameEditForm = () => {\n  const {\n    data\n  } = useSWR(\"globalState\", {\n    initialData: initialState\n  }, {\n    revalidateOnFocus: true\n  });\n  const dispatch = useDispatch();\n  const me = useSelector(state => state.user.me);\n  const changeNicknameLoading = useSelector(state => state.user.changeNicknameLoading);\n  const [nickname, onChangeNickname] = useInput((me === null || me === void 0 ? void 0 : me.nickname) || '');\n  const onSubmit = useCallback(() => {\n    mutate(\"globalState\", _objectSpread(_objectSpread({}, data), {}, {\n      me: {\n        nickname: nickname\n      }\n    }), false);\n    dispatch({\n      type: CHANGE_NICKNAME_REQUEST,\n      data: nickname\n    });\n    trigger(\"globalState\");\n  }, [nickname]);\n  return ___EmotionJSX(Form, null, ___EmotionJSX(NicknameInputSearch, {\n    loading: changeNicknameLoading,\n    value: nickname,\n    onChange: onChangeNickname,\n    onSearch: onSubmit,\n    addonBefore: \"\\uB2C9\\uB124\\uC784:\",\n    enterButton: \"\\uBC14\\uAFB8\\uAE30\"\n  }));\n};\n\nexport default NicknameEditForm;","map":null,"metadata":{},"sourceType":"module"}