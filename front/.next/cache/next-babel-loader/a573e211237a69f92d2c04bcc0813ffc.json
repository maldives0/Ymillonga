{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n// import axios from 'axios';\n// import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\n// import {\n//     ADD_COMMENT_FAILURE,\n//     ADD_COMMENT_REQUEST,\n//     ADD_COMMENT_SUCCESS,\n//     ADD_POST_FAILURE,\n//     ADD_POST_REQUEST,\n//     ADD_POST_SUCCESS,\n//     LIKE_POST_FAILURE,\n//     LIKE_POST_REQUEST,\n//     LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n//     LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\n//     LOAD_POSTS_FAILURE,\n//     LOAD_POSTS_REQUEST,\n//     LOAD_POSTS_SUCCESS,\n//     LOAD_USER_POSTS_FAILURE,\n//     LOAD_USER_POSTS_REQUEST,\n//     LOAD_USER_POSTS_SUCCESS,\n//     REMOVE_POST_FAILURE,\n//     REMOVE_POST_REQUEST,\n//     REMOVE_POST_SUCCESS,\n//     RETWEET_FAILURE,\n//     RETWEET_REQUEST,\n//     RETWEET_SUCCESS,\n//     UNLIKE_POST_FAILURE,\n//     UNLIKE_POST_REQUEST,\n//     UNLIKE_POST_SUCCESS,\n//     UPLOAD_IMAGES_FAILURE,\n//     UPLOAD_IMAGES_REQUEST,\n//     UPLOAD_IMAGES_SUCCESS,\n// } from '../reducers/post';\n// import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n// function loadUserPostsAPI(data, lastId) {\n//     return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n// }\n// function* loadUserPosts(action) {\n//     try {\n//         const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n//         yield put({\n//             type: LOAD_USER_POSTS_SUCCESS,\n//             data: result.data,\n//         });\n//     } catch (err) {\n//         console.error(err);\n//         yield put({\n//             type: LOAD_USER_POSTS_FAILURE,\n//             data: err.response.data,\n//         });\n//     }\n// }\n// function loadHashtagPostsAPI(data, lastId) {\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\n//     function* loadHashtagPosts(action) {\n//         try {\n//             const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n//             yield put({\n//                 type: LOAD_HASHTAG_POSTS_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: LOAD_HASHTAG_POSTS_FAILURE,\n//                 data: err.response.data,\n//             });\n//         }\n//     }\n//     function loadPostsAPI(lastId) {\n//         return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n//     }\n//     function* loadPosts(action) {\n//         try {\n//             const result = yield call(loadPostsAPI, action.lastId);\n//             yield put({\n//                 type: LOAD_POSTS_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: LOAD_POSTS_FAILURE,\n//                 data: err.response.data,\n//             });\n//         }\n//     }\n//     function addPostAPI(data) {\n//         return axios.post('/post', data);\n//     }\n//     function* addPost(action) {\n//         try {\n//             const result = yield call(addPostAPI, action.data);\n//             yield put({\n//                 type: ADD_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         }\n//         catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: ADD_POST_FAILURE,\n//                 error: err.response.data,\n//             })\n//         }\n//     }\n//     function addCommentAPI(data) {\n//         return axios.post(`/post/${data.postId}/comment`, data)\n//     }\n//     function* addComment(action) {\n//         try {\n//             const result = yield call(addCommentAPI, action.data);\n//             console.log('comment:', result.data);\n//             yield put({\n//                 type: ADD_COMMENT_SUCCESS,\n//                 data: result.data,\n//             });\n//         }\n//         catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: ADD_COMMENT_FAILURE,\n//                 error: err.response.data,\n//             })\n//         }\n//     }\n//     function retweetAPI(data) {\n//         return axios.post(`/post/${data}/retweet`);\n//     }\n//     function* retweet(action) {\n//         try {\n//             const result = yield call(retweetAPI, action.data);\n//             yield put({\n//                 type: RETWEET_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: RETWEET_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function uploadImagesAPI(data) {\n//         return axios.post('/post/images', data);\n//     }\n//     function* uploadImages(action) {\n//         try {\n//             const result = yield call(uploadImagesAPI, action.data);\n//             yield put({\n//                 type: UPLOAD_IMAGES_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: UPLOAD_IMAGES_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function likePostAPI(data) {\n//         return axios.patch(`/post/${data}/like`);\n//     }\n//     function* likePost(action) {\n//         try {\n//             const result = yield call(likePostAPI, action.data);\n//             yield put({\n//                 type: LIKE_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: LIKE_POST_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function unlikePostAPI(data) {\n//         return axios.delete(`/post/${data}/like`);\n//     }\n//     function* unlikePost(action) {\n//         try {\n//             const result = yield call(unlikePostAPI, action.data);\n//             yield put({\n//                 type: UNLIKE_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: UNLIKE_POST_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function removePostAPI(data) {\n//         return axios.delete(`/post/${data}`);\n//     }\n//     function* removePost(action) {\n//         try {\n//             const result = yield call(removePostAPI, action.data);\n//             yield put({\n//                 type: REMOVE_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         }\n//         catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: REMOVE_POST_FAILURE,\n//                 error: err.response.data,\n//             })\n//         }\n//     }\n//     function* watchUploadImages() {\n//         yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n//     }\n//     function* watchLikePost() {\n//         yield takeLatest(LIKE_POST_REQUEST, likePost);\n//     }\n//     function* watchUnlikePost() {\n//         yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n//     }\n//     function* watchRetweet() {\n//         yield takeLatest(RETWEET_REQUEST, retweet);\n//     }\n//     function* watchLoadPosts() {\n//         yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n//     }\n//     function* watchLoadUserPosts() {\n//         yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n//     }\n//     function* watchLoadHashtagPosts() {\n//         yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n//     }\n//     function* watchAddPost() {\n//         yield takeLatest(ADD_POST_REQUEST, addPost);\n//     }\n//     function* watchRemovePost() {\n//         yield takeLatest(REMOVE_POST_REQUEST, removePost);\n//     }\n//     function* watchAddComment() {\n//         yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n//     }\n//     export default function* postSaga() {\n//         yield all([\n//             fork(watchAddPost),\n//             fork(watchUploadImages),\n//             fork(watchLikePost),\n//             fork(watchUnlikePost),\n//             fork(watchRetweet),\n//             fork(watchLoadUserPosts),\n//             fork(watchLoadHashtagPosts),\n//             fork(watchLoadPosts),\n//             fork(watchRemovePost),\n//             fork(watchAddComment),\n//         ]);\n//     }\nimport axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n} // function loadPostAPI(data) {\n//     return axios.get(`/post/${data}`);\n// }\n// function* loadPost(action) {\n//     try {\n//         const result = yield call(loadPostAPI, action.data);\n//         yield put({\n//             type: LOAD_POST_SUCCESS,\n//             data: result.data,\n//         });\n//     } catch (err) {\n//         console.error(err);\n//         yield put({\n//             type: LOAD_POST_FAILURE,\n//             data: err.response.data,\n//         });\n//     }\n// }\n\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            data: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context8.next = 15;\n          break;\n\n        case 10:\n          _context8.prev = 10;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context9.next = 15;\n          break;\n\n        case 10:\n          _context9.prev = 10;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} // function* watchLoadPost() {\n//     yield takeLatest(LOAD_POST_REQUEST, loadPost);\n// }\n\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), // fork(watchLoadPost),\n          fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["retweet","uploadImages","likePost","unlikePost","loadUserPosts","loadHashtagPosts","loadPosts","addPost","removePost","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadUserPosts","watchLoadHashtagPosts","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","action","result","type","console","error","response","uploadImagesAPI","likePostAPI","patch","unlikePostAPI","loadUserPostsAPI","lastId","get","loadHashtagPostsAPI","encodeURIComponent","loadPostsAPI","addPostAPI","id","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["// import axios from 'axios';\r\n// import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n// import {\r\n//     ADD_COMMENT_FAILURE,\r\n//     ADD_COMMENT_REQUEST,\r\n//     ADD_COMMENT_SUCCESS,\r\n//     ADD_POST_FAILURE,\r\n//     ADD_POST_REQUEST,\r\n//     ADD_POST_SUCCESS,\r\n//     LIKE_POST_FAILURE,\r\n//     LIKE_POST_REQUEST,\r\n//     LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n//     LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n//     LOAD_POSTS_FAILURE,\r\n//     LOAD_POSTS_REQUEST,\r\n//     LOAD_POSTS_SUCCESS,\r\n//     LOAD_USER_POSTS_FAILURE,\r\n//     LOAD_USER_POSTS_REQUEST,\r\n//     LOAD_USER_POSTS_SUCCESS,\r\n//     REMOVE_POST_FAILURE,\r\n//     REMOVE_POST_REQUEST,\r\n//     REMOVE_POST_SUCCESS,\r\n//     RETWEET_FAILURE,\r\n//     RETWEET_REQUEST,\r\n//     RETWEET_SUCCESS,\r\n//     UNLIKE_POST_FAILURE,\r\n//     UNLIKE_POST_REQUEST,\r\n//     UNLIKE_POST_SUCCESS,\r\n//     UPLOAD_IMAGES_FAILURE,\r\n//     UPLOAD_IMAGES_REQUEST,\r\n//     UPLOAD_IMAGES_SUCCESS,\r\n// } from '../reducers/post';\r\n// import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n// function loadUserPostsAPI(data, lastId) {\r\n//     return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n// }\r\n\r\n// function* loadUserPosts(action) {\r\n//     try {\r\n//         const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n//         yield put({\r\n//             type: LOAD_USER_POSTS_SUCCESS,\r\n//             data: result.data,\r\n//         });\r\n//     } catch (err) {\r\n//         console.error(err);\r\n//         yield put({\r\n//             type: LOAD_USER_POSTS_FAILURE,\r\n//             data: err.response.data,\r\n//         });\r\n//     }\r\n// }\r\n\r\n// function loadHashtagPostsAPI(data, lastId) {\r\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\r\n\r\n//     function* loadHashtagPosts(action) {\r\n//         try {\r\n//             const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n//             yield put({\r\n//                 type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: LOAD_HASHTAG_POSTS_FAILURE,\r\n//                 data: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function loadPostsAPI(lastId) {\r\n//         return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\r\n//     }\r\n\r\n//     function* loadPosts(action) {\r\n//         try {\r\n//             const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n//             yield put({\r\n//                 type: LOAD_POSTS_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: LOAD_POSTS_FAILURE,\r\n//                 data: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function addPostAPI(data) {\r\n//         return axios.post('/post', data);\r\n//     }\r\n//     function* addPost(action) {\r\n//         try {\r\n//             const result = yield call(addPostAPI, action.data);\r\n\r\n//             yield put({\r\n//                 type: ADD_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         }\r\n//         catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: ADD_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     function addCommentAPI(data) {\r\n//         return axios.post(`/post/${data.postId}/comment`, data)\r\n//     }\r\n//     function* addComment(action) {\r\n//         try {\r\n//             const result = yield call(addCommentAPI, action.data);\r\n//             console.log('comment:', result.data);\r\n//             yield put({\r\n//                 type: ADD_COMMENT_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         }\r\n//         catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: ADD_COMMENT_FAILURE,\r\n//                 error: err.response.data,\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     function retweetAPI(data) {\r\n//         return axios.post(`/post/${data}/retweet`);\r\n//     }\r\n\r\n//     function* retweet(action) {\r\n//         try {\r\n//             const result = yield call(retweetAPI, action.data);\r\n//             yield put({\r\n//                 type: RETWEET_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: RETWEET_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function uploadImagesAPI(data) {\r\n//         return axios.post('/post/images', data);\r\n//     }\r\n\r\n//     function* uploadImages(action) {\r\n//         try {\r\n//             const result = yield call(uploadImagesAPI, action.data);\r\n//             yield put({\r\n//                 type: UPLOAD_IMAGES_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: UPLOAD_IMAGES_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function likePostAPI(data) {\r\n//         return axios.patch(`/post/${data}/like`);\r\n//     }\r\n\r\n//     function* likePost(action) {\r\n//         try {\r\n//             const result = yield call(likePostAPI, action.data);\r\n//             yield put({\r\n//                 type: LIKE_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: LIKE_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function unlikePostAPI(data) {\r\n//         return axios.delete(`/post/${data}/like`);\r\n//     }\r\n\r\n//     function* unlikePost(action) {\r\n//         try {\r\n//             const result = yield call(unlikePostAPI, action.data);\r\n//             yield put({\r\n//                 type: UNLIKE_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: UNLIKE_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function removePostAPI(data) {\r\n//         return axios.delete(`/post/${data}`);\r\n//     }\r\n//     function* removePost(action) {\r\n//         try {\r\n//             const result = yield call(removePostAPI, action.data);\r\n\r\n//             yield put({\r\n//                 type: REMOVE_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         }\r\n//         catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: REMOVE_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     function* watchUploadImages() {\r\n//         yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n//     }\r\n\r\n//     function* watchLikePost() {\r\n//         yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n//     }\r\n\r\n//     function* watchUnlikePost() {\r\n//         yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n//     }\r\n//     function* watchRetweet() {\r\n//         yield takeLatest(RETWEET_REQUEST, retweet);\r\n//     }\r\n//     function* watchLoadPosts() {\r\n//         yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n//     }\r\n//     function* watchLoadUserPosts() {\r\n//         yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n//     }\r\n\r\n//     function* watchLoadHashtagPosts() {\r\n//         yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n//     }\r\n//     function* watchAddPost() {\r\n//         yield takeLatest(ADD_POST_REQUEST, addPost);\r\n//     }\r\n\r\n//     function* watchRemovePost() {\r\n//         yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n//     }\r\n\r\n//     function* watchAddComment() {\r\n//         yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n//     }\r\n\r\n//     export default function* postSaga() {\r\n//         yield all([\r\n//             fork(watchAddPost),\r\n//             fork(watchUploadImages),\r\n//             fork(watchLikePost),\r\n//             fork(watchUnlikePost),\r\n//             fork(watchRetweet),\r\n//             fork(watchLoadUserPosts),\r\n//             fork(watchLoadHashtagPosts),\r\n//             fork(watchLoadPosts),\r\n//             fork(watchRemovePost),\r\n//             fork(watchAddComment),\r\n//         ]);\r\n//     }\r\nimport axios from 'axios';\r\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n// function loadPostAPI(data) {\r\n//     return axios.get(`/post/${data}`);\r\n// }\r\n\r\n// function* loadPost(action) {\r\n//     try {\r\n//         const result = yield call(loadPostAPI, action.data);\r\n//         yield put({\r\n//             type: LOAD_POST_SUCCESS,\r\n//             data: result.data,\r\n//         });\r\n//     } catch (err) {\r\n//         console.error(err);\r\n//         yield put({\r\n//             type: LOAD_POST_FAILURE,\r\n//             data: err.response.data,\r\n//         });\r\n//     }\r\n// }\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\n// function* watchLoadPost() {\r\n//     yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n// }\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        // fork(watchLoadPost),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}