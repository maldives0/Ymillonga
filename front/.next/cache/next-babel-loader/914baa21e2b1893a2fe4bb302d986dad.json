{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport initialStore from '../reducers/store';\nimport useSWR, { mutate } from 'swr';\nimport produce from '../utils/produce';\nimport fetch from '../libs/fetch';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport useMe from '../hooks/useMe';\nimport useMainPosts from '../hooks/useMainPosts';\n\nvar Home = function Home() {\n  _s();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSWR = useSWR('/api/data', fetch),\n      data = _useSWR.data;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault(); // call mutate to optimistically update the UI\n              // we use Immer produce to allow us to perform and immutable change\n              // while coding it as a normal mutation of the same object\n\n              mutate(\"/api/data\", produce(function (draftData) {\n                draftData.push(text);\n              }), false); // then we send the request to the API and let mutate\n              // update the data with the API response\n              // if this fail it will rollback the optimistic update\n\n              _context.t0 = mutate;\n              _context.next = 5;\n              return fetch('/api/data', {\n                method: 'POST',\n                body: JSON.stringify({\n                  text: text\n                })\n              });\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)('/api/data', _context.t1);\n              setText('');\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  var _useMe = useMe(),\n      _useMe2 = _slicedToArray(_useMe, 1),\n      me = _useMe2[0];\n\n  var _useMainPosts = useMainPosts(),\n      _useMainPosts2 = _slicedToArray(_useMainPosts, 1),\n      mainPosts = _useMainPosts2[0];\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: function onChange(event) {\n            return setText(event.target.value);\n          },\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data ? data.map(function (datum) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: datum\n          }, datum, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 47\n          }, _this);\n        }) : 'loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 14\n    }, _this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 20\n    }, _this), mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"mUfLqwfmo+m0OlwOVdsWslJ9Yzg=\", false, function () {\n  return [useSWR, useMe, useMainPosts];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useState","initialStore","useSWR","mutate","produce","fetch","AppLayout","PostForm","PostCard","useMe","useMainPosts","Home","text","setText","data","handleSubmit","event","preventDefault","draftData","push","method","body","JSON","stringify","me","mainPosts","target","value","map","datum","c","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport initialStore from '../reducers/store';\r\nimport useSWR, { mutate } from 'swr';\r\nimport produce from '../utils/produce';\r\n\r\nimport fetch from '../libs/fetch'\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport useMe from '../hooks/useMe';\r\nimport useMainPosts from '../hooks/useMainPosts';\r\nconst Home = () => {\r\n    const [text, setText] = useState('');\r\n    const { data } = useSWR('/api/data', fetch)\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        // call mutate to optimistically update the UI\r\n        // we use Immer produce to allow us to perform and immutable change\r\n        // while coding it as a normal mutation of the same object\r\n        mutate(\"/api/data\", produce(draftData => {\r\n            draftData.push(text)\r\n        }), false)\r\n        // then we send the request to the API and let mutate\r\n        // update the data with the API response\r\n        // if this fail it will rollback the optimistic update\r\n        mutate('/api/data', await fetch('/api/data', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ text })\r\n        }))\r\n        setText('')\r\n    }\r\n\r\n\r\n\r\n\r\n    const [me] = useMe();\r\n    const [mainPosts] = useMainPosts();\r\n\r\n    return (\r\n\r\n        <AppLayout>\r\n            {<div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={event => setText(event.target.value)}\r\n                        value={text}\r\n                    />\r\n                    <button>Create</button>\r\n                </form>\r\n                <ul>\r\n                    {data ? data.map(datum => <li key={datum}>{datum}</li>) : 'loading...'}\r\n                </ul>\r\n            </div>}\r\n\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}