{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\PostForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var imagePaths = useSelector(function (state) {\n    return state.post.imagePaths;\n  });\n  var addPostLoading = useSelector(function (state) {\n    return state.post.addPostLoading;\n  });\n  var addPostDone = useSelector(function (state) {\n    return state.post.addPostDone;\n  });\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  var imageInput = useRef();\n  useEffect(function () {\n    if (addPostDone) setText('');\n  }, [addPostDone]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('clickImgInfo', e.target.files); //선택한 이미지 파일 형식이 담겨있다(1개)\n\n    var imageFormData = new FormData(); //멀티파트형식으로 백서버로 보낸다\n\n    [].forEach.call(e.target.files, function (f) {\n      //유사배열이므로 forEach method를 배열에서 빌려온다\n      imageFormData.append('image', f); //백서버의 키 값과 'image' 일치시켜야 함\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  }, []);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성한 후 버튼을 누르세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  return ___EmotionJSX(Form, {\n    style: {\n      margin: '10px 0 30px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    },\n    __self: _this\n  }, ___EmotionJSX(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    },\n    __self: _this\n  }, ___EmotionJSX(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC624\\uB298\\uC740 \\uC5B4\\uB5A4 \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    style: {\n      height: '80px',\n      marginBottom: '5px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    },\n    __self: _this\n  }), ___EmotionJSX(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(Button, {\n    onClick: onClickImageUpload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    },\n    __self: _this\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\\uD558\\uAE30\"), ___EmotionJSX(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    loading: addPostLoading,\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    },\n    __self: _this\n  }, \"\\uAC8C\\uC2DC\\uD558\\uAE30\")), ___EmotionJSX(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    },\n    __self: _this\n  }, imagePaths.map(function (v, i) {\n    return ___EmotionJSX(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      },\n      __self: _this\n    }, ___EmotionJSX(\"img\", {\n      src: v,\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      },\n      __self: _this\n    }), ___EmotionJSX(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      },\n      __self: _this\n    }, ___EmotionJSX(Button, {\n      onClick: onRemoveImage(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      },\n      __self: _this\n    }, \"\\uC0AD\\uC81C\\uD558\\uAE30\")));\n  }))));\n};\n\n_s(PostForm, \"b82nlxBgBT6takWQodei/u2sWQ0=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/PostForm.js"],"names":["React","useRef","useCallback","useEffect","useSelector","useDispatch","Form","Input","Button","useInput","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","imagePaths","state","post","addPostLoading","addPostDone","dispatch","text","onChangeText","setText","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","type","data","onRemoveImage","index","onSubmit","trim","alert","formData","p","margin","height","marginBottom","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Form, Input, Button } from 'antd';\r\nimport useInput from '../hooks/useInput';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n\r\n    const imagePaths = useSelector(state => state.post.imagePaths);\r\n    const addPostLoading = useSelector(state => state.post.addPostLoading);\r\n    const addPostDone = useSelector(state => state.post.addPostDone);\r\n    const dispatch = useDispatch();\r\n    const [text, onChangeText, setText] = useInput('');\r\n    const imageInput = useRef();\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) setText('');\r\n    }, [addPostDone]);\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('clickImgInfo', e.target.files);//선택한 이미지 파일 형식이 담겨있다(1개)\r\n        const imageFormData = new FormData();//멀티파트형식으로 백서버로 보낸다\r\n        [].forEach.call(e.target.files, (f) => {//유사배열이므로 forEach method를 배열에서 빌려온다\r\n            imageFormData.append('image', f);//백서버의 키 값과 'image' 일치시켜야 함\r\n        });\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n    }, []);\r\n\r\n\r\n    const onRemoveImage = useCallback((index) => () => {\r\n        dispatch({\r\n            type: REMOVE_IMAGE,\r\n            data: index,\r\n        });\r\n    }, []);\r\n    const onSubmit = useCallback(() => {\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성한 후 버튼을 누르세요.');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths]);\r\n    return (\r\n        <Form\r\n            style={{ margin: '10px 0 30px' }}\r\n            encType=\"multipart/form-data\"\r\n            onFinish={onSubmit}\r\n        >\r\n            <Form.Item>\r\n                <Input.TextArea\r\n                    value={text}\r\n                    onChange={onChangeText}\r\n                    maxLength={140}\r\n                    placeholder=\"오늘은 어떤 일이 있었나요?\"\r\n                    style={{\r\n                        height: '80px',\r\n                        marginBottom: '5px'\r\n                    }}\r\n                />\r\n                <div>\r\n                    <input\r\n                        type=\"file\" name=\"image\" multiple hidden\r\n                        ref={imageInput}\r\n                        onChange={onChangeImages} />\r\n                    <Button onClick={onClickImageUpload}>이미지 업로드하기</Button>\r\n                    <Button type=\"primary\"\r\n                        style={{ float: 'right' }}\r\n                        loading={addPostLoading}\r\n                        htmlType=\"submit\">게시하기</Button>\r\n                </div>\r\n                <div>\r\n                    {imagePaths.map((v, i) => {\r\n                        return (\r\n                            <div key={v} style={{ display: 'inline-block' }}>\r\n                                <img\r\n                                    src={v}\r\n                                    style={{ width: '200px' }} alt={v} />\r\n                                <div>\r\n                                    <Button\r\n                                        onClick={onRemoveImage(i)}>삭제하기</Button>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\nexport default PostForm; "]},"metadata":{},"sourceType":"module"}