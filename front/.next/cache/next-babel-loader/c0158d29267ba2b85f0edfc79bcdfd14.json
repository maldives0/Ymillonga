{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\";\nimport React from 'react';\nimport fetch from '../libs/fetch';\nimport useSWR, { mutate } from 'swr';\nimport produce from \"immer\";\nexport default (() => {\n  const [text, setText] = React.useState('');\n  const {\n    data\n  } = useSWR('/api/data', fetch);\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // call mutate to optimistically update the UI\n    // we use Immer produce to allow us to perform and immutable change\n    // while coding it as a normal mutation of the same object\n\n    mutate(\"/api/data\", produce(draftData => {\n      draftData.push(text);\n    }), false); // then we send the request to the API and let mutate\n    // update the data with the API response\n    // if this fail it will rollback the optimistic update\n\n    mutate('/api/data', await fetch('/api/data', {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    }));\n    setText('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: event => setText(event.target.value),\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data ? data.map(datum => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: datum\n      }, datum, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 39\n      }, this)) : 'loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 12\n  }, this);\n});","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","fetch","useSWR","mutate","produce","text","setText","useState","data","handleSubmit","event","preventDefault","draftData","push","method","body","JSON","stringify","target","value","map","datum"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,KAA/B;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,gBAAe,MAAM;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWN,MAAM,CAAC,WAAD,EAAcD,KAAd,CAAvB;;AAEA,iBAAeQ,YAAf,CAA4BC,KAA5B,EAAmC;AAC/BA,IAAAA,KAAK,CAACC,cAAN,GAD+B,CAE/B;AACA;AACA;;AACAR,IAAAA,MAAM,CAAC,WAAD,EAAcC,OAAO,CAACQ,SAAS,IAAI;AACrCA,MAAAA,SAAS,CAACC,IAAV,CAAeR,IAAf;AACH,KAF0B,CAArB,EAEF,KAFE,CAAN,CAL+B,CAQ/B;AACA;AACA;;AACAF,IAAAA,MAAM,CAAC,WAAD,EAAc,MAAMF,KAAK,CAAC,WAAD,EAAc;AACzCa,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA;AAAF,OAAf;AAFmC,KAAd,CAAzB,CAAN;AAIAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AAED,sBAAO;AAAA,4BACH;AAAM,MAAA,QAAQ,EAAEG,YAAhB;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,QAAQ,EAAEC,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAACQ,MAAN,CAAaC,KAAd,CAF9B;AAGI,QAAA,KAAK,EAAEd;AAHX;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,eASH;AAAA,gBACKG,IAAI,GAAGA,IAAI,CAACY,GAAL,CAASC,KAAK,iBAAI;AAAA,kBAAiBA;AAAjB,SAASA,KAAT;AAAA;AAAA;AAAA;AAAA,cAAlB,CAAH,GAAqD;AAD9D;AAAA;AAAA;AAAA;AAAA,YATG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAaH,CAnCD","sourcesContent":["import React from 'react'\r\nimport fetch from '../libs/fetch'\r\n\r\nimport useSWR, { mutate } from 'swr'\r\nimport produce from \"immer\"\r\n\r\nexport default () => {\r\n    const [text, setText] = React.useState('');\r\n    const { data } = useSWR('/api/data', fetch)\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        // call mutate to optimistically update the UI\r\n        // we use Immer produce to allow us to perform and immutable change\r\n        // while coding it as a normal mutation of the same object\r\n        mutate(\"/api/data\", produce(draftData => {\r\n            draftData.push(text)\r\n        }), false)\r\n        // then we send the request to the API and let mutate\r\n        // update the data with the API response\r\n        // if this fail it will rollback the optimistic update\r\n        mutate('/api/data', await fetch('/api/data', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ text })\r\n        }))\r\n        setText('')\r\n    }\r\n\r\n    return <div>\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                onChange={event => setText(event.target.value)}\r\n                value={text}\r\n            />\r\n            <button>Create</button>\r\n        </form>\r\n        <ul>\r\n            {data ? data.map(datum => <li key={datum}>{datum}</li>) : 'loading...'}\r\n        </ul>\r\n    </div>\r\n}"]},"metadata":{},"sourceType":"module"}