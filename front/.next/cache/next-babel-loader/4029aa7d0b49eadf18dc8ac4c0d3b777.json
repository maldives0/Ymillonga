{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); // 주소에 한글이 들어가면 unescaped character error가 난다\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log('comment:', result.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadUserPostsAPI","data","lastId","get","loadUserPosts","action","result","type","err","console","error","response","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","loadPostsAPI","loadPosts","addPostAPI","post","addPost","addCommentAPI","postId","addComment","log","retweetAPI","retweet","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","removePostAPI","removePost","watchUploadImages","watchLikePost","watchUnlikePost","watchRetweet","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\r\n}\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log('comment:', result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}