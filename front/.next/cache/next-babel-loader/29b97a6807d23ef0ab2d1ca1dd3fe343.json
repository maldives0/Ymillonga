{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  // mainPosts: [\n  //     {\n  //         id: 1,//게시글 아이디\n  //         User: {//게시글 작성자 \n  //             id: 1,\n  //             nickname: 'momo',\n  //         },\n  //         content: '첫 번째 게시글 #first',\n  //         Images: [{\n  //             src: faker.image.image(),\n  //         },\n  //         {\n  //             src: faker.image.image(),\n  //         }, {\n  //             src: faker.image.image(),\n  //         }\n  //         ],\n  //         Likers: [],\n  //         Comments: [{\n  //             User: {\n  //                 id: nanoid(),\n  //                 nickname: faker.name.findName(),\n  //             },\n  //             content: faker.lorem.sentence(),\n  //         }],\n  //     }\n  // ],\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // mainPosts: [{\n//     id: 1,//게시글 아이디\n//     User: {//게시글 작성자 \n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     content: '첫 번째 게시글 #first',\n//     Images: [{\n//         src: faker.image.image(),\n//     },\n//     {\n//         src: faker.image.image(),\n//     }, {\n//         src: faker.image.image(),\n//     }\n//     ],\n//     Likers: [],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }],\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'momo'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: nanoid(),\n  User: {\n    id: 2,\n    nickname: 'soso'\n  },\n  content: data\n});\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: nanoid(),\n  User: {\n    id: nanoid(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: nanoid(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts); //mainPosts 앞으로 최신글 순으로 새로운 게시글 더해주기\n\n      draft.hasMorePosts = draft.mainPosts.length < 30;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.imagePaths = []; //대기중 파일 목록 없애기\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      const post = draft.mainPosts.find(v => v.id === action.data.postId);\n      post.Comments.unshift(dummyComment(action.data.content));\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = true;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      console.log(action.data, 'post.id');\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = true;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","dummyPost","data","id","content","User","nickname","Images","Comments","dummyComment","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","src","image","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","draft","type","concat","length","error","unshift","post","find","v","postId","console","log","filter"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n\r\n    // mainPosts: [\r\n    //     {\r\n    //         id: 1,//게시글 아이디\r\n    //         User: {//게시글 작성자 \r\n    //             id: 1,\r\n    //             nickname: 'momo',\r\n    //         },\r\n    //         content: '첫 번째 게시글 #first',\r\n    //         Images: [{\r\n    //             src: faker.image.image(),\r\n    //         },\r\n    //         {\r\n    //             src: faker.image.image(),\r\n    //         }, {\r\n    //             src: faker.image.image(),\r\n    //         }\r\n    //         ],\r\n    //         Likers: [],\r\n    //         Comments: [{\r\n    //             User: {\r\n    //                 id: nanoid(),\r\n    //                 nickname: faker.name.findName(),\r\n    //             },\r\n    //             content: faker.lorem.sentence(),\r\n    //         }],\r\n    //     }\r\n    // ],\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n\r\n};\r\n// mainPosts: [{\r\n//     id: 1,//게시글 아이디\r\n//     User: {//게시글 작성자 \r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     content: '첫 번째 게시글 #first',\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     },\r\n//     {\r\n//         src: faker.image.image(),\r\n//     }, {\r\n//         src: faker.image.image(),\r\n//     }\r\n//     ],\r\n//     Likers: [],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }],\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'momo',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\nconst dummyComment = (data) => ({\r\n    id: nanoid(),\r\n    User: {\r\n        id: 2,\r\n        nickname: 'soso',\r\n    },\r\n    content: data,\r\n});\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: nanoid(),\r\n    User: {\r\n        id: nanoid(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: nanoid(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = action.data.concat(draft.mainPosts);\r\n            //mainPosts 앞으로 최신글 순으로 새로운 게시글 더해주기\r\n            draft.hasMorePosts = draft.mainPosts.length < 30;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(dummyPost(action.data));\r\n            draft.imagePaths = [];//대기중 파일 목록 없애기\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n            post.Comments.unshift(dummyComment(action.data.content));\r\n            break;\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            console.log(action.data, 'post.id');\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = true;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}