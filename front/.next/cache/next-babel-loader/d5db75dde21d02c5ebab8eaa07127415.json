{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, REPORT_POST_FAILURE, REPORT_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REPORT_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); // 주소에 한글이 들어가면 unescaped character error가 난다\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log('comment:', result.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.PostId}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    yield put({\n      type: UPDATE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction reportPostAPI(data) {\n  return axios.post(`/post/${data.postId}/report`, data); // POST /post/1/comment\n}\n\nfunction* reportPost(action) {\n  try {\n    const result = yield call(reportPostAPI, action.data);\n    yield put({\n      type: REPORT_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REPORT_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchReportPost() {\n  yield takeLatest(REPORT_POST_REQUEST, reportPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchUpdatePost), fork(watchAddPost), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment), fork(watchReportPost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","REPORT_POST_FAILURE","REPORT_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REPORT_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","result","type","err","console","error","response","loadUserPostsAPI","lastId","loadUserPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","loadPostsAPI","loadPosts","addPostAPI","post","addPost","addCommentAPI","postId","addComment","log","updatePostAPI","patch","PostId","updatePost","retweetAPI","retweet","uploadImagesAPI","uploadImages","likePostAPI","likePost","unlikePostAPI","delete","unlikePost","reportPostAPI","reportPost","removePostAPI","removePost","watchUpdatePost","watchUploadImages","watchLikePost","watchUnlikePost","watchRetweet","watchLoadPost","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","watchReportPost","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n    REPORT_POST_FAILURE, REPORT_POST_REQUEST, \r\n     LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REPORT_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\r\n}\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log('comment:', result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction updatePostAPI(data) {\r\n    return axios.patch(`/post/${data.PostId}`, data);\r\n}\r\n\r\nfunction* updatePost(action) {\r\n    try {\r\n        const result = yield call(updatePostAPI, action.data);\r\n        yield put({\r\n            type: UPDATE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPDATE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction reportPostAPI(data) {\r\n    return axios.post(`/post/${data.postId}/report`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* reportPost(action) {\r\n    try {\r\n        const result = yield call(reportPostAPI, action.data);\r\n        yield put({\r\n            type: REPORT_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REPORT_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUpdatePost() {\r\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\r\n}\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchReportPost() {\r\n    yield takeLatest(REPORT_POST_REQUEST, reportPost);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchUpdatePost),\r\n        fork(watchAddPost),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n        fork(watchReportPost),\r\n         fork(watchLoadPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}