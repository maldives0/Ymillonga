{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // mainPosts: [{\n//     id: 1,//게시글 아이디\n//     User: {//게시글 작성자 \n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     content: '첫 번째 게시글 #first',\n//     Images: [{\n//         src: faker.image.image(),\n//     },\n//     {\n//         src: faker.image.image(),\n//     }, {\n//         src: faker.image.image(),\n//     }\n//     ],\n//     Likers: [],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }],\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n// const dummyComment = (data) => ({\n//     id: nanoid(),\n//     User: {\n//         id: 2,\n//         nickname: 'soso',\n//     },\n//     content: data,\n// });\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: nanoid(),\n//     User: {\n//         id: nanoid(),\n//         nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n      //FE에서만 이미지를 지우고 BE에서는 간직하고 있기\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data); //mainPosts 앞으로 최신글 순으로 새로운 게시글 더해주기\n\n        draft.hasMorePosts = draft.mainPosts.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Likers = _post2.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = []; //대기중 파일 목록 없애기\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = true;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.PostId;\n        });\n        post.Comments.unshift(action.data);\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = true;\n        draft.addCommentError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = true;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","reducer","state","action","draft","type","filter","v","i","data","concat","length","error","post","find","id","PostId","Likers","push","UserId","unshift","Comments"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n\r\n};\r\n// mainPosts: [{\r\n//     id: 1,//게시글 아이디\r\n//     User: {//게시글 작성자 \r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     content: '첫 번째 게시글 #first',\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     },\r\n//     {\r\n//         src: faker.image.image(),\r\n//     }, {\r\n//         src: faker.image.image(),\r\n//     }\r\n//     ],\r\n//     Likers: [],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }],\r\n// const dummyPost = (data) => ({\r\n//     id: data.id,\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n// const dummyComment = (data) => ({\r\n//     id: nanoid(),\r\n//     User: {\r\n//         id: 2,\r\n//         nickname: 'soso',\r\n//     },\r\n//     content: data,\r\n// });\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//     id: nanoid(),\r\n//     User: {\r\n//         id: nanoid(),\r\n//         nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case REMOVE_IMAGE:\r\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);//FE에서만 이미지를 지우고 BE에서는 간직하고 있기\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            //mainPosts 앞으로 최신글 순으로 새로운 게시글 더해주기\r\n            draft.hasMorePosts = draft.mainPosts.length === 10;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n        case LIKE_POST_REQUEST:\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break;\r\n        case LIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({ id: action.data.UserId });\r\n            draft.likePostLoading = false;\r\n            draft.likePostDone = true;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        case UNLIKE_POST_REQUEST:\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break;\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostDone = true;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];//대기중 파일 목록 없애기\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            break;\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break;\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            draft.imagePaths = action.data;\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesDone = true;\r\n            break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = true;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}