{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // mainPosts: [{\n//     id: 1,//게시글 아이디\n//     User: {//게시글 작성자 \n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     content: '첫 번째 게시글 #first',\n//     Images: [{\n//         src: faker.image.image(),\n//     },\n//     {\n//         src: faker.image.image(),\n//     }, {\n//         src: faker.image.image(),\n//     }\n//     ],\n//     Likers: [],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }],\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'momo'\n  },\n  Images: [],\n  Comments: []\n});\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: nanoid(),\n  User: {\n    id: nanoid(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: nanoid(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.imagePaths = []; //대기중 파일 목록 없애기\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts.filter((v, i) => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = true;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","id","content","User","nickname","Images","Comments","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","src","image","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","draft","type","unshift","error","filter","v","i"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n};\r\n// mainPosts: [{\r\n//     id: 1,//게시글 아이디\r\n//     User: {//게시글 작성자 \r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     content: '첫 번째 게시글 #first',\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     },\r\n//     {\r\n//         src: faker.image.image(),\r\n//     }, {\r\n//         src: faker.image.image(),\r\n//     }\r\n//     ],\r\n//     Likers: [],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }],\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'momo',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: nanoid(),\r\n    User: {\r\n        id: nanoid(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: nanoid(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(dummyPost(action.data));\r\n            draft.imagePaths = [];//대기중 파일 목록 없애기\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            draft.mainPosts.filter((v, i) => v.id !== action.data);\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = true;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}