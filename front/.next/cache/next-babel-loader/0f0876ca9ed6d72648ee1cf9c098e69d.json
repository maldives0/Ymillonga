{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\";\nimport React, { useState } from 'react';\nimport initialStore from '../reducers/store';\nimport useSWR, { mutate } from 'swr';\nimport produce from '../utils/produce';\nimport fetch from '../libs/fetch';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport useMe from '../hooks/useMe';\nimport useMainPosts from '../hooks/useMainPosts';\n\nconst Home = () => {\n  const [me] = useMe();\n  const [mainPosts] = useMainPosts();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    data\n  } = useSWR('/api/data', fetch);\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // call mutate to optimistically update the UI\n    // we use Immer produce to allow us to perform and immutable change\n    // while coding it as a normal mutation of the same object\n\n    mutate(\"/api/data\", produce(draftData => {\n      draftData.push(text);\n    }), false); // then we send the request to the API and let mutate\n    // update the data with the API response\n    // if this fail it will rollback the optimistic update\n\n    mutate('/api/data', await fetch('/api/data', {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    }));\n    setText('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => setText(event.target.value),\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data ? data.map(datum => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: datum\n        }, datum, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 47\n        }, this)) : 'loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 20\n    }, this), mainPosts.map(c => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useState","initialStore","useSWR","mutate","produce","fetch","AppLayout","PostForm","PostCard","useMe","useMainPosts","Home","me","mainPosts","text","setText","data","handleSubmit","event","preventDefault","draftData","push","method","body","JSON","stringify","target","value","map","datum","c","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,KAA/B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AACA,MAAMC,IAAI,GAAG,MAAM;AAGf,QAAM,CAACC,EAAD,IAAOH,KAAK,EAAlB;AACA,QAAM,CAACI,SAAD,IAAcH,YAAY,EAAhC;AACA,QAAM;AAAA,OAACI,IAAD;AAAA,OAAOC;AAAP,MAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAWd,MAAM,CAAC,WAAD,EAAcG,KAAd,CAAvB;;AAEA,iBAAeY,YAAf,CAA4BC,KAA5B,EAAmC;AAC/BA,IAAAA,KAAK,CAACC,cAAN,GAD+B,CAE/B;AACA;AACA;;AACAhB,IAAAA,MAAM,CAAC,WAAD,EAAcC,OAAO,CAACgB,SAAS,IAAI;AACrCA,MAAAA,SAAS,CAACC,IAAV,CAAeP,IAAf;AACH,KAF0B,CAArB,EAEF,KAFE,CAAN,CAL+B,CAQ/B;AACA;AACA;;AACAX,IAAAA,MAAM,CAAC,WAAD,EAAc,MAAME,KAAK,CAAC,WAAD,EAAc;AACzCiB,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,QAAAA;AAAF,OAAf;AAFmC,KAAd,CAAzB,CAAN;AAIAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AAKD,sBAEI,QAAC,SAAD;AAAA,4BACK;AAAA,8BACG;AAAM,QAAA,QAAQ,EAAEE,YAAhB;AAAA,gCACI;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,QAAQ,EAAEC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACQ,MAAN,CAAaC,KAAd,CAF9B;AAGI,UAAA,KAAK,EAAEb;AAHX;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eASG;AAAA,kBACKE,IAAI,GAAGA,IAAI,CAACY,GAAL,CAASC,KAAK,iBAAI;AAAA,oBAAiBA;AAAjB,WAASA,KAAT;AAAA;AAAA;AAAA;AAAA,gBAAlB,CAAH,GAAqD;AAD9D;AAAA;AAAA;AAAA;AAAA,cATH;AAAA;AAAA;AAAA;AAAA;AAAA,YADL,EAeKjB,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAfX,EAgBKC,SAAS,CAACe,GAAV,CAAeE,CAAD,IAAO;AAClB,0BACI,QAAC,QAAD;AAAqB,QAAA,IAAI,EAAEA;AAA3B,SAAeA,CAAC,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,KAJA,CAhBL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AA0BH,CAvDD;;AAwDA,eAAepB,IAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport initialStore from '../reducers/store';\r\nimport useSWR, { mutate } from 'swr';\r\nimport produce from '../utils/produce';\r\n\r\nimport fetch from '../libs/fetch'\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport useMe from '../hooks/useMe';\r\nimport useMainPosts from '../hooks/useMainPosts';\r\nconst Home = () => {\r\n\r\n\r\n    const [me] = useMe();\r\n    const [mainPosts] = useMainPosts();\r\n    const [text, setText] = useState('');\r\n    const { data } = useSWR('/api/data', fetch)\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        // call mutate to optimistically update the UI\r\n        // we use Immer produce to allow us to perform and immutable change\r\n        // while coding it as a normal mutation of the same object\r\n        mutate(\"/api/data\", produce(draftData => {\r\n            draftData.push(text)\r\n        }), false)\r\n        // then we send the request to the API and let mutate\r\n        // update the data with the API response\r\n        // if this fail it will rollback the optimistic update\r\n        mutate('/api/data', await fetch('/api/data', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ text })\r\n        }))\r\n        setText('')\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <AppLayout>\r\n            {<div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={event => setText(event.target.value)}\r\n                        value={text}\r\n                    />\r\n                    <button>Create</button>\r\n                </form>\r\n                <ul>\r\n                    {data ? data.map(datum => <li key={datum}>{datum}</li>) : 'loading...'}\r\n                </ul>\r\n            </div>}\r\n\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}