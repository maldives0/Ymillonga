{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback, useEffect } from 'react';\nimport useInput from '../hooks/useInput';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col, message } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CHANGE_NICKNAME_REQUEST } from '../reducers/user';\nimport { NicknameInputSearch } from './style';\nimport { initialState } from \"../reducers/user\";\nimport useSWR, { mutate, trigger } from \"swr\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar NicknameEditForm = function NicknameEditForm(_ref) {\n  var onCancel = _ref.onCancel;\n\n  var _useSWR = useSWR(\"globalState\", {\n    initialData: initialState\n  }, {\n    revalidateOnFocus: true\n  }),\n      data = _useSWR.data;\n\n  var dispatch = useDispatch();\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  var changeNicknameLoading = useSelector(function (state) {\n    return state.user.changeNicknameLoading;\n  });\n  var changeNicknameError = useSelector(function (state) {\n    return state.user.changeNicknameError;\n  });\n\n  var _useInput = useInput((me === null || me === void 0 ? void 0 : me.nickname) || ''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      nickname = _useInput2[0],\n      onChangeNickname = _useInput2[1];\n\n  useEffect(function () {\n    if (changeNicknameError) {\n      message.error(changeNicknameError, 5);\n    }\n  }, [changeNicknameError]);\n  var onSubmit = useCallback(function () {\n    mutate(\"globalState\", _objectSpread(_objectSpread({}, data), {}, {\n      me: {\n        nickname: nickname\n      }\n    }), false);\n    dispatch({\n      type: CHANGE_NICKNAME_REQUEST,\n      data: nickname\n    });\n    trigger(\"globalState\");\n  }, [nickname]);\n  return ___EmotionJSX(Form, {\n    onFinish: onSubmit\n  }, ___EmotionJSX(Row, null, ___EmotionJSX(Col, null, ___EmotionJSX(Form.Item, {\n    label: \"\\uB2C9\\uB124\\uC784\",\n    rules: [{\n      required: true\n    }]\n  }, ___EmotionJSX(NicknameInputSearch, {\n    value: nickname,\n    required: true,\n    onChange: onChangeNickname\n  })))), ___EmotionJSX(Row, null, ___EmotionJSX(Col, {\n    span: 16,\n    offset: 6\n  }, ___EmotionJSX(Button, {\n    htmlType: \"submit\",\n    loading: changeNicknameLoading,\n    type: \"primary\"\n  }, \"\\uBC14\\uAFB8\\uAE30\"), ___EmotionJSX(Button, {\n    style: {\n      marginLeft: 5\n    },\n    className: \"nickname-cancel-button\",\n    onClick: onCancel\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))));\n};\n\nNicknameEditForm.propTypes = {\n  onCancel: PropTypes.func.isRequired\n};\nexport default NicknameEditForm;","map":null,"metadata":{},"sourceType":"module"}