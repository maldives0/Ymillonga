{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    console.log('comment:', result.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","lastId","get","loadPosts","action","result","type","data","err","console","error","response","addPostAPI","post","addPost","addCommentAPI","postId","addComment","log","retweetAPI","retweet","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","removePostAPI","removePost","watchUploadImages","watchLikePost","watchUnlikePost","watchRetweet","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS, LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log('comment:', result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}