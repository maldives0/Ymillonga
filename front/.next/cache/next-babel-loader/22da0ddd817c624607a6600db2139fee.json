{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'momo'\n    },\n    content: '첫 번째 게시글 #first',\n    Images: [{\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }],\n    Likers: [],\n    Comments: [{\n      User: {\n        id: nanoid(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  }],\n  imagePaths: []\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: nanoid(),\n  User: {\n    id: nanoid(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: nanoid(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","id","User","nickname","content","Images","src","image","Likers","Comments","name","findName","lorem","sentence","imagePaths","generateDummyPost","number","Array","fill","map","paragraph","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","reducer","state","action","draft","type","addPostLoading","addPostDone","addPostError","unshift","data","error"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'momo',\r\n        },\r\n        content: '첫 번째 게시글 #first',\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        },\r\n        {\r\n            src: faker.image.image(),\r\n        }, {\r\n            src: faker.image.image(),\r\n        }\r\n        ],\r\n        Likers: [],\r\n        Comments: [{\r\n            User: {\r\n                id: nanoid(),\r\n                nickname: faker.name.findName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }],\r\n    imagePaths: [],\r\n\r\n};\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: nanoid(),\r\n    User: {\r\n        id: nanoid(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: nanoid(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}