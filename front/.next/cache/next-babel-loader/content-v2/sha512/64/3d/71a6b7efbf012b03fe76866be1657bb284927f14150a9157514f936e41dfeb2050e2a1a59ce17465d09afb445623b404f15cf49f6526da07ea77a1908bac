{"ast":null,"code":"var _jsxFileName = \"/Users/juyoungjung/ymillonga-sns/front/components/PostCardContent.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar TextArea = Input.TextArea;\n\nvar PostCardContent = function PostCardContent(_ref) {\n  _s();\n\n  var postData = _ref.postData,\n      editMode = _ref.editMode,\n      onCancelUpdate = _ref.onCancelUpdate,\n      onChangePost = _ref.onChangePost;\n  var updatePostLoading = useSelector(function (state) {\n    return state.post.updatePostLoading;\n  });\n  var updatePostDone = useSelector(function (state) {\n    return state.post.updatePostDone;\n  });\n\n  var _useState = useState(postData),\n      editText = _useState[0],\n      setEditText = _useState[1];\n\n  useEffect(function () {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n  var onChangeText = useCallback(function (e) {\n    setEditText(e.target.value);\n  }, []); //prefetch를 false로 해야 미리 build 되지 않는다\n\n  return ___EmotionJSX(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, editMode ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(TextArea, {\n    value: editText,\n    onChange: onChangeText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(Button.Group, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, ___EmotionJSX(Button, {\n    loading: updatePostLoading,\n    onClick: onChangePost(editText),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"), ___EmotionJSX(Button, {\n    type: \"danger\",\n    onClick: onCancelUpdate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))) : postData === null || postData === void 0 ? void 0 : postData.split(/(#[^\\s#]+)/g).map(function (v) {\n    if (v.match(/(#[^\\s#]+)/)) {\n      return ___EmotionJSX(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        prefetch: false,\n        key: v,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }\n      }, ___EmotionJSX(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 33\n        }\n      }, v));\n    }\n\n    return v;\n  }));\n};\n\n_s(PostCardContent, \"aciK1lWG4RV0VzLH5Ou7Ah2j6/g=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onCancelUpdate: PropTypes.func.isRequired,\n  onChangePost: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["/Users/juyoungjung/ymillonga-sns/front/components/PostCardContent.js"],"names":["React","useState","useCallback","useEffect","Link","PropTypes","Input","Button","useSelector","TextArea","PostCardContent","postData","editMode","onCancelUpdate","onChangePost","updatePostLoading","state","post","updatePostDone","editText","setEditText","onChangeText","e","target","value","split","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from 'antd';\nimport { useSelector } from 'react-redux';\nconst { TextArea } = Input;\n\nconst PostCardContent = ({ postData, editMode, onCancelUpdate, onChangePost }) => {\n    const updatePostLoading = useSelector(state => state.post.updatePostLoading);\n    const updatePostDone = useSelector(state => state.post.updatePostDone);\n\n    const [editText, setEditText] = useState(postData);\n\n    useEffect(() => {\n        if (updatePostDone) {\n            onCancelUpdate();\n        }\n    }, [updatePostDone]);\n    const onChangeText = useCallback((e) => {\n        setEditText(e.target.value);\n    }, []);\n    //prefetch를 false로 해야 미리 build 되지 않는다\n    return (\n        <div>\n            {editMode ? (\n                <>\n                    <TextArea value={editText} onChange={onChangeText} />\n                    <Button.Group>\n                        <Button\n                            loading={updatePostLoading}\n                            onClick={onChangePost(editText)}>수정하기</Button>\n                        <Button type=\"danger\"\n                            onClick={onCancelUpdate}>\n                            취소하기\n                    </Button>\n                    </Button.Group>\n                </>\n            ) :\n                postData?.split(/(#[^\\s#]+)/g).map((v) => {\n                    if (v.match(/(#[^\\s#]+)/)) {\n                        return (\n                            <Link\n                                href={{\n                                    pathname: '/hashtag',\n                                    query: { tag: v.slice(1) }\n                                }}\n                                as={`/hashtag/${v.slice(1)}`\n                                }\n                                prefetch={false}\n                                key={v}>\n                                <a>{v}</a>\n                            </Link>\n                        );\n                    }\n                    return v;\n                })}\n\n        </div>\n    );\n};\nPostCardContent.propTypes = {\n    postData: PropTypes.string.isRequired,\n    editMode: PropTypes.bool,\n    onCancelUpdate: PropTypes.func.isRequired,\n    onChangePost: PropTypes.func.isRequired,\n};\nPostCardContent.defaultProps = {\n    editMode: false,\n};\nexport default PostCardContent; "]},"metadata":{},"sourceType":"module"}