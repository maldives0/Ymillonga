{"ast":null,"code":"import _slicedToArray from \"/Users/juyoungjung/ymillonga-sns/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/juyoungjung/ymillonga-sns/front/components/CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  var addCommentLoading = useSelector(function (state) {\n    return state.post.addCommentLoading;\n  });\n  var addCommentDone = useSelector(function (state) {\n    return state.post.addCommentDone;\n  });\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onSubmit = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        userId: me === null || me === void 0 ? void 0 : me.id,\n        postId: post.id\n      }\n    });\n  }, [commentText, me]);\n  return ___EmotionJSX(Form, {\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Input.TextArea, {\n    style: {\n      position: 'relative',\n      marginTop: '10px'\n    },\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(Button, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      bottom: -40\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, \"\\uC785\\uB825\\uD558\\uAE30\")));\n};\n\n_s(CommentForm, \"YkPQuH8FWFywMH1lLjiTw/EBR/k=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number\n  }).isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/juyoungjung/ymillonga-sns/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","useSelector","useDispatch","Form","Input","Button","PropTypes","useInput","ADD_COMMENT_REQUEST","CommentForm","post","me","state","user","addCommentLoading","addCommentDone","dispatch","commentText","onChangeCommentText","setCommentText","onSubmit","type","data","content","userId","id","postId","position","marginTop","right","bottom","propTypes","shape","number","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\n\nconst CommentForm = ({ post }) => {\n    const me = useSelector(state => state.user.me);\n    const addCommentLoading = useSelector(state => state.post.addCommentLoading);\n    const addCommentDone = useSelector(state => state.post.addCommentDone);\n\n    const dispatch = useDispatch();\n    const [commentText, onChangeCommentText, setCommentText] = useInput('');\n\n    useEffect(() => {\n        if (addCommentDone) {\n            setCommentText('');\n        }\n    }, [addCommentDone]);\n\n\n    const onSubmit = useCallback(() => {\n        dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: {\n                content: commentText,\n                userId: me?.id,\n                postId: post.id,\n            },\n        });\n    }, [commentText, me]);\n    return (\n        <Form onFinish={onSubmit}\n        >\n            <Form.Item>\n                <Input.TextArea\n                    style={{ position: 'relative', marginTop: '10px' }}\n                    rows={4}\n                    value={commentText}\n                    onChange={onChangeCommentText}\n                />\n                <Button\n                    style={{\n                        position: 'absolute',\n                        right: 0,\n                        bottom: -40\n                    }}\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    loading={addCommentLoading}\n                >입력하기</Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\nCommentForm.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n    }).isRequired,\n};\nexport default CommentForm; "]},"metadata":{},"sourceType":"module"}