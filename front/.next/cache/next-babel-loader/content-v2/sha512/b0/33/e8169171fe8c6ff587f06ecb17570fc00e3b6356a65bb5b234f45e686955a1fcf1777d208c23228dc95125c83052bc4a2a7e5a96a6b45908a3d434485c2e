{"ast":null,"code":"var _jsxFileName = \"/Users/juyoungjung/ymillonga-sns/front/components/PostForm.js\";\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst PostForm = () => {\n  const imagePaths = useSelector(state => state.post.imagePaths);\n  const addPostLoading = useSelector(state => state.post.addPostLoading);\n  const addPostDone = useSelector(state => state.post.addPostDone);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput('');\n  const imageInput = useRef();\n  useEffect(() => {\n    if (addPostDone) setText('');\n  }, [addPostDone]);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    // console.log('clickImgInfo', e.target.files);//선택한 이미지 파일 형식이 담겨있다(1개)\n    const imageFormData = new FormData(); //멀티파트형식으로 백서버로 보낸다\n\n    [].forEach.call(e.target.files, f => {\n      //유사배열이므로 forEach method를 배열에서 빌려온다\n      imageFormData.append('image', f); //백서버의 키 값과 'image' 일치시켜야 함\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성한 후 버튼을 누르세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  return ___EmotionJSX(Form, {\n    style: {\n      margin: '10px 0 30px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC624\\uB298\\uC740 \\uC5B4\\uB5A4 \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    style: {\n      height: '80px',\n      marginBottom: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\\uD558\\uAE30\"), ___EmotionJSX(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    loading: addPostLoading,\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, \"\\uAC8C\\uC2DC\\uD558\\uAE30\")), ___EmotionJSX(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, imagePaths.map((v, i) => {\n    return ___EmotionJSX(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    }, ___EmotionJSX(\"img\", {\n      src: v.replace(/\\/thumb\\//, '/original/'),\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 33\n      }\n    }), ___EmotionJSX(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }, ___EmotionJSX(Button, {\n      onClick: onRemoveImage(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }\n    }, \"\\uC0AD\\uC81C\\uD558\\uAE30\")));\n  }))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/juyoungjung/ymillonga-sns/front/components/PostForm.js"],"names":["React","useRef","useCallback","useEffect","useSelector","useDispatch","Form","Input","Button","useInput","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","imagePaths","state","post","addPostLoading","addPostDone","dispatch","text","onChangeText","setText","imageInput","onClickImageUpload","current","click","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onRemoveImage","index","onSubmit","trim","alert","formData","p","margin","height","marginBottom","float","map","v","i","display","replace","width"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nconst PostForm = () => {\n\n    const imagePaths = useSelector(state => state.post.imagePaths);\n    const addPostLoading = useSelector(state => state.post.addPostLoading);\n    const addPostDone = useSelector(state => state.post.addPostDone);\n    const dispatch = useDispatch();\n    const [text, onChangeText, setText] = useInput('');\n    const imageInput = useRef();\n\n    useEffect(() => {\n        if (addPostDone) setText('');\n    }, [addPostDone]);\n    const onClickImageUpload = useCallback(() => {\n        imageInput.current.click();\n    }, [imageInput.current]);\n    const onChangeImages = useCallback((e) => {\n        // console.log('clickImgInfo', e.target.files);//선택한 이미지 파일 형식이 담겨있다(1개)\n        const imageFormData = new FormData();//멀티파트형식으로 백서버로 보낸다\n        [].forEach.call(e.target.files, (f) => {//유사배열이므로 forEach method를 배열에서 빌려온다\n            imageFormData.append('image', f);//백서버의 키 값과 'image' 일치시켜야 함\n        });\n        dispatch({\n            type: UPLOAD_IMAGES_REQUEST,\n            data: imageFormData,\n        });\n    }, []);\n\n\n    const onRemoveImage = useCallback((index) => () => {\n        dispatch({\n            type: REMOVE_IMAGE,\n            data: index,\n        });\n    }, []);\n    const onSubmit = useCallback(() => {\n        if (!text || !text.trim()) {\n            return alert('게시글을 작성한 후 버튼을 누르세요.');\n        }\n        const formData = new FormData();\n        imagePaths.forEach((p) => {\n            formData.append('image', p);\n        });\n        formData.append('content', text);\n        return dispatch({\n            type: ADD_POST_REQUEST,\n            data: formData,\n        });\n    }, [text, imagePaths]);\n    return (\n        <Form\n            style={{ margin: '10px 0 30px' }}\n            encType=\"multipart/form-data\"\n            onFinish={onSubmit}\n        >\n            <Form.Item>\n                <Input.TextArea\n                    value={text}\n                    onChange={onChangeText}\n                    maxLength={140}\n                    placeholder=\"오늘은 어떤 일이 있었나요?\"\n                    style={{\n                        height: '80px',\n                        marginBottom: '5px'\n                    }}\n                />\n                <div>\n                    <input\n                        type=\"file\" name=\"image\" multiple hidden\n                        ref={imageInput}\n                        onChange={onChangeImages} />\n                    <Button onClick={onClickImageUpload}>이미지 업로드하기</Button>\n                    <Button type=\"primary\"\n                        style={{ float: 'right' }}\n                        loading={addPostLoading}\n                        htmlType=\"submit\">게시하기</Button>\n                </div>\n                <div>\n                    {imagePaths.map((v, i) => {\n                        return (\n                            <div key={v} style={{ display: 'inline-block' }}>\n                                <img\n                                    src={v.replace(/\\/thumb\\//, '/original/')}\n                                    style={{ width: '200px' }} alt={v} />\n                                <div>\n                                    <Button\n                                        onClick={onRemoveImage(i)}>삭제하기</Button>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </Form.Item>\n        </Form>\n    );\n};\nexport default PostForm; "]},"metadata":{},"sourceType":"module"}