{"ast":null,"code":"var _jsxFileName = \"/Users/juyoungjung/ymillonga-sns/front/components/PostCard.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment, Modal, Form, Tooltip, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { InputReport, CardWrapper } from './style';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport { default as RetweetOutlined } from '@ant-design/icons/RetweetOutlined';\nimport { default as HeartTwoTone } from '@ant-design/icons/HeartTwoTone';\nimport { default as HeartOutlined } from '@ant-design/icons/HeartOutlined';\nimport { default as MessageOutlined } from '@ant-design/icons/MessageOutlined';\nimport { default as EllipsisOutlined } from '@ant-design/icons/EllipsisOutlined';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, UPDATE_POST_REQUEST, REPORT_POST_REQUEST } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Likers, _post$User, _post$User2, _post$User3, _post$User4, _post$User5;\n\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const [reportText, onChangeReportText] = useInput('');\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const reportPostLoading = useSelector(state => state.post.reportPostLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const removePostLoading = useSelector(state => state.post.removePostLoading);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState(false);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return message.info('로그인 후 좋아요를 할 수 있습니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return message.info('로그인 후 리트윗할 수 있습니다.');\n    }\n\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    if (id) {\n      setCommentFormOpened(prev => !prev);\n    } else {\n      return message.info('로그인 후 댓글을 입력할 수 있습니다.');\n    }\n  }, [id]);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n    ;\n  }, []);\n  const onChangePost = useCallback(editText => () => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: UPDATE_POST_REQUEST,\n      data: {\n        PostId: post.id,\n        content: editText\n      }\n    });\n  }, [post]);\n  const onReport = useCallback(() => {\n    if (!id) {\n      return message.info('로그인 후 신고할 수 있습니다.');\n    }\n\n    setModalVisible(true);\n  }, []);\n  const onsubmitReport = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: REPORT_POST_REQUEST,\n      data: {\n        postId: post.id,\n        reason: reportText\n      }\n    });\n  }, [reportText]);\n  const reportCancel = useCallback(() => {\n    setModalVisible(false);\n  }, []);\n  useEffect(() => {\n    if (reportPostDone) {\n      setModalVisible(false);\n    }\n\n    if (reportPostError) {\n      setModalVisible(false);\n    }\n  }, [reportPostDone, reportPostError]);\n  const liked = (_post$Likers = post.Likers) === null || _post$Likers === void 0 ? void 0 : _post$Likers.find(v => v.id === id);\n  return ___EmotionJSX(CardWrapper, {\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Card, {\n    cover: post.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 42\n      }\n    }),\n    actions: [___EmotionJSX(Tooltip, {\n      title: \"\\uB9AC\\uD2B8\\uC717\\uD558\\uAE30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, ___EmotionJSX(RetweetOutlined, {\n      onClick: onRetweet,\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uC88B\\uC544\\uC694\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, liked ? ___EmotionJSX(HeartTwoTone, {\n      key: \"heart\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    }) : ___EmotionJSX(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uB313\\uAE00\\uB2EC\\uAE30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    }, ___EmotionJSX(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    })), ___EmotionJSX(Popover, {\n      key: \"ellipsis\",\n      content: ___EmotionJSX(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }, id && ((_post$User = post.User) === null || _post$User === void 0 ? void 0 : _post$User.id) === id ? ___EmotionJSX(React.Fragment, null, !post.RetweetId && ___EmotionJSX(Button, {\n        onClick: onClickUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 66\n        }\n      }, \"\\uC218\\uC815\"), ___EmotionJSX(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        loading: removePostLoading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 45\n        }\n      }, \"\\uC0AD\\uC81C\")) : ___EmotionJSX(Button, {\n        onClick: onReport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 37\n        }\n      }, \"\\uC2E0\\uACE0\\uD558\\uAE30\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, ___EmotionJSX(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }))],\n    extra: id && ___EmotionJSX(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 30\n      }\n    }),\n    title: post.RetweetId ? `${((_post$User2 = post.User) === null || _post$User2 === void 0 ? void 0 : _post$User2.nickname) || '탈퇴한 사용자'}님이 리트윗하셨습니다.` : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Modal, {\n    title: \"report\",\n    visible: modalVisible,\n    onOk: onsubmitReport,\n    confirmLoading: reportPostLoading,\n    onCancel: reportCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, ___EmotionJSX(InputReport, {\n    rows: 4,\n    value: reportText,\n    onChange: onChangeReportText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  })), ___EmotionJSX(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, \"\\uC2E0\\uACE0\\uD558\\uC2E4 \\uACBD\\uC6B0 \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uACC4\\uC18D \\uC9C4\\uD589\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\")), post.RetweetId && post.Retweet ? ___EmotionJSX(Card, {\n    cover: post.Retweet.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 33\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 25\n    }\n  }, ___EmotionJSX(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 29\n    }\n  }, moment(post.Retweet.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, {\n      prefetch: false,\n      href: `/user/${post.Retweet.UserId}`,\n      prefetch: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 37\n      }\n    }, ___EmotionJSX(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 58\n      }\n    }, ___EmotionJSX(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 61\n      }\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: ___EmotionJSX(PostCardContent, {\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      editMode: editMode,\n      postData: post.Retweet.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 37\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 29\n    }\n  })) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    style: {\n      float: 'right'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 29\n    }\n  }, moment(post.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, {\n      prefetch: false,\n      href: `/user/${(_post$User3 = post.User) === null || _post$User3 === void 0 ? void 0 : _post$User3.id}`,\n      prefetch: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 37\n      }\n    }, ___EmotionJSX(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 41\n      }\n    }, ___EmotionJSX(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 44\n      }\n    }, ((_post$User4 = post.User) === null || _post$User4 === void 0 ? void 0 : _post$User4.nickname[0]) || 'null'))),\n    title: ((_post$User5 = post.User) === null || _post$User5 === void 0 ? void 0 : _post$User5.nickname) || '탈퇴한 사용자',\n    description: ___EmotionJSX(PostCardContent, {\n      editMode: editMode,\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 37\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 29\n    }\n  }))), id && commentFormOpened && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(List, {\n    header: `댓글: ${post.Comments ? post.Comments.length : 0}개`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => ___EmotionJSX(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 29\n      }\n    }, ___EmotionJSX(Comment, {\n      author: item.User.nickname,\n      avatar: ___EmotionJSX(Link, {\n        href: `/user/${item.User.id}`,\n        prefetch: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 41\n        }\n      }, ___EmotionJSX(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 45\n        }\n      }, ___EmotionJSX(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 49\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/juyoungjung/ymillonga-sns/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Button","Avatar","Popover","List","Comment","Modal","Form","Tooltip","message","PropTypes","useSelector","useDispatch","InputReport","CardWrapper","moment","Link","default","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","CommentForm","PostImages","FollowButton","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","UPDATE_POST_REQUEST","REPORT_POST_REQUEST","useInput","locale","PostCard","post","dispatch","id","state","user","me","reportText","onChangeReportText","commentFormOpened","setCommentFormOpened","editMode","setEditMode","reportPostLoading","reportPostDone","reportPostError","removePostLoading","modalVisible","setModalVisible","onLike","info","type","data","onUnlike","alert","onRemovePost","onRetweet","onToggleComment","prev","onClickUpdate","onCancelUpdate","onChangePost","editText","PostId","content","onReport","onsubmitReport","postId","reason","reportCancel","liked","Likers","find","v","Images","User","RetweetId","nickname","Retweet","float","createdAt","startOf","fromNow","UserId","Comments","length","item","propTypes","shape","number","object","string","arrayOf","any","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment, Modal, Form, Tooltip, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { InputReport, CardWrapper } from './style';\n\nimport moment from 'moment';\nimport Link from 'next/link';\nimport {\n    default as RetweetOutlined,\n} from '@ant-design/icons/RetweetOutlined';\nimport {\n    default as HeartTwoTone,\n} from '@ant-design/icons/HeartTwoTone';\nimport {\n    default as HeartOutlined,\n} from '@ant-design/icons/HeartOutlined';\nimport {\n    default as MessageOutlined,\n} from '@ant-design/icons/MessageOutlined';\nimport {\n    default as EllipsisOutlined,\n} from '@ant-design/icons/EllipsisOutlined';\n\n\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './PostCardContent';\nimport {\n    REMOVE_POST_REQUEST,\n    LIKE_POST_REQUEST,\n    UNLIKE_POST_REQUEST,\n    RETWEET_REQUEST,\n    UPDATE_POST_REQUEST,\n    REPORT_POST_REQUEST,\n} from '../reducers/post';\nimport useInput from '../hooks/useInput';\n\nmoment.locale('ko');\n\nconst PostCard = ({ post }) => {\n    const dispatch = useDispatch();\n    const id = useSelector((state) => state.user.me?.id);\n    const [reportText, onChangeReportText] = useInput('');\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\n    const [editMode, setEditMode] = useState(false);\n    const reportPostLoading = useSelector((state) => state.post.reportPostLoading);\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\n    const reportPostError = useSelector((state) => state.post.reportPostError);\n    const removePostLoading = useSelector(state => state.post.removePostLoading);\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const onLike = useCallback(() => {\n        if (!id) {\n            return message.info('로그인 후 좋아요를 할 수 있습니다.');\n        }\n        return dispatch({\n            type: LIKE_POST_REQUEST,\n            data: post.id,\n        });\n    }, [id]);\n    const onUnlike = useCallback(() => {\n        if (!id) {\n            return alert('로그인이 필요합니다');\n        }\n        return dispatch({\n            type: UNLIKE_POST_REQUEST,\n            data: post.id,\n        });\n    }, [id]);\n    const onRemovePost = useCallback(() => {\n        if (!id) {\n            return alert('로그인이 필요합니다');\n        }\n        return dispatch({\n            type: REMOVE_POST_REQUEST,\n            data: post.id,\n        })\n    }, [id]);\n    const onRetweet = useCallback(() => {\n        if (!id) {\n            return message.info('로그인 후 리트윗할 수 있습니다.');\n        }\n        dispatch({\n            type: RETWEET_REQUEST,\n            data: post.id,\n        })\n    }, [id]);\n\n    const onToggleComment = useCallback(() => {\n        if (id) {\n            setCommentFormOpened((prev) => !prev);\n        } else {\n            return message.info('로그인 후 댓글을 입력할 수 있습니다.');\n        }\n    }, [id]);\n\n    const onClickUpdate = useCallback(() => {\n        setEditMode(true);\n    }, []);\n    const onCancelUpdate = useCallback(() => {\n        setEditMode(false);;\n    }, []);\n    const onChangePost = useCallback((editText) => () => {\n        if (!id) {\n            return alert('로그인이 필요합니다.');\n        }\n        dispatch({\n            type: UPDATE_POST_REQUEST,\n            data: {\n                PostId: post.id,\n                content: editText,\n            },\n        });\n    }, [post]);\n    const onReport = useCallback(() => {\n        if (!id) {\n            return message.info('로그인 후 신고할 수 있습니다.');\n        }\n        setModalVisible(true);\n    }, []);\n    const onsubmitReport = useCallback(() => {\n        if (!id) {\n            return alert('로그인이 필요합니다.');\n        }\n        dispatch({\n            type: REPORT_POST_REQUEST,\n            data: {\n                postId: post.id,\n                reason: reportText,\n            }\n        });\n    }, [reportText]);\n    const reportCancel = useCallback(() => {\n        setModalVisible(false);\n    }, []);\n    useEffect(() => {\n        if (reportPostDone) {\n            setModalVisible(false);\n        }\n        if (reportPostError) {\n            setModalVisible(false);\n        }\n    }, [reportPostDone, reportPostError]);\n    const liked = post.Likers?.find((v) => v.id === id);\n    return (\n        <CardWrapper key={post.id}>\n            <Card\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[\n                    <Tooltip title=\"리트윗하기\">\n                        <RetweetOutlined\n                            onClick={onRetweet}\n                            key=\"retweet\" />\n                    </Tooltip>,\n                    <Tooltip title=\"좋아요\">\n                        {liked ?\n                            <HeartTwoTone\n                                key=\"heart\"\n                                twoToneColor=\"#eb2f96\"\n                                onClick={onUnlike} /> :\n                            <HeartOutlined\n                                key=\"heart\"\n                                onClick={onLike} />}\n                    </Tooltip>,\n                    <Tooltip title=\"댓글달기\">\n                        <MessageOutlined\n                            key=\"message\"\n                            onClick={onToggleComment} />\n                    </Tooltip>,\n                    <Popover\n                        key=\"ellipsis\"\n                        content={(\n                            <Button.Group>\n                                {id && post.User?.id === id ?\n                                    (\n                                        <>\n                                            {!post.RetweetId && (<Button\n                                                onClick={onClickUpdate}>수정</Button>)}\n                                            <Button\n                                                type=\"danger\"\n                                                onClick={onRemovePost}\n                                                loading={removePostLoading} >삭제</Button>\n                                        </>\n                                    ) :\n                                    <Button onClick={onReport}>신고하기</Button>\n                                }\n                            </Button.Group>\n                        )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n                extra={id && <FollowButton post={post} />}\n                title={post.RetweetId ? `${post.User?.nickname || '탈퇴한 사용자'}님이 리트윗하셨습니다.` : null}\n            >\n                <Modal\n                    title=\"report\"\n                    visible={modalVisible}\n                    onOk={onsubmitReport}\n                    confirmLoading={reportPostLoading}\n                    onCancel={reportCancel}\n                >\n                    <Form >\n                        <InputReport\n                            rows={4}\n                            value={reportText}\n                            onChange={onChangeReportText}\n\n                        />\n                    </Form>\n                    <p>신고하실 경우 되돌릴 수 없습니다. 계속 진행하시겠습니까?</p>\n                </Modal>\n                {post.RetweetId && post.Retweet ?\n                    (\n                        <Card\n                            cover={post.Retweet.Images[0] &&\n                                <PostImages images={post.Retweet.Images} />}>\n                            <div style={{ float: 'right' }}>\n                                {moment(post.Retweet.createdAt).startOf('hour').fromNow()}\n                            </div>\n                            <Card.Meta\n                                avatar={(\n                                    <Link\n                                        prefetch={false}\n                                        href={`/user/${post.Retweet.UserId}`}\n                                        prefetch={false}><a><Avatar>\n                                            {post.Retweet.User.nickname[0]}\n                                        </Avatar></a></Link>\n                                )}\n                                title={post.Retweet.User.nickname}\n                                description={\n                                    <PostCardContent\n                                        onCancelUpdate={onCancelUpdate}\n                                        onChangePost={onChangePost}\n                                        editMode={editMode}\n                                        postData={post.Retweet.content}\n                                    />\n                                }\n                            />\n                        </Card>\n                    ) : (\n                        <>\n                            <div style={{ float: 'right' }}>\n                                {moment(post.createdAt).startOf('hour').fromNow()}\n                            </div>\n                            <Card.Meta\n                                avatar={(\n                                    <Link\n                                        prefetch={false}\n                                        href={`/user/${post.User?.id}`}\n                                        prefetch={false}>\n                                        <a><Avatar>\n                                            {post.User?.nickname[0] || 'null'}\n                                        </Avatar></a>\n                                    </Link>\n                                )}\n                                title={post.User?.nickname || '탈퇴한 사용자'}\n                                description={\n                                    <PostCardContent\n                                        editMode={editMode}\n                                        onCancelUpdate={\n                                            onCancelUpdate\n                                        }\n                                        onChangePost={onChangePost}\n                                        postData={post.content}\n                                    />\n                                }\n                            />\n                        </>\n                    )}\n            </Card>\n            {id && commentFormOpened && (\n                <>\n                    <CommentForm post={post} />\n                    <List\n                        header={`댓글: ${post.Comments ? post.Comments.length : 0}개`}\n                        itemLayout='horizontal'\n                        dataSource={post.Comments || []}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={(\n                                        <Link\n                                            href={`/user/${item.User.id}`}\n                                            prefetch={false}>\n                                            <a>\n                                                <Avatar>{item.User.nickname[0]}</Avatar>\n                                            </a>\n                                        </Link>\n                                    )}\n                                    content={item.content} />\n                            </li>\n                        )} />\n                </>\n            )}\n        </CardWrapper >\n    );\n};\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.string,\n        Comments: PropTypes.arrayOf(PropTypes.any),\n        Images: PropTypes.arrayOf(PropTypes.any),\n        Likers: PropTypes.arrayOf(PropTypes.object),\n        RetweetId: PropTypes.number,\n        Retweet: PropTypes.objectOf(PropTypes.any),\n    }).isRequired,\n};\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}