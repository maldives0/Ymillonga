{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, REPORT_POST_FAILURE, REPORT_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REPORT_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_RELATED_POSTS_FAILURE, LOAD_RELATED_POSTS_REQUEST, LOAD_RELATED_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); // 주소에 한글이 들어가면 unescaped character error가 난다\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadRelatedPostsAPI(lastId) {\n  return axios.get(`/posts/related?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction* loadRelatedPosts(action) {\n  try {\n    const result = yield call(loadRelatedPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_RELATED_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_RELATED_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error('load posts error:', err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.PostId}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    yield put({\n      type: UPDATE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction reportPostAPI(data) {\n  return axios.post(`/post/${data.postId}/report`, data); // POST /post/1/comment\n}\n\nfunction* reportPost(action) {\n  try {\n    const result = yield call(reportPostAPI, action.data);\n    yield put({\n      type: REPORT_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REPORT_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadRelatedPosts() {\n  yield throttle(5000, LOAD_RELATED_POSTS_REQUEST, loadRelatedPosts);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchReportPost() {\n  yield takeLatest(REPORT_POST_REQUEST, reportPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchUpdatePost), fork(watchAddPost), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadRelatedPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment), fork(watchReportPost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["/Users/juyoungjung/ymillonga-sns/front/sagas/post.ts"],"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","REPORT_POST_FAILURE","REPORT_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REPORT_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_RELATED_POSTS_FAILURE","LOAD_RELATED_POSTS_REQUEST","LOAD_RELATED_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","loadPostAPI","data","get","loadPost","action","result","type","err","console","error","response","loadUserPostsAPI","lastId","loadUserPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","loadRelatedPostsAPI","loadRelatedPosts","loadPostsAPI","loadPosts","addPostAPI","post","addPost","addCommentAPI","postId","addComment","updatePostAPI","patch","PostId","updatePost","retweetAPI","retweet","uploadImagesAPI","uploadImages","likePostAPI","likePost","unlikePostAPI","delete","unlikePost","reportPostAPI","reportPost","removePostAPI","removePost","watchUpdatePost","watchUploadImages","watchLikePost","watchUnlikePost","watchRetweet","watchLoadPost","watchLoadPosts","watchLoadRelatedPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","watchReportPost","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  REPORT_POST_FAILURE,\n  REPORT_POST_REQUEST,\n  LOAD_POST_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  REPORT_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_RELATED_POSTS_FAILURE,\n  LOAD_RELATED_POSTS_REQUEST,\n  LOAD_RELATED_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  REMOVE_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  RETWEET_FAILURE,\n  RETWEET_REQUEST,\n  RETWEET_SUCCESS,\n  UNLIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n  UPDATE_POST_REQUEST,\n  UPDATE_POST_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n} from '../reducers/post';\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); // 주소에 한글이 들어가면 unescaped character error가 난다\n}\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadRelatedPostsAPI(lastId) {\n  return axios.get(`/posts/related?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction* loadRelatedPosts(action) {\n  try {\n    const result = yield call(loadRelatedPostsAPI, action.lastId);\n\n    yield put({\n      type: LOAD_RELATED_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_RELATED_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error('load posts error:',err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/${data.PostId}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    yield put({\n      type: UPDATE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPDATE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\nfunction reportPostAPI(data) {\n  return axios.post(`/post/${data.postId}/report`, data); // POST /post/1/comment\n}\n\nfunction* reportPost(action) {\n  try {\n    const result = yield call(reportPostAPI, action.data);\n    yield put({\n      type: REPORT_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REPORT_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchUpdatePost() {\n  yield takeLatest(UPDATE_POST_REQUEST, updatePost);\n}\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchLoadRelatedPosts() {\n  yield throttle(5000, LOAD_RELATED_POSTS_REQUEST, loadRelatedPosts);\n}\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchReportPost() {\n  yield takeLatest(REPORT_POST_REQUEST, reportPost);\n}\nexport default function* postSaga() {\n  yield all([\n    fork(watchUpdatePost),\n    fork(watchAddPost),\n    fork(watchUploadImages),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchRetweet),\n    fork(watchLoadUserPosts),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadRelatedPosts),\n    fork(watchLoadPosts),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchReportPost),\n    fork(watchLoadPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}