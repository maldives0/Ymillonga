{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useCallback, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { Form, Checkbox, Button, Input } from 'antd';\nimport AppLayout from '../components/AppLayout';\nimport useInput from '../hooks/useInput';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SIGN_UP_REQUEST, LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport Router from 'next/router';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport wrapper from '../store/configureStore';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Signup = () => {\n  const dispatch = useDispatch();\n  const me = useSelector(state => state.user.me);\n  const signUpLoading = useSelector(state => state.user.signUpLoading);\n  const signUpDone = useSelector(state => state.user.signUpDone);\n  const signUpError = useSelector(state => state.user.signUpError);\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, onChangePassword] = useInput('');\n  const {\n    0: passwordCheck,\n    1: setPasswordCheck\n  } = useState('');\n  const {\n    0: passwordError,\n    1: setPasswordError\n  } = useState(false);\n  const {\n    0: term,\n    1: setTerm\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  useEffect(() => {\n    if (me && me.id) {\n      alert('로그인 중입니다. 메인페이지로 이동합니다.');\n      Router.replace('/'); //push는 뒤로가기 하면 히스토리가 남아있지만 replace는 지워짐\n    }\n  }, [me && me.id]);\n  useEffect(() => {\n    if (signUpDone) {\n      Router.replace('/login');\n    }\n  }, [signUpDone]);\n  useEffect(() => {\n    if (signUpError) {\n      alert(signUpError);\n    }\n  }, [signUpError]);\n  const onChangePasswordCheck = useCallback(e => {\n    setPasswordCheck(e.target.value);\n    setPasswordError(e.target.value !== password);\n  }, [password]);\n  const onChangeTerm = useCallback(e => {\n    setTerm(e.target.checked);\n    setTermError(false);\n  }, [password]);\n  const onSubmit = useCallback(() => {\n    if (password !== passwordCheck) setPasswordError(true);\n    if (!term) setTermError(true);\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        email,\n        password,\n        nickname\n      }\n    });\n  }, [email, password, passwordCheck, term]);\n  return ___EmotionJSX(AppLayout, null, ___EmotionJSX(Head, null, ___EmotionJSX(\"title\", null, \"\\uD68C\\uC6D0\\uAC00\\uC785 | Ymillonga\")), ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Form, {\n    labelCol: {\n      span: 6\n    },\n    wrapperCol: {\n      span: 14\n    },\n    layout: \"horizontal\",\n    onFinish: onSubmit\n  }, ___EmotionJSX(Form.Item, {\n    label: \"E-mail\"\n  }, ___EmotionJSX(Input, {\n    name: \"user-name\",\n    type: \"email\",\n    value: email,\n    required: true,\n    onChange: onChangeEmail\n  })), ___EmotionJSX(Form.Item, {\n    label: \"Nickname\"\n  }, ___EmotionJSX(Input, {\n    name: \"user-nickname\",\n    value: nickname,\n    required: true,\n    onChange: onChangeNickname\n  })), ___EmotionJSX(Form.Item, {\n    label: \"password\"\n  }, ___EmotionJSX(Input, {\n    name: \"user-password\",\n    type: \"Password\",\n    value: password,\n    required: true,\n    onChange: onChangePassword\n  })), ___EmotionJSX(Form.Item, {\n    label: \"Password check\"\n  }, ___EmotionJSX(Input, {\n    name: \"user-password-check\",\n    type: \"password\",\n    value: passwordCheck,\n    required: true,\n    onChange: onChangePasswordCheck\n  }), passwordError && ___EmotionJSX(\"div\", {\n    style: {\n      color: 'red'\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\")), ___EmotionJSX(Form.Item, null, ___EmotionJSX(Checkbox, {\n    name: \"user-term\",\n    checked: term,\n    onChange: onChangeTerm\n  }), \" \\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD569\\uB2C8\\uB2E4.\", termError && ___EmotionJSX(\"div\", {\n    style: {\n      color: 'red'\n    }\n  }, \"\\uC57D\\uAD00\\uC5D0 \\uB3D9\\uC758\\uD558\\uC154\\uC57C \\uD569\\uB2C8\\uB2E4.\")), ___EmotionJSX(Form.Item, null, ___EmotionJSX(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: signUpLoading\n  }, \"\\uAC00\\uC785\\uD558\\uAE30\")))));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('getServerSideProps start');\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  console.log('getServerSideProps end');\n  await context.store.sagaTask.toPromise();\n});\nexport default Signup;","map":null,"metadata":{},"sourceType":"module"}