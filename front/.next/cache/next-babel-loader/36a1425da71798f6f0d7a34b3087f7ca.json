{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePosts = _useSelector.hasMorePosts,\n      loadPostsLoading = _useSelector.loadPostsLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    },\n    __self: _this\n  }, me && ___EmotionJSX(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 20\n    },\n    __self: _this\n  }), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      },\n      __self: _this\n    });\n  }));\n};\n\n_s(Home, \"P6AUC8cYF9u+NF6AoV+rPXfLKT8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\n//getServerSideProps는 방문할 때마다 불러온다\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","Home","dispatch","state","post","mainPosts","hasMorePosts","loadPostsLoading","user","me","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;;AAKA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACf,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AADe,qBAEuCD,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFlD;AAAA,MAEPC,SAFO,gBAEPA,SAFO;AAAA,MAEIC,YAFJ,gBAEIA,YAFJ;AAAA,MAEkBC,gBAFlB,gBAEkBA,gBAFlB;;AAAA,sBAGAZ,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACK,IAAV;AAAA,GAAN,CAHX;AAAA,MAGPC,EAHO,iBAGPA,EAHO;;AAMff,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASgB,QAAT,GAAoB;AAEhB,UAAIC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACtG,YAAIV,YAAY,IAAI,CAACC,gBAArB,EAAuC;AAAA;;AACnC,cAAMU,MAAM,iBAAGZ,SAAS,CAACA,SAAS,CAACa,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACAjB,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAEpB,kBADD;AAELiB,YAAAA,MAAM,EAANA;AAFK,WAAD,CAAR;AAIH;AACJ;AACJ;;AACDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCX,QAAlC;AACA,WAAO,YAAM;AACT;AACAC,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCZ,QAArC;AACH,KAHD;AAIH,GAlBQ,EAkBN,CAACL,SAAD,EAAYC,YAAZ,EAA0BC,gBAA1B,CAlBM,CAAT;AAoBA,SACI,cAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKE,EAAE,IAAI,cAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFX,EAGKJ,SAHL,aAGKA,SAHL,uBAGKA,SAAS,CAAEkB,GAAX,CAAe,UAACnB,IAAD,EAAU;AACtB,WACI,cAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACe,EAApB;AAAwB,MAAA,IAAI,EAAEf,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GAJA,CAHL,CADJ;AAYH,CAtCD;;GAAMH,I;UACeL,W,EACqCD,W,EACvCA,W;;;KAHbM,I;AA0DN;AACA;AACA;;AACA,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(state => state.post);\r\n    const { me } = useSelector(state => state.user);\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n\r\n            {me && <PostForm />}\r\n            {mainPosts?.map((post) => {\r\n                return (\r\n                    <PostCard key={post.id} post={post} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {//redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\r\n    console.log('getServerSideProps start');\r\n    // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\r\n    //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\r\n    const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\r\n    axios.defaults.headers.Cookie = '';//다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });//리덕스에 데이터가 채워진 상태로 component가 렌더링된다\r\n    context.store.dispatch(END);//미리 준비된 액션인 END를 가져와서 \r\n    await context.store.sagaTask.toPromise();//store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\r\n});\r\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\r\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\r\n//getServerSideProps는 방문할 때마다 불러온다\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}