{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\PostCardContent.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from 'antd';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar TextArea = Input.TextArea;\n\nvar PostCardContent = function PostCardContent(_ref) {\n  _s();\n\n  var postData = _ref.postData,\n      editMode = _ref.editMode,\n      onCalcelUpdate = _ref.onCalcelUpdate,\n      onChangePost = _ref.onChangePost;\n\n  var _useState = useState(postData),\n      editText = _useState[0],\n      setEditText = _useState[1];\n\n  var onChangeText = useCallback(function (e) {\n    setEditText(e.target.value);\n  }, []);\n  return ___EmotionJSX(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    },\n    __self: _this\n  }, editMode ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(TextArea, {\n    value: editText,\n    onChange: onChangeText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(Button.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    },\n    __self: _this\n  }, ___EmotionJSX(Button, {\n    onClick: onChangePost(editText),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 25\n    },\n    __self: _this\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"), ___EmotionJSX(Button, {\n    type: \"danger\",\n    onClick: onCancelUpdate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 25\n    },\n    __self: _this\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))) : postData === null || postData === void 0 ? void 0 : postData.split(/(#[^\\s#]+)/g).map(function (v) {\n    if (v.match(/(#[^\\s#]+)/)) {\n      return ___EmotionJSX(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        prefetch: false,\n        key: v,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        },\n        __self: _this\n      }, ___EmotionJSX(\"a\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 33\n        },\n        __self: _this\n      }, v));\n    }\n\n    return v;\n  }));\n};\n\n_s(PostCardContent, \"LjE8/ouVmBU9VJhqr+oHqbRb62Q=\");\n\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onCancelUpdate: PropTypes.func.isRequired,\n  onChangePost: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/PostCardContent.js"],"names":["React","useState","useCallback","useEffect","Link","PropTypes","Input","Button","TextArea","PostCardContent","postData","editMode","onCalcelUpdate","onChangePost","editText","setEditText","onChangeText","e","target","value","onCancelUpdate","split","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,MAA9B;;IACQC,Q,GAAaF,K,CAAbE,Q;;AAER,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAA0D;AAAA;;AAAA,MAAvDC,QAAuD,QAAvDA,QAAuD;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AAAA,MAAnCC,cAAmC,QAAnCA,cAAmC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,kBAE9CZ,QAAQ,CAACS,QAAD,CAFsC;AAAA,MAEvEI,QAFuE;AAAA,MAE7DC,WAF6D;;AAG9E,MAAMC,YAAY,GAAGd,WAAW,CAAC,UAACe,CAAD,EAAO;AACpCF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,QAAQ,GACL,oCACI,cAAC,QAAD;AAAU,IAAA,KAAK,EAAEG,QAAjB;AAA2B,IAAA,QAAQ,EAAEE,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,cAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,cAAC,MAAD;AAAQ,IAAA,OAAO,EAAEH,YAAY,CAACC,QAAD,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEI,cAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AACI,IAAA,OAAO,EAAEM,cADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFJ,CAFJ,CADK,GAYLV,QAZK,aAYLA,QAZK,uBAYLA,QAAQ,CAAEW,KAAV,CAAgB,aAAhB,EAA+BC,GAA/B,CAAmC,UAACC,CAAD,EAAO;AACtC,QAAIA,CAAC,CAACC,KAAF,CAAQ,YAAR,CAAJ,EAA2B;AACvB,aACI,cAAC,IAAD;AACI,QAAA,IAAI,EAAE;AACFC,UAAAA,QAAQ,EAAE,UADR;AAEFC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAEJ,CAAC,CAACK,KAAF,CAAQ,CAAR;AAAP;AAFL,SADV;AAKI,QAAA,EAAE,qBAAcL,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAd,CALN;AAOI,QAAA,QAAQ,EAAE,KAPd;AAQI,QAAA,GAAG,EAAEL,CART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,CAAJ,CATJ,CADJ;AAaH;;AACD,WAAOA,CAAP;AACH,GAjBD,CAbR,CADJ;AAmCH,CA1CD;;GAAMd,e;;KAAAA,e;AA2CNA,eAAe,CAACoB,SAAhB,GAA4B;AACxBnB,EAAAA,QAAQ,EAAEL,SAAS,CAACyB,MAAV,CAAiBC,UADH;AAExBpB,EAAAA,QAAQ,EAAEN,SAAS,CAAC2B,IAFI;AAGxBZ,EAAAA,cAAc,EAAEf,SAAS,CAAC4B,IAAV,CAAeF,UAHP;AAIxBlB,EAAAA,YAAY,EAAER,SAAS,CAAC4B,IAAV,CAAeF;AAJL,CAA5B;AAMAtB,eAAe,CAACyB,YAAhB,GAA+B;AAC3BvB,EAAAA,QAAQ,EAAE;AADiB,CAA/B;AAGA,eAAeF,eAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, Button } from 'antd';\r\nconst { TextArea } = Input;\r\n\r\nconst PostCardContent = ({ postData, editMode, onCalcelUpdate, onChangePost }) => {\r\n\r\n    const [editText, setEditText] = useState(postData);\r\n    const onChangeText = useCallback((e) => {\r\n        setEditText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {editMode ? (\r\n                <>\r\n                    <TextArea value={editText} onChange={onChangeText} />\r\n                    <Button.Group>\r\n                        <Button onClick={onChangePost(editText)}>수정하기</Button>\r\n                        <Button type=\"danger\"\r\n                            onClick={onCancelUpdate}>\r\n                            취소하기\r\n                    </Button>\r\n                    </Button.Group>\r\n                </>\r\n            ) :\r\n                postData?.split(/(#[^\\s#]+)/g).map((v) => {\r\n                    if (v.match(/(#[^\\s#]+)/)) {\r\n                        return (\r\n                            <Link\r\n                                href={{\r\n                                    pathname: '/hashtag',\r\n                                    query: { tag: v.slice(1) }\r\n                                }}\r\n                                as={`/hashtag/${v.slice(1)}`\r\n                                }\r\n                                prefetch={false}\r\n                                key={v}>\r\n                                <a>{v}</a>\r\n                            </Link>\r\n                        );\r\n                    }\r\n                    return v;\r\n                })}\r\n\r\n        </div>\r\n    );\r\n};\r\nPostCardContent.propTypes = {\r\n    postData: PropTypes.string.isRequired,\r\n    editMode: PropTypes.bool,\r\n    onCancelUpdate: PropTypes.func.isRequired,\r\n    onChangePost: PropTypes.func.isRequired,\r\n};\r\nPostCardContent.defaultProps = {\r\n    editMode: false,\r\n};\r\nexport default PostCardContent; "]},"metadata":{},"sourceType":"module"}