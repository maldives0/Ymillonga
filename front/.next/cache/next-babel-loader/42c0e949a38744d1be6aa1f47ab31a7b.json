{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport UserProfile from '../components/UserProfile';\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { PageHeader, message, Button, Tooltip } from 'antd';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { default as UpOutlined } from '@ant-design/icons/UpOutlined';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const mainPosts = useSelector(state => state.post.mainPosts);\n  const hasMorePosts = useSelector(state => state.post.hasMorePosts);\n  const loadPostsLoading = useSelector(state => state.post.loadPostsLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const retweetError = useSelector(state => state.post.retweetError);\n  const me = useSelector(state => state.user.me);\n  const ignoreError = useSelector(state => state.user.ignoreError);\n  const unIgnoreError = useSelector(state => state.user.unIgnoreError);\n  const ignoreDone = useSelector(state => state.user.ignoreDone);\n  const unIgnoreDone = useSelector(state => state.user.unIgnoreDone);\n  const onClickRelatedPosts = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LOAD_RELATED_POSTS_REQUEST\n    });\n  }, [id]);\n  useEffect(() => {\n    if (ignoreDone) {\n      message.success('차단되었습니다.', 5);\n    }\n\n    if (ignoreError) {\n      message.error(ignoreError, 5);\n    }\n  }, [ignoreDone, ignoreError]);\n  useEffect(() => {\n    if (unIgnoreDone) {\n      message.success('차단이 풀어졌습니다.', 5);\n    }\n\n    if (unIgnoreError) {\n      message.error('차단 풀기하는 도중에 에러가 발생했습니다.', 5);\n    }\n  }, [unIgnoreDone, unIgnoreError]);\n  useEffect(() => {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(() => {\n    if (retweetError) {\n      message.error('리트윗하는 도중에 에러가 발생했습니다.', 5);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, null, ___EmotionJSX(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '5%'\n    }\n  }, ___EmotionJSX(\"img\", {\n    width: 400,\n    height: 70,\n    src: \"/images/dancers.png\"\n  })), me && me.id ? ___EmotionJSX(UserProfile, null) : ___EmotionJSX(PageHeader, {\n    className: \"site-page-header\",\n    onBack: () => Router.push('/login'),\n    title: \"\\uB2F9\\uC2E0\\uC758 \\uBC00\\uB871\\uAC00 \\uACBD\\uD5D8\\uC744 \\uACF5\\uC720\\uD574\\uC8FC\\uC138\\uC694!\",\n    subTitle: \"\\uB85C\\uADF8\\uC778 \\uD6C4 \\uAC8C\\uC2DC\\uAE00\\uC744 \\uC791\\uC131\\uD574\\uBCF4\\uC138\\uC694.\",\n    backIcon: ___EmotionJSX(Tooltip, {\n      title: \"\\uB85C\\uADF8\\uC778\\uD558\\uB7EC \\uAC00\\uAE30\"\n    }, ___EmotionJSX(UpOutlined, null))\n  }), me && me.id && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(PostForm, null), ___EmotionJSX(Button, {\n    style: {\n      marginBottom: 5\n    },\n    type: \"primary\",\n    loading: loadPostsLoading,\n    onClick: onClickRelatedPosts\n  }, ___EmotionJSX(Link, {\n    href: \"/posts/related\"\n  }, ___EmotionJSX(\"a\", null, \"\\uD314\\uB85C\\uC789 \\uAC8C\\uC2DC\\uAE00\\uB9CC \\uBCF4\\uAE30\")))), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(post => {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}