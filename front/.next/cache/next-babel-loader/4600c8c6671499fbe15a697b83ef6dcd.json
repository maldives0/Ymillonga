{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nmoment.locale('ko');\nconst CardWrapper = styled.div`\nmargin-bottom: 20px;`;\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const {\n    removePostLoading,\n    updatePostLoading\n  } = useSelector(state => state.post);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) alert('로그인이 필요합니다');\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, [id]);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n    ;\n  }, []);\n  const onChangePost = useCallback(editText => {\n    setCommentFormOpened(prev => !prev);\n  }, [post]);\n  const liked = post === null || post === void 0 ? void 0 : post.Likers.find(v => v.id === id);\n  return /*#__PURE__*/_jsxDEV(CardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: (post === null || post === void 0 ? void 0 : post.Images[0]) && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post === null || post === void 0 ? void 0 : post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 43\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && (post === null || post === void 0 ? void 0 : post.User.id) === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClickUpdate,\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 46\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              onClick: onRemovePost,\n              loading: removePostLoading,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)\n      }, \"ellipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)],\n      extra: id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 30\n      }, this),\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxDEV(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n          images: post.Retweet.Images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 33\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).startOf('hour').fromNow()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/`,\n            prefetch: false,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 37\n          }, this),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            onCancelUpdate: onCancelUpdate,\n            onChangePost: onChangePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).startOf('hour').fromNow()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${post.User.id}`,\n            prefetch: false,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 37\n          }, this),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            onCancelUpdate: onCancelUpdate,\n            onChangePost: onChangePost,\n            postData: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `댓글: ${post.Comments ? post.Comments.length : 0}개`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments || [],\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: `/user/${item.User.id}`,\n              prefetch: false,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 41\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Button","Avatar","Popover","List","Comment","PropTypes","useSelector","useDispatch","styled","moment","Link","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","CommentForm","PostImages","FollowButton","PostCardContent","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","locale","CardWrapper","div","PostCard","post","dispatch","id","state","user","me","commentFormOpened","setCommentFormOpened","editMode","setEditMode","removePostLoading","updatePostLoading","onLike","alert","type","data","onUnlike","onRemovePost","onRetweet","onToggleComment","prev","onClickUpdate","onCancelUpdate","onChangePost","editText","liked","Likers","find","v","Images","User","RetweetId","nickname","Retweet","float","createdAt","startOf","fromNow","content","Comments","length","item","propTypes","shape","number","object","string","arrayOf","any","objectOf","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from '@emotion/styled';\r\nimport moment from 'moment';\r\nimport Link from 'next/link';\r\nimport {\r\n    RetweetOutlined,\r\n    HeartTwoTone,\r\n    HeartOutlined,\r\n    MessageOutlined,\r\n    EllipsisOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport CommentForm from './CommentForm';\r\nimport PostImages from './PostImages';\r\nimport FollowButton from './FollowButton';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\n\r\n\r\nmoment.locale('ko');\r\nconst CardWrapper = styled.div`\r\nmargin-bottom: 20px;`\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const id = useSelector((state) => state.user.me?.id);\r\n\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const { removePostLoading, updatePostLoading } = useSelector(state => state.post);\r\n\r\n    const onLike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n    const onUnlike = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n    const onRemovePost = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [id]);\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) alert('로그인이 필요합니다');\r\n        dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id,\r\n        })\r\n    }, [id]);\r\n\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, [id]);\r\n\r\n    const onClickUpdate = useCallback(() => {\r\n        setEditMode(true);\r\n    }, []);\r\n    const onCancelUpdate = useCallback(() => {\r\n        setEditMode(false);;\r\n    }, []);\r\n    const onChangePost = useCallback((editText) => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, [post]);\r\n    const liked = post?.Likers.find((v) => v.id === id);\r\n    return (\r\n        <CardWrapper key={post.id}>\r\n            <Card\r\n                cover={post?.Images[0] && <PostImages images={post?.Images} />}\r\n                actions={[\r\n                    <RetweetOutlined\r\n                        onClick={onRetweet}\r\n                        key=\"retweet\" />,\r\n                    liked ?\r\n                        <HeartTwoTone\r\n                            key=\"heart\"\r\n                            twoToneColor=\"#eb2f96\"\r\n                            onClick={onUnlike} /> :\r\n                        <HeartOutlined\r\n                            key=\"heart\"\r\n                            onClick={onLike} />,\r\n                    <MessageOutlined\r\n                        key=\"message\"\r\n                        onClick={onToggleComment} />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post?.User.id === id ?\r\n                                    (\r\n                                        <>\r\n                                            {<Button\r\n                                                onClick={onClickUpdate}>수정</Button>}\r\n                                            <Button\r\n                                                type=\"danger\"\r\n                                                onClick={onRemovePost}\r\n                                                loading={removePostLoading} >삭제</Button>\r\n                                        </>\r\n                                    ) :\r\n                                    <Button>신고하기</Button>}\r\n                            </Button.Group>\r\n                        )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n                extra={id && <FollowButton post={post} />}\r\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n            >\r\n                {post.RetweetId && post.Retweet ?\r\n                    (\r\n                        <Card\r\n                            cover={post.Retweet.Images[0] &&\r\n                                <PostImages images={post.Retweet.Images} />}>\r\n                            <div style={{ float: 'right' }}>\r\n                                {moment(post.createdAt).startOf('hour').fromNow()}\r\n                            </div>\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link href={`/`}\r\n                                        prefetch={false}><a><Avatar>\r\n                                            {post.Retweet.User.nickname[0]}\r\n                                        </Avatar></a></Link>\r\n                                )}\r\n                                title={post.Retweet.User.nickname}\r\n                                description={\r\n                                    <PostCardContent\r\n                                        onCancelUpdate={\r\n                                            onCancelUpdate\r\n                                        }\r\n                                        onChangePost={onChangePost}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </Card>\r\n                    ) : (\r\n                        <>\r\n                            <div style={{ float: 'right' }}>\r\n                                {moment(post.createdAt).startOf('hour').fromNow()}\r\n                            </div>\r\n                            <Card.Meta\r\n                                avatar={(\r\n                                    <Link href={`/user/${post.User.id}`}\r\n                                        prefetch={false}><a><Avatar>\r\n                                            {post.User.nickname[0]}\r\n                                        </Avatar></a></Link>\r\n                                )}\r\n                                title={post.User.nickname}\r\n                                description={\r\n                                    <PostCardContent\r\n                                        onCancelUpdate={\r\n                                            onCancelUpdate\r\n                                        }\r\n                                        onChangePost={onChangePost}\r\n                                        postData={post.content}\r\n                                    />\r\n                                }\r\n                            />\r\n                        </>\r\n                    )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`댓글: ${post.Comments ? post.Comments.length : 0}개`}\r\n                        itemLayout='horizontal'\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={(\r\n                                        <Link\r\n                                            href={`/user/${item.User.id}`}\r\n                                            prefetch={false}>\r\n                                            <a>\r\n                                                <Avatar>{item.User.nickname[0]}</Avatar>\r\n                                            </a>\r\n                                        </Link>\r\n                                    )}\r\n                                    content={item.content} />\r\n                            </li>\r\n                        )} />\r\n                </>\r\n            )}\r\n        </CardWrapper >\r\n    );\r\n};\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.string,\r\n        Comments: PropTypes.arrayOf(PropTypes.any),\r\n        Images: PropTypes.arrayOf(PropTypes.any),\r\n        Likers: PropTypes.arrayOf(PropTypes.object),\r\n        RetweetId: PropTypes.number,\r\n        Retweet: PropTypes.objectOf(PropTypes.any),\r\n    }).isRequired,\r\n};\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}