{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(updatePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(reportPost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdatePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked26 = /*#__PURE__*/_regeneratorRuntime.mark(watchReportPost),\n    _marked27 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, REPORT_POST_FAILURE, REPORT_POST_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REPORT_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0)); // 주소에 한글이 들어가면 unescaped character error가 난다\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0)); //get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          console.log('comment:', result.data);\n          _context6.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context6.next = 14;\n          break;\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 9]]);\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data.PostId), data);\n}\n\nfunction updatePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function updatePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(updatePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UPDATE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UPDATE_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction reportPostAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/report\"), data); // POST /post/1/comment\n}\n\nfunction reportPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function reportPost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return call(reportPostAPI, action.data);\n\n        case 3:\n          result = _context12.sent;\n          _context12.next = 6;\n          return put({\n            type: REPORT_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context12.next = 13;\n          break;\n\n        case 8:\n          _context12.prev = 8;\n          _context12.t0 = _context12[\"catch\"](0);\n          console.error(_context12.t0);\n          _context12.next = 13;\n          return put({\n            type: REPORT_POST_FAILURE,\n            error: _context12.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context13.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUpdatePost() {\n  return _regeneratorRuntime.wrap(function watchUpdatePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPDATE_POST_REQUEST, updatePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}\n\nfunction watchReportPost() {\n  return _regeneratorRuntime.wrap(function watchReportPost$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          _context26.next = 2;\n          return takeLatest(REPORT_POST_REQUEST, reportPost);\n\n        case 2:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, _marked26);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          _context27.next = 2;\n          return all([fork(watchUpdatePost), fork(watchAddPost), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment), fork(watchReportPost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, _marked27);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["loadPost","loadUserPosts","loadHashtagPosts","loadPosts","addPost","addComment","updatePost","retweet","uploadImages","likePost","unlikePost","reportPost","removePost","watchUpdatePost","watchUploadImages","watchLikePost","watchUnlikePost","watchRetweet","watchLoadPost","watchLoadPosts","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","watchReportPost","postSaga","axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","REPORT_POST_FAILURE","REPORT_POST_REQUEST","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REPORT_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPDATE_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","action","result","type","console","error","response","loadUserPostsAPI","lastId","loadHashtagPostsAPI","encodeURIComponent","loadPostsAPI","addPostAPI","post","addCommentAPI","postId","log","updatePostAPI","patch","PostId","retweetAPI","uploadImagesAPI","likePostAPI","unlikePostAPI","reportPostAPI","removePostAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n    REPORT_POST_FAILURE, REPORT_POST_REQUEST, \r\n     LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  REPORT_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS, UPDATE_POST_FAILURE, UPDATE_POST_REQUEST, UPDATE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\r\n}\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log('comment:', result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction updatePostAPI(data) {\r\n    return axios.patch(`/post/${data.PostId}`, data);\r\n}\r\n\r\nfunction* updatePost(action) {\r\n    try {\r\n        const result = yield call(updatePostAPI, action.data);\r\n        yield put({\r\n            type: UPDATE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPDATE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction reportPostAPI(data) {\r\n    return axios.post(`/post/${data.postId}/report`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* reportPost(action) {\r\n    try {\r\n        const result = yield call(reportPostAPI, action.data);\r\n        yield put({\r\n            type: REPORT_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REPORT_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchUpdatePost() {\r\n    yield takeLatest(UPDATE_POST_REQUEST, updatePost);\r\n}\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchReportPost() {\r\n    yield takeLatest(REPORT_POST_REQUEST, reportPost);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchUpdatePost),\r\n        fork(watchAddPost),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n        fork(watchReportPost),\r\n         fork(watchLoadPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}