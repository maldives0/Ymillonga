{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nconst {\n  TextArea\n} = Input;\n\nconst PostCardContent = ({\n  postData,\n  editMode,\n  onCancelUpdate,\n  onChangePost\n}) => {\n  const updatePostLoading = useSelector(state => state.post.updatePostLoading);\n  const updatePostDone = useSelector(state => state.post.updatePostDone);\n  const {\n    0: editText,\n    1: setEditText\n  } = useState(postData);\n  useEffect(() => {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n  const onChangeText = useCallback(e => {\n    setEditText(e.target.value);\n  }, []); //prefetch를 false로 해야 미리 build 되지 않는다\n\n  return ___EmotionJSX(\"div\", null, editMode ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(TextArea, {\n    value: editText,\n    onChange: onChangeText\n  }), ___EmotionJSX(Button.Group, null, ___EmotionJSX(Button, {\n    loading: updatePostLoading,\n    onClick: onChangePost(editText)\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"), ___EmotionJSX(Button, {\n    type: \"danger\",\n    onClick: onCancelUpdate\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))) : postData === null || postData === void 0 ? void 0 : postData.split(/(#[^\\s#]+)/g).map(v => {\n    if (v.match(/(#[^\\s#]+)/)) {\n      return ___EmotionJSX(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: `/hashtag/${v.slice(1)}`,\n        prefetch: false,\n        key: v\n      }, ___EmotionJSX(\"a\", null, v));\n    }\n\n    return v;\n  }));\n};\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onCancelUpdate: PropTypes.func.isRequired,\n  onChangePost: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;","map":null,"metadata":{},"sourceType":"module"}