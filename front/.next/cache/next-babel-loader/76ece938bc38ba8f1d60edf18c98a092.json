{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    //게시글 아이디\n    User: {\n      //게시글 작성자 \n      id: 1,\n      nickname: 'momo'\n    },\n    content: '첫 번째 게시글 #first',\n    Images: [{\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }],\n    Likers: [],\n    Comments: [{\n      User: {\n        id: nanoid(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  }],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // mainPosts: [{\n//     id: 1,//게시글 아이디\n//     User: {//게시글 작성자 \n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     content: '첫 번째 게시글 #first',\n//     Images: [{\n//         src: faker.image.image(),\n//     },\n//     {\n//         src: faker.image.image(),\n//     }, {\n//         src: faker.image.image(),\n//     }\n//     ],\n//     Likers: [],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }],\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'momo'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  User: {\n    id: data.UserId,\n    nickname: data.User.nickname\n  },\n  content: data.content\n});\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: nanoid(),\n  User: {\n    id: nanoid(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: nanoid(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.imagePaths = []; //대기중 파일 목록 없애기\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      const post = draft.mainPosts.find((v, i) => v.id === action.data.PostId);\n      post.unshift(dummyComment(action.data));\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = true;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts.filter((v, i) => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = true;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","id","User","nickname","content","Images","src","image","Likers","Comments","name","findName","lorem","sentence","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","dummyComment","UserId","generateDummyPost","number","Array","fill","map","paragraph","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","reducer","state","action","draft","type","unshift","error","post","find","v","i","PostId","filter"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n\r\n    mainPosts: [\r\n        {\r\n            id: 1,//게시글 아이디\r\n            User: {//게시글 작성자 \r\n                id: 1,\r\n                nickname: 'momo',\r\n            },\r\n            content: '첫 번째 게시글 #first',\r\n            Images: [{\r\n                src: faker.image.image(),\r\n            },\r\n            {\r\n                src: faker.image.image(),\r\n            }, {\r\n                src: faker.image.image(),\r\n            }\r\n            ],\r\n            Likers: [],\r\n            Comments: [{\r\n                User: {\r\n                    id: nanoid(),\r\n                    nickname: faker.name.findName(),\r\n                },\r\n                content: faker.lorem.sentence(),\r\n            }],\r\n        }\r\n    ],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n};\r\n// mainPosts: [{\r\n//     id: 1,//게시글 아이디\r\n//     User: {//게시글 작성자 \r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     content: '첫 번째 게시글 #first',\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     },\r\n//     {\r\n//         src: faker.image.image(),\r\n//     }, {\r\n//         src: faker.image.image(),\r\n//     }\r\n//     ],\r\n//     Likers: [],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }],\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'momo',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\nconst dummyComment = (data) => ({\r\n    User: {\r\n        id: data.UserId,\r\n        nickname: data.User.nickname,\r\n    },\r\n    content: data.content,\r\n});\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: nanoid(),\r\n    User: {\r\n        id: nanoid(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: nanoid(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(dummyPost(action.data));\r\n            draft.imagePaths = [];//대기중 파일 목록 없애기\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            const post = draft.mainPosts.find((v, i) => v.id === action.data.PostId);\r\n            post.unshift(dummyComment(action.data));\r\n            break;\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            draft.mainPosts.filter((v, i) => v.id !== action.data);\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = true;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}