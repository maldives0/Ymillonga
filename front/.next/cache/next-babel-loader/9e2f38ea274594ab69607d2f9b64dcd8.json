{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"c:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport UserProfile from '../components/UserProfile';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { message } from 'antd';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n  var mainPosts = useSelector(function (state) {\n    return state.user.mainPosts;\n  });\n  var hasMorePosts = useSelector(function (state) {\n    return state.user.hasMorePosts;\n  });\n  var loadPostsLoading = useSelector(function (state) {\n    return state.user.loadPostsLoading;\n  });\n  var reportPostDone = useSelector(function (state) {\n    return state.post.reportPostDone;\n  });\n  var reportPostError = useSelector(function (state) {\n    return state.post.reportPostError;\n  });\n  var retweetError = useSelector(function (state) {\n    return state.post.retweetError;\n  });\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  useEffect(function () {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    },\n    __self: _this\n  }, me && me.id && ___EmotionJSX(UserProfile, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    },\n    __self: _this\n  }), me && ___EmotionJSX(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 20\n    },\n    __self: _this\n  }), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      },\n      __self: _this\n    });\n  }));\n};\n\n_s(Home, \"0iCflVIQgzGoXyugqezjnfS0LHY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Home;\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\n//getServerSideProps는 방문할 때마다 불러온다\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useEffect","useSelector","useDispatch","AppLayout","PostForm","PostCard","UserProfile","LOAD_POSTS_REQUEST","message","Home","dispatch","mainPosts","state","user","hasMorePosts","loadPostsLoading","reportPostDone","post","reportPostError","retweetError","me","success","error","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport UserProfile from '../components/UserProfile';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { message } from 'antd';\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const mainPosts = useSelector((state) => state.user.mainPosts);\r\n    const hasMorePosts = useSelector((state) => state.user.hasMorePosts);\r\n    const loadPostsLoading = useSelector((state) => state.user.loadPostsLoading);\r\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\r\n    const reportPostError = useSelector((state) => state.post.reportPostError);\r\n    const retweetError = useSelector((state) => state.post.retweetError);\r\n    const me = useSelector(state => state.user.me);\r\n\r\n    useEffect(() => {\r\n        if (reportPostDone) {\r\n            message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\r\n        }\r\n        if (reportPostError) {\r\n            message.error(reportPostError, 5);\r\n        }\r\n    }, [reportPostDone, reportPostError]);\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError)\r\n        }\r\n    }, [retweetError]);\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && me.id && <UserProfile />}\r\n            {me && <PostForm />}\r\n            {mainPosts?.map((post) => {\r\n                return (\r\n                    <PostCard key={post.id} post={post} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {//redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\r\n    console.log('getServerSideProps start');\r\n    // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\r\n    //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\r\n    const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\r\n    axios.defaults.headers.Cookie = '';//다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });//리덕스에 데이터가 채워진 상태로 component가 렌더링된다\r\n    context.store.dispatch(END);//미리 준비된 액션인 END를 가져와서 \r\n    await context.store.sagaTask.toPromise();//store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\r\n});\r\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\r\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\r\n//getServerSideProps는 방문할 때마다 불러온다\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}