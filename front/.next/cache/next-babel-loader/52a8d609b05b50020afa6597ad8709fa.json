{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\user\\\\[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Avatar } from 'antd';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar User = function User() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id; //next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\n\n  var dispatch = useDispatch();\n  var mainPosts = useSelector(function (state) {\n    return state.post.mainPosts;\n  });\n  var hasMorePosts = useSelector(function (state) {\n    return state.post.hasMorePosts;\n  });\n  var loadPostsLoading = useSelector(function (state) {\n    return state.post.loadPostsLoading;\n  });\n  var reportPostDone = useSelector(function (state) {\n    return state.post.reportPostDone;\n  });\n  var reportPostError = useSelector(function (state) {\n    return state.post.reportPostError;\n  });\n  var loadPostsError = useSelector(function (state) {\n    return state.post.loadPostsError;\n  });\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  var userInfo = useSelector(function (state) {\n    return state.user.userInfo;\n  });\n  useEffect(function () {\n    if (loadPostsError) {\n      message.error(loadPostsError);\n    }\n  }, [loadPostsError]);\n  useEffect(function () {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.');\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: lastId,\n            data: id\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, loadPostsLoading, id]); //og:카카오톡에 나오는 정보\n\n  console.log('userInfo', userInfo);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    },\n    __self: _this\n  }, userInfo && ___EmotionJSX(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    },\n    __self: _this\n  }, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://ymillonga.com/favicon.ico\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    },\n    __self: _this\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:url\",\n    content: \"https://ymillonga.com/user/\".concat(id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    },\n    __self: _this\n  })), userInfo && userInfo.id !== (me === null || me === void 0 ? void 0 : me.id) ? ___EmotionJSX(Card, {\n    style: {\n      marginBottom: 20\n    },\n    actions: [___EmotionJSX(\"div\", {\n      key: \"twit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      },\n      __self: _this\n    }, \"\\uAC8C\\uC2DC\\uAE00\", ___EmotionJSX(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      },\n      __self: _this\n    }), userInfo.Posts), ___EmotionJSX(\"div\", {\n      key: \"following\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      },\n      __self: _this\n    }, \"\\uD314\\uB85C\\uC789\", ___EmotionJSX(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      },\n      __self: _this\n    }), userInfo.Followings), ___EmotionJSX(\"div\", {\n      key: \"follower\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      },\n      __self: _this\n    }, \"\\uD314\\uB85C\\uC6CC\", ___EmotionJSX(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      },\n      __self: _this\n    }), userInfo.Followers)],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 30\n      },\n      __self: _this\n    }, userInfo.nickname[0]),\n    title: userInfo.nickname,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    },\n    __self: _this\n  })) : null, mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 39\n      },\n      __self: _this\n    });\n  }));\n};\n\n_s(User, \"lbcxaEHag2OmZC2seRx6MrMQcTc=\", false, function () {\n  return [useRouter, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = User;\nexport var __N_SSP = true;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/user/[id].js"],"names":["React","useEffect","useSelector","useDispatch","Card","Avatar","AppLayout","PostCard","LOAD_USER_POSTS_REQUEST","useRouter","Head","User","router","id","query","dispatch","mainPosts","state","post","hasMorePosts","loadPostsLoading","reportPostDone","reportPostError","loadPostsError","me","user","userInfo","message","error","success","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","type","data","addEventListener","removeEventListener","console","log","nickname","marginBottom","Posts","Followings","Followers","map"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Card, Avatar } from 'antd';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostCard from '../../components/PostCard';\r\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\r\nimport wrapper from '../../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'next/router';\r\nimport Head from 'next/head';\r\n\r\nconst User = () => {\r\n    const router = useRouter();\r\n    const { id } = router.query;//next 다이나믹 라우팅으로 특정 사용자id값을 query로 가져올 수 있다\r\n    const dispatch = useDispatch();\r\n    const mainPosts = useSelector((state) => state.post.mainPosts);\r\n    const hasMorePosts = useSelector((state) => state.post.hasMorePosts);\r\n    const loadPostsLoading = useSelector((state) => state.post.loadPostsLoading);\r\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\r\n    const reportPostError = useSelector((state) => state.post.reportPostError);\r\n    const loadPostsError = useSelector((state) => state.post.loadPostsError);\r\n    const me = useSelector(state => state.user.me);\r\n    const userInfo = useSelector(state => state.user.userInfo);\r\n\r\n\r\n    useEffect(() => {\r\n        if (loadPostsError) {\r\n            message.error(loadPostsError);\r\n        }\r\n    }, [loadPostsError]);\r\n    useEffect(() => {\r\n        if (reportPostDone) {\r\n            message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.');\r\n        }\r\n        if (reportPostError) {\r\n            message.error(reportPostError);\r\n        }\r\n    }, [reportPostDone, reportPostError]);\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_USER_POSTS_REQUEST,\r\n                        lastId,\r\n                        data: id,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts.length, hasMorePosts, loadPostsLoading, id]);\r\n    //og:카카오톡에 나오는 정보\r\n    console.log('userInfo', userInfo);\r\n    return (\r\n        <AppLayout>\r\n            {userInfo && (\r\n                <Head>\r\n                    <title>{userInfo.nickname}님의 글</title>\r\n                    <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\r\n                    <meta property=\"og:image\" content=\"https://ymillonga.com/favicon.ico\" />\r\n                    <meta property=\"og:url\" content={`https://ymillonga.com/user/${id}`} />\r\n                </Head>\r\n            )}\r\n            {userInfo && (userInfo.id !== me?.id) ? (\r\n                <Card\r\n                    style={{ marginBottom: 20 }}\r\n                    actions={[\r\n                        <div key=\"twit\">\r\n                            게시글\r\n                            <br />{userInfo.Posts}\r\n                        </div>,\r\n                        <div key=\"following\">\r\n                            팔로잉\r\n                            <br />{userInfo.Followings}\r\n                        </div>,\r\n                        <div key=\"follower\">\r\n                            팔로워\r\n                            <br />{userInfo.Followers}\r\n                        </div>,\r\n                    ]}\r\n                >\r\n                    <Card.Meta\r\n                        avatar={\r\n                            (<Avatar>\r\n                                {userInfo.nickname[0]}</Avatar>)\r\n                        }\r\n                        title={userInfo.nickname}\r\n                    />\r\n                </Card>\r\n            ) : null}\r\n            {mainPosts?.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    console.log('getServerSideProps start');\r\n\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: context.params.id,//context.query.id와 함께 router.query를 통해 가져온 특정 유저 아이디 값을 가져올 수 있다\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_USER_POSTS_REQUEST,\r\n        data: context.params.id,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default User; \r\n"]},"metadata":{},"sourceType":"module"}