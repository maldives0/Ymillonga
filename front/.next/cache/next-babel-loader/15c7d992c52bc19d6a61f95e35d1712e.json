{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nvar TextArea = _Input.TextArea;\n\nvar PostCardContent = function PostCardContent(_ref) {\n  var postData = _ref.postData,\n      editMode = _ref.editMode,\n      onCancelUpdate = _ref.onCancelUpdate,\n      onChangePost = _ref.onChangePost;\n  var updatePostLoading = useSelector(function (state) {\n    return state.post.updatePostLoading;\n  });\n  var updatePostDone = useSelector(function (state) {\n    return state.post.updatePostDone;\n  });\n\n  var _useState = useState(postData),\n      editText = _useState[0],\n      setEditText = _useState[1];\n\n  useEffect(function () {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n  var onChangeText = useCallback(function (e) {\n    setEditText(e.target.value);\n  }, []); //prefetch를 false로 해야 미리 build 되지 않는다\n\n  return ___EmotionJSX(\"div\", null, editMode ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(TextArea, {\n    value: editText,\n    onChange: onChangeText\n  }), ___EmotionJSX(_Button.Group, null, ___EmotionJSX(_Button, {\n    loading: updatePostLoading,\n    onClick: onChangePost(editText)\n  }, \"\\uC218\\uC815\\uD558\\uAE30\"), ___EmotionJSX(_Button, {\n    type: \"danger\",\n    onClick: onCancelUpdate\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))) : postData === null || postData === void 0 ? void 0 : postData.split(/(#[^\\s#]+)/g).map(function (v) {\n    if (v.match(/(#[^\\s#]+)/)) {\n      return ___EmotionJSX(Link, {\n        href: {\n          pathname: '/hashtag',\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        prefetch: false,\n        key: v\n      }, ___EmotionJSX(\"a\", null, v));\n    }\n\n    return v;\n  }));\n};\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onCancelUpdate: PropTypes.func.isRequired,\n  onChangePost: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;","map":null,"metadata":{},"sourceType":"module"}