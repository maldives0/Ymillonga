{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport UserProfile from '../components/UserProfile';\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST } from '../reducers/post';\nimport { PageHeader, message, Button } from 'antd';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { ButtonLayout, ImgWrapper } from '../components/style';\nimport { default as LoginOutlined } from '@ant-design/icons/LoginOutlined';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar Home = function Home() {\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var mainPosts = useSelector(function (state) {\n    return state.post.mainPosts;\n  });\n  var hasMorePosts = useSelector(function (state) {\n    return state.post.hasMorePosts;\n  });\n  var loadPostsLoading = useSelector(function (state) {\n    return state.post.loadPostsLoading;\n  });\n  var reportPostDone = useSelector(function (state) {\n    return state.post.reportPostDone;\n  });\n  var reportPostError = useSelector(function (state) {\n    return state.post.reportPostError;\n  });\n  var retweetError = useSelector(function (state) {\n    return state.post.retweetError;\n  });\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  var ignoreError = useSelector(function (state) {\n    return state.user.ignoreError;\n  });\n  var unIgnoreError = useSelector(function (state) {\n    return state.user.unIgnoreError;\n  });\n  var ignoreDone = useSelector(function (state) {\n    return state.user.ignoreDone;\n  });\n  var unIgnoreDone = useSelector(function (state) {\n    return state.user.unIgnoreDone;\n  });\n  var onClickRelatedPosts = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LOAD_RELATED_POSTS_REQUEST\n    });\n  }, [id]);\n  useEffect(function () {\n    if (ignoreDone) {\n      message.success('차단되었습니다.', 5);\n    }\n\n    if (ignoreError) {\n      message.error(ignoreError, 5);\n    }\n  }, [ignoreDone, ignoreError]);\n  useEffect(function () {\n    if (unIgnoreDone) {\n      message.success('차단이 풀어졌습니다.', 5);\n    }\n\n    if (unIgnoreError) {\n      message.error('차단 풀기하는 도중에 에러가 발생했습니다.', 5);\n    }\n  }, [unIgnoreDone, unIgnoreError]);\n  useEffect(function () {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(function () {\n    if (retweetError) {\n      message.error('리트윗하는 도중에 에러가 발생했습니다.', 5);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, null, me && me.id ? ___EmotionJSX(UserProfile, null) : ___EmotionJSX(PageHeader, {\n    className: \"site-page-header\",\n    onBack: function onBack() {\n      return Router.push('/login');\n    },\n    title: \"\\uC774\\uBC88 \\uBC00\\uB871\\uAC00\\uC5D0\\uC11C\\uB294 \\uC5B4\\uB5A4 \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    subTitle: \"\\uB85C\\uADF8\\uC778\\uC744 \\uD558\\uBA74 Y millonga\\uC5D0\\uC11C \\uC81C\\uACF5\\uD558\\uB294 \\uB2E4\\uC591\\uD55C \\uAE30\\uB2A5\\uC744 \\uB204\\uB9AC\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\",\n    backIcon: ___EmotionJSX(ButtonLayout, {\n      type: \"primary\",\n      onClick: function onClick() {\n        return Router.push('/login');\n      }\n    }, ___EmotionJSX(LoginOutlined, null), \"\\uB85C\\uADF8\\uC778\")\n  }), ___EmotionJSX(ImgWrapper, null, ___EmotionJSX(\"img\", {\n    src: \"/images/dancers.png\"\n  })), me && me.id && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(PostForm, null), ___EmotionJSX(Button, {\n    style: {\n      marginBottom: 5\n    },\n    type: \"primary\",\n    loading: loadPostsLoading,\n    onClick: onClickRelatedPosts\n  }, ___EmotionJSX(Link, {\n    href: \"/posts/related\"\n  }, ___EmotionJSX(\"a\", null, \"\\uD314\\uB85C\\uC789 \\uAC8C\\uC2DC\\uAE00\\uB9CC \\uBCF4\\uAE30\")))), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post\n    });\n  }));\n};\n\nexport var __N_SSP = true;\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}