{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment, Modal, Form, Input, Tooltip } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { InputReport, CardWrapper } from './style';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport { default as RetweetOutlined } from '@ant-design/icons/RetweetOutlined';\nimport { default as HeartTwoTone } from '@ant-design/icons/HeartTwoTone';\nimport { default as HeartOutlined } from '@ant-design/icons/HeartOutlined';\nimport { default as MessageOutlined } from '@ant-design/icons/MessageOutlined';\nimport { default as EllipsisOutlined } from '@ant-design/icons/EllipsisOutlined';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, UPDATE_POST_REQUEST, REPORT_POST_REQUEST } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nmoment.locale('ko');\n\nvar PostCard = function PostCard(_ref) {\n  var _post$Likers;\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      reportText = _useInput2[0],\n      onChangeReportText = _useInput2[1];\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(false),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var reportPostLoading = useSelector(function (state) {\n    return state.post.reportLoading;\n  });\n  var reportPostDone = useSelector(function (state) {\n    return state.post.reportPostDone;\n  });\n  var reportPostError = useSelector(function (state) {\n    return state.post.reportPostError;\n  });\n  var removePostLoading = useSelector(function (state) {\n    return state.post.removePostLoading;\n  });\n\n  var _useState3 = useState(false),\n      modalVisible = _useState3[0],\n      setModalVisible = _useState3[1];\n\n  var onLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onUnlike = useCallback(function () {\n    if (!id) alert('로그인이 필요합니다');\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onRemovePost = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onRetweet = useCallback(function () {\n    if (!id) alert('로그인이 필요합니다');\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, [id]);\n  var onClickUpdate = useCallback(function () {\n    setEditMode(true);\n  }, []);\n  var onCancelUpdate = useCallback(function () {\n    setEditMode(false);\n    ;\n  }, []);\n  var onChangePost = useCallback(function (editText) {\n    return function () {\n      if (!id) {\n        return alert('로그인이 필요합니다.');\n      }\n\n      dispatch({\n        type: UPDATE_POST_REQUEST,\n        data: {\n          PostId: post.id,\n          content: editText\n        }\n      });\n    };\n  }, [post]);\n  var onReport = useCallback(function () {\n    setModalVisible(true);\n  }, []);\n  var onsubmitReport = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: REPORT_POST_REQUEST,\n      data: {\n        postId: post.id,\n        reason: reportText\n      }\n    });\n  }, [reportText]);\n  var reportCancel = useCallback(function () {\n    setModalVisible(false);\n  }, []);\n  useEffect(function () {\n    if (reportPostDone) {\n      setModalVisible(false);\n    }\n\n    if (reportPostError) {\n      setModalVisible(false);\n    }\n  }, [reportPostDone, reportPostError]);\n  var liked = (_post$Likers = post.Likers) === null || _post$Likers === void 0 ? void 0 : _post$Likers.find(function (v) {\n    return v.id === id;\n  });\n  return ___EmotionJSX(CardWrapper, {\n    key: post.id\n  }, ___EmotionJSX(Card, {\n    cover: post.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Images\n    }),\n    actions: [___EmotionJSX(Tooltip, {\n      title: \"\\uB9AC\\uD2B8\\uC717\\uD558\\uAE30\"\n    }, ___EmotionJSX(RetweetOutlined, {\n      onClick: onRetweet,\n      key: \"retweet\"\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uC88B\\uC544\\uC694\"\n    }, liked ? ___EmotionJSX(HeartTwoTone, {\n      key: \"heart\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onUnlike\n    }) : ___EmotionJSX(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uB313\\uAE00\\uB2EC\\uAE30\"\n    }, ___EmotionJSX(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment\n    })), ___EmotionJSX(Popover, {\n      key: \"ellipsis\",\n      content: ___EmotionJSX(Button.Group, null, id && post.User.id === id ? ___EmotionJSX(React.Fragment, null, !post.RetweetId && ___EmotionJSX(Button, {\n        onClick: onClickUpdate\n      }, \"\\uC218\\uC815\"), ___EmotionJSX(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        loading: removePostLoading\n      }, \"\\uC0AD\\uC81C\")) : ___EmotionJSX(Button, {\n        onClick: onReport\n      }, \"\\uC2E0\\uACE0\\uD558\\uAE30\"))\n    }, ___EmotionJSX(EllipsisOutlined, null))],\n    extra: id && ___EmotionJSX(FollowButton, {\n      post: post\n    }),\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null\n  }, ___EmotionJSX(Modal, {\n    title: \"report\",\n    visible: modalVisible,\n    onOk: onsubmitReport,\n    confirmLoading: reportPostLoading,\n    onCancel: reportCancel\n  }, ___EmotionJSX(Form, null, ___EmotionJSX(InputReport, {\n    rows: 4,\n    value: reportText,\n    onChange: onChangeReportText\n  })), ___EmotionJSX(\"p\", null, \"\\uC2E0\\uACE0\\uD558\\uC2E4 \\uACBD\\uC6B0 \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uACC4\\uC18D \\uC9C4\\uD589\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\")), post.RetweetId && post.Retweet ? ___EmotionJSX(Card, {\n    cover: post.Retweet.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, ___EmotionJSX(\"div\", {\n    style: {\n      \"float\": 'right'\n    }\n  }, moment(post.Retweet.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, _defineProperty({\n      prefetch: false,\n      href: \"/user/\".concat(post.Retweet.UserId)\n    }, \"prefetch\", false), ___EmotionJSX(\"a\", null, ___EmotionJSX(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: ___EmotionJSX(PostCardContent, {\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      editMode: editMode,\n      postData: post.Retweet.content\n    })\n  })) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    style: {\n      \"float\": 'right'\n    }\n  }, moment(post.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, _defineProperty({\n      prefetch: false,\n      href: \"/user/\".concat(post.User.id)\n    }, \"prefetch\", false), ___EmotionJSX(\"a\", null, ___EmotionJSX(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: ___EmotionJSX(PostCardContent, {\n      editMode: editMode,\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      postData: post.content\n    })\n  }))), commentFormOpened && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(CommentForm, {\n    post: post\n  }), ___EmotionJSX(List, {\n    header: \"\\uB313\\uAE00: \".concat(post.Comments ? post.Comments.length : 0, \"\\uAC1C\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return ___EmotionJSX(\"li\", null, ___EmotionJSX(Comment, {\n        author: item.User.nickname,\n        avatar: ___EmotionJSX(Link, {\n          href: \"/user/\".concat(item.User.id),\n          prefetch: false\n        }, ___EmotionJSX(\"a\", null, ___EmotionJSX(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}