{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'momo'\n    },\n    content: '첫 번째 게시글 #first',\n    Images: [{\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }, {\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: nanoid(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  }],\n  imagePaths: []\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: nanoid(),\n      User: {\n        id: nanoid(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: nanoid(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = true;\n        draft.addPostError = action.error;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","id","User","nickname","content","Images","src","image","Comments","name","findName","lorem","sentence","imagePaths","generateDummyPost","number","Array","fill","map","paragraph","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","reducer","state","action","draft","type","addPostLoading","addPostDone","addPostError","unshift","data","error"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: 'momo',\r\n        },\r\n        content: '첫 번째 게시글 #first',\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        },\r\n        {\r\n            src: faker.image.image(),\r\n        }, {\r\n            src: faker.image.image(),\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                id: nanoid(),\r\n                nickname: faker.name.findName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n        }],\r\n    }],\r\n    imagePaths: [],\r\n};\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: nanoid(),\r\n    User: {\r\n        id: nanoid(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: nanoid(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}