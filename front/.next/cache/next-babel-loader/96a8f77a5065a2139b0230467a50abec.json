{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport fetch from '../libs/fetch';\nimport useSWR, { mutate } from 'swr';\nimport produce from \"immer\";\nexport default _s(function () {\n  _s();\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      setText = _React$useState2[1];\n\n  var _useSWR = useSWR('/api/data', fetch),\n      data = _useSWR.data;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault(); // call mutate to optimistically update the UI\n              // we use Immer produce to allow us to perform and immutable change\n              // while coding it as a normal mutation of the same object\n\n              mutate(\"/api/data\", produce(function (draftData) {\n                draftData.push(text);\n              }), false); // then we send the request to the API and let mutate\n              // update the data with the API response\n              // if this fail it will rollback the optimistic update\n\n              _context.t0 = mutate;\n              _context.next = 5;\n              return fetch('/api/data', {\n                method: 'POST',\n                body: JSON.stringify({\n                  text: text\n                })\n              });\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)('/api/data', _context.t1);\n              setText('');\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: function onChange(event) {\n          return setText(event.target.value);\n        },\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data ? data.map(function (datum) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: datum\n        }, datum, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 39\n        }, _this);\n      }) : 'loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 12\n  }, _this);\n}, \"xjz12YxVcUzzNEv0gA7qdT8BZPI=\", false, function () {\n  return [useSWR];\n});","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","fetch","useSWR","mutate","produce","useState","text","setText","data","handleSubmit","event","preventDefault","draftData","push","method","body","JSON","stringify","target","value","map","datum"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,KAA/B;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,kBAAe,YAAM;AAAA;;AAAA,wBACOJ,KAAK,CAACK,QAAN,CAAe,EAAf,CADP;AAAA;AAAA,MACVC,IADU;AAAA,MACJC,OADI;;AAAA,gBAEAL,MAAM,CAAC,WAAD,EAAcD,KAAd,CAFN;AAAA,MAETO,IAFS,WAETA,IAFS;;AAAA,WAIFC,YAJE;AAAA;AAAA;;AAAA;AAAA,6EAIjB,iBAA4BC,KAA5B;AAAA;AAAA;AAAA;AAAA;AACIA,cAAAA,KAAK,CAACC,cAAN,GADJ,CAEI;AACA;AACA;;AACAR,cAAAA,MAAM,CAAC,WAAD,EAAcC,OAAO,CAAC,UAAAQ,SAAS,EAAI;AACrCA,gBAAAA,SAAS,CAACC,IAAV,CAAeP,IAAf;AACH,eAF0B,CAArB,EAEF,KAFE,CAAN,CALJ,CAQI;AACA;AACA;;AAVJ,4BAWIH,MAXJ;AAAA;AAAA,qBAW8BF,KAAK,CAAC,WAAD,EAAc;AACzCa,gBAAAA,MAAM,EAAE,MADiC;AAEzCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,kBAAAA,IAAI,EAAJA;AAAF,iBAAf;AAFmC,eAAd,CAXnC;;AAAA;AAAA;AAAA,+BAWW,WAXX;AAeIC,cAAAA,OAAO,CAAC,EAAD,CAAP;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJiB;AAAA;AAAA;;AAsBjB,sBAAO;AAAA,4BACH;AAAM,MAAA,QAAQ,EAAEE,YAAhB;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,iBAAIH,OAAO,CAACG,KAAK,CAACQ,MAAN,CAAaC,KAAd,CAAX;AAAA,SAFnB;AAGI,QAAA,KAAK,EAAEb;AAHX;AAAA;AAAA;AAAA;AAAA,eADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANJ;AAAA;AAAA;AAAA;AAAA;AAAA,aADG,eASH;AAAA,gBACKE,IAAI,GAAGA,IAAI,CAACY,GAAL,CAAS,UAAAC,KAAK;AAAA,4BAAI;AAAA,oBAAiBA;AAAjB,WAASA,KAAT;AAAA;AAAA;AAAA;AAAA,iBAAJ;AAAA,OAAd,CAAH,GAAqD;AAD9D;AAAA;AAAA;AAAA;AAAA,aATG;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAaH,CAnCD;AAAA,UAEqBnB,MAFrB;AAAA","sourcesContent":["import React from 'react'\r\nimport fetch from '../libs/fetch'\r\n\r\nimport useSWR, { mutate } from 'swr'\r\nimport produce from \"immer\"\r\n\r\nexport default () => {\r\n    const [text, setText] = React.useState('');\r\n    const { data } = useSWR('/api/data', fetch)\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        // call mutate to optimistically update the UI\r\n        // we use Immer produce to allow us to perform and immutable change\r\n        // while coding it as a normal mutation of the same object\r\n        mutate(\"/api/data\", produce(draftData => {\r\n            draftData.push(text)\r\n        }), false)\r\n        // then we send the request to the API and let mutate\r\n        // update the data with the API response\r\n        // if this fail it will rollback the optimistic update\r\n        mutate('/api/data', await fetch('/api/data', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ text })\r\n        }))\r\n        setText('')\r\n    }\r\n\r\n    return <div>\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                onChange={event => setText(event.target.value)}\r\n                value={text}\r\n            />\r\n            <button>Create</button>\r\n        </form>\r\n        <ul>\r\n            {data ? data.map(datum => <li key={datum}>{datum}</li>) : 'loading...'}\r\n        </ul>\r\n    </div>\r\n}"]},"metadata":{},"sourceType":"module"}