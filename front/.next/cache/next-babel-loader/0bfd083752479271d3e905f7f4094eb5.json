{"ast":null,"code":"import faker from 'faker';\nimport produce from 'immer';\nimport { nanoid } from 'nanoid';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  reportPostLoading: false,\n  reportPostDone: false,\n  reportPostError: null\n}; // mainPosts: [{\n//     id: 1,//게시글 아이디\n//     User: {//게시글 작성자 \n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     content: '첫 번째 게시글 #first',\n//     Images: [{\n//         src: faker.image.image(),\n//     },\n//     {\n//         src: faker.image.image(),\n//     }, {\n//         src: faker.image.image(),\n//     }\n//     ],\n//     Likers: [],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }],\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: 'momo',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n// const dummyComment = (data) => ({\n//     id: nanoid(),\n//     User: {\n//         id: 2,\n//         nickname: 'soso',\n//     },\n//     content: data,\n// });\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: nanoid(),\n//     User: {\n//         id: nanoid(),\n//         nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: nanoid(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n\nexport const REPORT_POST_REQUEST = 'REPORT_POST_REQUEST';\nexport const REPORT_POST_SUCCESS = 'REPORT_POST_SUCCESS';\nexport const REPORT_POST_FAILURE = 'REPORT_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n    //FE에서만 이미지를 지우고 BE에서는 간직하고 있기\n\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = []; //대기중 파일 목록 없애기\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n      break;\n\n    case UPDATE_POST_REQUEST:\n      draft.updatePostLoading = true;\n      draft.updatePostDone = false;\n      draft.updatePostError = null;\n      break;\n\n    case UPDATE_POST_SUCCESS:\n      draft.updatePostLoading = false;\n      draft.updatePostDone = true;\n      draft.mainPosts.find(v => v.id === action.data.PostId).content = action.data.content;\n      break;\n\n    case UPDATE_POST_FAILURE:\n      draft.updatePostLoading = false;\n      draft.updatePostError = action.error;\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = true;\n      draft.addCommentError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = draft.imagePaths.concat(action.data);\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = true;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/reducers/post.js"],"names":["faker","produce","nanoid","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","updatePostLoading","updatePostDone","updatePostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","reportPostLoading","reportPostDone","reportPostError","REPORT_POST_REQUEST","REPORT_POST_SUCCESS","REPORT_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","reducer","state","action","draft","type","filter","v","i","data","concat","length","error","post","find","id","PostId","Likers","push","UserId","unshift","content","Comments"],"mappings":"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","sourcesContent":["import faker from 'faker';\r\nimport produce from 'immer';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const initialState = {\r\n\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    updatePostLoading: false,\r\n    updatePostDone: false,\r\n    updatePostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n    reportPostLoading: false,\r\n    reportPostDone: false,\r\n    reportPostError: null,\r\n};\r\n// mainPosts: [{\r\n//     id: 1,//게시글 아이디\r\n//     User: {//게시글 작성자 \r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     content: '첫 번째 게시글 #first',\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     },\r\n//     {\r\n//         src: faker.image.image(),\r\n//     }, {\r\n//         src: faker.image.image(),\r\n//     }\r\n//     ],\r\n//     Likers: [],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }],\r\n// const dummyPost = (data) => ({\r\n//     id: data.id,\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: 'momo',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n// const dummyComment = (data) => ({\r\n//     id: nanoid(),\r\n//     User: {\r\n//         id: 2,\r\n//         nickname: 'soso',\r\n//     },\r\n//     content: data,\r\n// });\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//     id: nanoid(),\r\n//     User: {\r\n//         id: nanoid(),\r\n//         nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: nanoid(),\r\n//             nickname: faker.name.findName(),\r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//     }],\r\n// }));\r\n\r\nexport const REPORT_POST_REQUEST = 'REPORT_POST_REQUEST';\r\nexport const REPORT_POST_SUCCESS = 'REPORT_POST_SUCCESS';\r\nexport const REPORT_POST_FAILURE = 'REPORT_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\r\nexport const UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\r\nexport const UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case REMOVE_IMAGE:\r\n            draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);//FE에서만 이미지를 지우고 BE에서는 간직하고 있기\r\n        case LOAD_USER_POSTS_REQUEST:\r\n        case LOAD_POSTS_REQUEST:\r\n        case LOAD_HASHTAG_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_USER_POSTS_SUCCESS:\r\n        case LOAD_HASHTAG_POSTS_SUCCESS:\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            draft.hasMorePosts = action.data.length === 10;\r\n            break;\r\n        case LOAD_USER_POSTS_FAILURE:\r\n        case LOAD_HASHTAG_POSTS_FAILURE:\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n        case LIKE_POST_REQUEST:\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break;\r\n        case LIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({ id: action.data.UserId });\r\n            draft.likePostLoading = false;\r\n            draft.likePostDone = true;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        case UNLIKE_POST_REQUEST:\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break;\r\n        case UNLIKE_POST_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostDone = true;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];//대기중 파일 목록 없애기\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = true;\r\n            draft.addPostError = action.error;\r\n            break;\r\n        case UPDATE_POST_REQUEST:\r\n            draft.updatePostLoading = true;\r\n            draft.updatePostDone = false;\r\n            draft.updatePostError = null;\r\n            break;\r\n        case UPDATE_POST_SUCCESS:\r\n            draft.updatePostLoading = false;\r\n            draft.updatePostDone = true;\r\n            draft.mainPosts.find((v) => v.id === action.data.PostId).content = action.data.content;\r\n            break;\r\n        case UPDATE_POST_FAILURE:\r\n            draft.updatePostLoading = false;\r\n            draft.updatePostError = action.error;\r\n            break;\r\n        case RETWEET_REQUEST:\r\n            draft.retweetLoading = true;\r\n            draft.retweetDone = false;\r\n            draft.retweetError = null;\r\n            break;\r\n        case RETWEET_SUCCESS: {\r\n            draft.retweetLoading = false;\r\n            draft.retweetDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            break;\r\n        }\r\n        case RETWEET_FAILURE:\r\n            draft.retweetLoading = false;\r\n            draft.retweetError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            break;\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break;\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            draft.imagePaths = draft.imagePaths.concat(action.data);\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesDone = true;\r\n            break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n        case REMOVE_POST_REQUEST:\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = true;\r\n            draft.removePostError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}