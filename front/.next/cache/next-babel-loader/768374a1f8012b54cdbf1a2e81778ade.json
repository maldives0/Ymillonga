{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport dummyUser from '../swr/user';\nimport dummyPost from '../swr/post'; // import useSWR from 'swr';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport fetch from '../libs/fetch';\nimport useSWR, { mutate } from 'swr';\nimport produce from \"immer\";\n\nvar Home = function Home() {\n  _s();\n\n  var _useSWR = useSWR(\"dummyUserState\", {\n    initialData: dummyUser\n  }),\n      userData = _useSWR.data;\n\n  var _useState = useState((userData || {}).me),\n      me = _useState[0],\n      setMe = _useState[1];\n\n  if (!userData) null;\n\n  var _useSWR2 = useSWR(\"dummyPostState\", {\n    initialData: dummyPost\n  }),\n      postData = _useSWR2.data;\n\n  var _useState2 = useState((postData || {}).mainPosts),\n      mainPosts = _useState2[0],\n      setmainPosts = _useState2[1];\n\n  if (!postData) null;\n\n  var _useState3 = useState(''),\n      text = _useState3[0],\n      setText = _useState3[1];\n\n  var _useSWR3 = useSWR('/api/data', fetch),\n      data = _useSWR3.data;\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault(); // call mutate to optimistically update the UI\n              // we use Immer produce to allow us to perform and immutable change\n              // while coding it as a normal mutation of the same object\n\n              mutate(\"/api/data\", produce(function (draftData) {\n                draftData.push(text);\n              }), false); // then we send the request to the API and let mutate\n              // update the data with the API response\n              // if this fail it will rollback the optimistic update\n\n              _context.t0 = mutate;\n              _context.next = 5;\n              return fetch('/api/data', {\n                method: 'POST',\n                body: JSON.stringify({\n                  text: text\n                })\n              });\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)('/api/data', _context.t1);\n              setText('');\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: function onChange(event) {\n            return setText(event.target.value);\n          },\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data ? data.map(function (datum) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: datum\n          }, datum, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 47\n          }, _this);\n        }) : 'loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, _this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 20\n    }, _this), mainPosts.map(function (c) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"Wv/YOdRogJVPECpzXzwiD5bKwHM=\", false, function () {\n  return [useSWR, useSWR, useSWR];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useState","dummyUser","dummyPost","AppLayout","PostForm","PostCard","fetch","useSWR","mutate","produce","Home","initialData","userData","data","me","setMe","postData","mainPosts","setmainPosts","text","setText","handleSubmit","event","preventDefault","draftData","push","method","body","JSON","stringify","target","value","map","datum","c","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport dummyUser from '../swr/user';\r\nimport dummyPost from '../swr/post';\r\n\r\n// import useSWR from 'swr';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport fetch from '../libs/fetch'\r\n\r\nimport useSWR, { mutate } from 'swr'\r\nimport produce from \"immer\"\r\nconst Home = () => {\r\n\r\n    const { data: userData } = useSWR(\"dummyUserState\", { initialData: dummyUser });\r\n    const [me, setMe] = useState((userData || {}).me);\r\n    if (!userData) null;\r\n\r\n    const { data: postData } = useSWR(\"dummyPostState\", { initialData: dummyPost });\r\n\r\n    const [mainPosts, setmainPosts] = useState((postData || {}).mainPosts);\r\n    if (!postData) null;\r\n    const [text, setText] = useState('');\r\n    const { data } = useSWR('/api/data', fetch)\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        // call mutate to optimistically update the UI\r\n        // we use Immer produce to allow us to perform and immutable change\r\n        // while coding it as a normal mutation of the same object\r\n        mutate(\"/api/data\", produce(draftData => {\r\n            draftData.push(text)\r\n        }), false)\r\n        // then we send the request to the API and let mutate\r\n        // update the data with the API response\r\n        // if this fail it will rollback the optimistic update\r\n        mutate('/api/data', await fetch('/api/data', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ text })\r\n        }))\r\n        setText('')\r\n    }\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={event => setText(event.target.value)}\r\n                        value={text}\r\n                    />\r\n                    <button>Create</button>\r\n                </form>\r\n                <ul>\r\n                    {data ? data.map(datum => <li key={datum}>{datum}</li>) : 'loading...'}\r\n                </ul>\r\n            </div>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}