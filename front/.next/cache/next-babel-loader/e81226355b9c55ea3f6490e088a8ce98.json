{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport UserProfile from '../components/UserProfile';\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST } from '../reducers/post';\nimport { message, Button } from 'antd';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  var mainPosts = useSelector(function (state) {\n    return state.post.mainPosts;\n  });\n  var hasMorePosts = useSelector(function (state) {\n    return state.post.hasMorePosts;\n  });\n  var loadPostsLoading = useSelector(function (state) {\n    return state.post.loadPostsLoading;\n  });\n  var loadPostsDone = useSelector(function (state) {\n    return state.post.loadPostsDone;\n  });\n  var reportPostDone = useSelector(function (state) {\n    return state.post.reportPostDone;\n  });\n  var reportPostError = useSelector(function (state) {\n    return state.post.reportPostError;\n  });\n  var retweetError = useSelector(function (state) {\n    return state.post.retweetError;\n  });\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n\n  var _useState = useState(false),\n      showRelatedPost = _useState[0],\n      setShowRelatedPost = _useState[1];\n\n  var onClickRelatedPosts = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LOAD_RELATED_POSTS_REQUEST\n    });\n\n    if (loadPostsDone) {\n      setShowRelatedPost(function (prev) {\n        return !prev;\n      });\n    }\n  }, []);\n  var onClickAllPosts = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n\n    if (loadPostsDone) {\n      setShowRelatedPost(function (prev) {\n        return !prev;\n      });\n    }\n  }, []);\n  useEffect(function () {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    },\n    __self: _this\n  }, me && me.id ? showRelatedPost ? ___EmotionJSX(Button, {\n    loading: loadPostsLoading,\n    onClick: onClickAllPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 36\n    },\n    __self: _this\n  }, \"\\uC804\\uCCB4 \\uAC8C\\uC2DC\\uAE00 \\uBCF4\\uAE30\") : ___EmotionJSX(Button, {\n    loading: loadPostsLoading,\n    onClick: onClickRelatedPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 70\n    },\n    __self: _this\n  }, \"\\uD314\\uB85C\\uC789\\uD55C \\uC0AC\\uC6A9\\uC790 \\uAC8C\\uC2DC\\uAE00\\uB9CC \\uBCF4\\uAE30\") : null, me && me.id && ___EmotionJSX(UserProfile, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    },\n    __self: _this\n  }), me && ___EmotionJSX(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 20\n    },\n    __self: _this\n  }), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(function (post) {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      },\n      __self: _this\n    });\n  }));\n};\n\n_s(Home, \"lMUEQNU6eipzHXxJcxEUsRNUNVE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Home;\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\n//getServerSideProps는 방문할 때마다 불러온다\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useEffect","useState","useCallback","useSelector","useDispatch","AppLayout","PostForm","PostCard","UserProfile","LOAD_POSTS_REQUEST","LOAD_RELATED_POSTS_REQUEST","message","Button","Home","dispatch","id","state","user","me","mainPosts","post","hasMorePosts","loadPostsLoading","loadPostsDone","reportPostDone","reportPostError","retweetError","showRelatedPost","setShowRelatedPost","onClickRelatedPosts","alert","type","prev","onClickAllPosts","success","error","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport UserProfile from '../components/UserProfile';\r\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST, } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { message, Button } from 'antd';\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const id = useSelector((state) => state.user.me?.id);\r\n    const mainPosts = useSelector((state) => state.post.mainPosts);\r\n    const hasMorePosts = useSelector((state) => state.post.hasMorePosts);\r\n    const loadPostsLoading = useSelector((state) => state.post.loadPostsLoading);\r\n    const loadPostsDone = useSelector((state) => state.post.loadPostsDone);\r\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\r\n    const reportPostError = useSelector((state) => state.post.reportPostError);\r\n    const retweetError = useSelector((state) => state.post.retweetError);\r\n    const me = useSelector(state => state.user.me);\r\n    const [showRelatedPost, setShowRelatedPost] = useState(false);\r\n    const onClickRelatedPosts = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        dispatch({\r\n            type: LOAD_RELATED_POSTS_REQUEST,\r\n        });\r\n        if (loadPostsDone) {\r\n            setShowRelatedPost((prev) => !prev);\r\n        }\r\n    }, []);\r\n    const onClickAllPosts = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n        });\r\n        if (loadPostsDone) {\r\n            setShowRelatedPost((prev) => !prev);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (reportPostDone) {\r\n            message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\r\n        }\r\n        if (reportPostError) {\r\n            message.error(reportPostError, 5);\r\n        }\r\n    }, [reportPostDone, reportPostError]);\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && me.id ? (\r\n                showRelatedPost ? (<Button\r\n                    loading={loadPostsLoading}\r\n                    onClick={onClickAllPosts}>전체 게시글 보기</Button>) : (<Button\r\n                        loading={loadPostsLoading}\r\n                        onClick={onClickRelatedPosts}>팔로잉한 사용자 게시글만 보기</Button>)\r\n            ) : null}\r\n            {me && me.id && <UserProfile />}\r\n            {me && <PostForm />}\r\n            {mainPosts?.map((post) => {\r\n                return (\r\n                    <PostCard key={post.id} post={post} />\r\n                );\r\n            })}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {//redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\r\n    console.log('getServerSideProps start');\r\n    // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\r\n    //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\r\n    const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\r\n    axios.defaults.headers.Cookie = '';//다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });//리덕스에 데이터가 채워진 상태로 component가 렌더링된다\r\n    context.store.dispatch(END);//미리 준비된 액션인 END를 가져와서 \r\n    await context.store.sagaTask.toPromise();//store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\r\n});\r\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\r\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\r\n//getServerSideProps는 방문할 때마다 불러온다\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}