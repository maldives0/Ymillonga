{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log('loggerMiddleware', action);\n  return next(action);\n};\n\nconst configureStore = context => {\n  console.log('context', context);\n  const sagaMiddleware = createSagaMiddleware();\n  const middleware = [loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middleware)) : composeWithDevTools(applyMiddleware(...middleware));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","context","sagaMiddleware","createSagaMiddleware","middleware","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACvEC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,MAAhC;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAHD;;AAIA,MAAMG,cAAc,GAAIC,OAAD,IAAa;AAChCH,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,OAAvB;AACA,QAAMC,cAAc,GAAGC,oBAAoB,EAA3C;AACA,QAAMC,UAAU,GAAG,CAACX,gBAAD,CAAnB;AACA,QAAMY,QAAQ,GAAG,QACbjB,OAAO,CAACF,eAAe,CAAC,GAAGkB,UAAJ,CAAhB,CADM,GAEbd,mBAAmB,CAACJ,eAAe,CAAC,GAAGkB,UAAJ,CAAhB,CAFvB;AAIA,QAAME,KAAK,GAAGnB,WAAW,CAACI,OAAD,EAAUc,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBL,cAAc,CAACM,GAAf,CAAmBhB,QAAnB,CAAjB;AACA,SAAOc,KAAP;AACH,CAXD;;AAYA,MAAMG,OAAO,GAAGpB,aAAa,CAACW,cAAD,EAAiB;AAC1CU,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAGA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    console.log('loggerMiddleware', action);\r\n    return next(action);\r\n};\r\nconst configureStore = (context) => {\r\n    console.log('context', context);\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middleware = [loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production' ?\r\n        compose(applyMiddleware(...middleware)) :\r\n        composeWithDevTools(applyMiddleware(...middleware)\r\n        );\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development'\r\n});\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}