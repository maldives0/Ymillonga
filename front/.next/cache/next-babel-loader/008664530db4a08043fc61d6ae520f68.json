{"ast":null,"code":"// import axios from 'axios';\n// import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\n// import {\n//     ADD_COMMENT_FAILURE,\n//     ADD_COMMENT_REQUEST,\n//     ADD_COMMENT_SUCCESS,\n//     ADD_POST_FAILURE,\n//     ADD_POST_REQUEST,\n//     ADD_POST_SUCCESS,\n//     LIKE_POST_FAILURE,\n//     LIKE_POST_REQUEST,\n//     LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n//     LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\n//     LOAD_POSTS_FAILURE,\n//     LOAD_POSTS_REQUEST,\n//     LOAD_POSTS_SUCCESS,\n//     LOAD_USER_POSTS_FAILURE,\n//     LOAD_USER_POSTS_REQUEST,\n//     LOAD_USER_POSTS_SUCCESS,\n//     REMOVE_POST_FAILURE,\n//     REMOVE_POST_REQUEST,\n//     REMOVE_POST_SUCCESS,\n//     RETWEET_FAILURE,\n//     RETWEET_REQUEST,\n//     RETWEET_SUCCESS,\n//     UNLIKE_POST_FAILURE,\n//     UNLIKE_POST_REQUEST,\n//     UNLIKE_POST_SUCCESS,\n//     UPLOAD_IMAGES_FAILURE,\n//     UPLOAD_IMAGES_REQUEST,\n//     UPLOAD_IMAGES_SUCCESS,\n// } from '../reducers/post';\n// import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n// function loadUserPostsAPI(data, lastId) {\n//     return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n// }\n// function* loadUserPosts(action) {\n//     try {\n//         const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n//         yield put({\n//             type: LOAD_USER_POSTS_SUCCESS,\n//             data: result.data,\n//         });\n//     } catch (err) {\n//         console.error(err);\n//         yield put({\n//             type: LOAD_USER_POSTS_FAILURE,\n//             data: err.response.data,\n//         });\n//     }\n// }\n// function loadHashtagPostsAPI(data, lastId) {\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\n//     function* loadHashtagPosts(action) {\n//         try {\n//             const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n//             yield put({\n//                 type: LOAD_HASHTAG_POSTS_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: LOAD_HASHTAG_POSTS_FAILURE,\n//                 data: err.response.data,\n//             });\n//         }\n//     }\n//     function loadPostsAPI(lastId) {\n//         return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\n//     }\n//     function* loadPosts(action) {\n//         try {\n//             const result = yield call(loadPostsAPI, action.lastId);\n//             yield put({\n//                 type: LOAD_POSTS_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: LOAD_POSTS_FAILURE,\n//                 data: err.response.data,\n//             });\n//         }\n//     }\n//     function addPostAPI(data) {\n//         return axios.post('/post', data);\n//     }\n//     function* addPost(action) {\n//         try {\n//             const result = yield call(addPostAPI, action.data);\n//             yield put({\n//                 type: ADD_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         }\n//         catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: ADD_POST_FAILURE,\n//                 error: err.response.data,\n//             })\n//         }\n//     }\n//     function addCommentAPI(data) {\n//         return axios.post(`/post/${data.postId}/comment`, data)\n//     }\n//     function* addComment(action) {\n//         try {\n//             const result = yield call(addCommentAPI, action.data);\n//             console.log('comment:', result.data);\n//             yield put({\n//                 type: ADD_COMMENT_SUCCESS,\n//                 data: result.data,\n//             });\n//         }\n//         catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: ADD_COMMENT_FAILURE,\n//                 error: err.response.data,\n//             })\n//         }\n//     }\n//     function retweetAPI(data) {\n//         return axios.post(`/post/${data}/retweet`);\n//     }\n//     function* retweet(action) {\n//         try {\n//             const result = yield call(retweetAPI, action.data);\n//             yield put({\n//                 type: RETWEET_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: RETWEET_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function uploadImagesAPI(data) {\n//         return axios.post('/post/images', data);\n//     }\n//     function* uploadImages(action) {\n//         try {\n//             const result = yield call(uploadImagesAPI, action.data);\n//             yield put({\n//                 type: UPLOAD_IMAGES_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: UPLOAD_IMAGES_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function likePostAPI(data) {\n//         return axios.patch(`/post/${data}/like`);\n//     }\n//     function* likePost(action) {\n//         try {\n//             const result = yield call(likePostAPI, action.data);\n//             yield put({\n//                 type: LIKE_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: LIKE_POST_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function unlikePostAPI(data) {\n//         return axios.delete(`/post/${data}/like`);\n//     }\n//     function* unlikePost(action) {\n//         try {\n//             const result = yield call(unlikePostAPI, action.data);\n//             yield put({\n//                 type: UNLIKE_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         } catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: UNLIKE_POST_FAILURE,\n//                 error: err.response.data,\n//             });\n//         }\n//     }\n//     function removePostAPI(data) {\n//         return axios.delete(`/post/${data}`);\n//     }\n//     function* removePost(action) {\n//         try {\n//             const result = yield call(removePostAPI, action.data);\n//             yield put({\n//                 type: REMOVE_POST_SUCCESS,\n//                 data: result.data,\n//             });\n//         }\n//         catch (err) {\n//             console.error(err);\n//             yield put({\n//                 type: REMOVE_POST_FAILURE,\n//                 error: err.response.data,\n//             })\n//         }\n//     }\n//     function* watchUploadImages() {\n//         yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n//     }\n//     function* watchLikePost() {\n//         yield takeLatest(LIKE_POST_REQUEST, likePost);\n//     }\n//     function* watchUnlikePost() {\n//         yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n//     }\n//     function* watchRetweet() {\n//         yield takeLatest(RETWEET_REQUEST, retweet);\n//     }\n//     function* watchLoadPosts() {\n//         yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n//     }\n//     function* watchLoadUserPosts() {\n//         yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n//     }\n//     function* watchLoadHashtagPosts() {\n//         yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n//     }\n//     function* watchAddPost() {\n//         yield takeLatest(ADD_POST_REQUEST, addPost);\n//     }\n//     function* watchRemovePost() {\n//         yield takeLatest(REMOVE_POST_REQUEST, removePost);\n//     }\n//     function* watchAddComment() {\n//         yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n//     }\n//     export default function* postSaga() {\n//         yield all([\n//             fork(watchAddPost),\n//             fork(watchUploadImages),\n//             fork(watchLikePost),\n//             fork(watchUnlikePost),\n//             fork(watchRetweet),\n//             fork(watchLoadUserPosts),\n//             fork(watchLoadHashtagPosts),\n//             fork(watchLoadPosts),\n//             fork(watchRemovePost),\n//             fork(watchAddComment),\n//         ]);\n//     }\nimport axios from 'axios';\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["axios","all","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","console","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","get","loadPost","loadUserPostsAPI","lastId","loadUserPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","loadPostsAPI","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","watchLoadUserPosts","watchLoadHashtagPosts","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"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","sourcesContent":["// import axios from 'axios';\r\n// import { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n// import {\r\n//     ADD_COMMENT_FAILURE,\r\n//     ADD_COMMENT_REQUEST,\r\n//     ADD_COMMENT_SUCCESS,\r\n//     ADD_POST_FAILURE,\r\n//     ADD_POST_REQUEST,\r\n//     ADD_POST_SUCCESS,\r\n//     LIKE_POST_FAILURE,\r\n//     LIKE_POST_REQUEST,\r\n//     LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n//     LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n//     LOAD_POSTS_FAILURE,\r\n//     LOAD_POSTS_REQUEST,\r\n//     LOAD_POSTS_SUCCESS,\r\n//     LOAD_USER_POSTS_FAILURE,\r\n//     LOAD_USER_POSTS_REQUEST,\r\n//     LOAD_USER_POSTS_SUCCESS,\r\n//     REMOVE_POST_FAILURE,\r\n//     REMOVE_POST_REQUEST,\r\n//     REMOVE_POST_SUCCESS,\r\n//     RETWEET_FAILURE,\r\n//     RETWEET_REQUEST,\r\n//     RETWEET_SUCCESS,\r\n//     UNLIKE_POST_FAILURE,\r\n//     UNLIKE_POST_REQUEST,\r\n//     UNLIKE_POST_SUCCESS,\r\n//     UPLOAD_IMAGES_FAILURE,\r\n//     UPLOAD_IMAGES_REQUEST,\r\n//     UPLOAD_IMAGES_SUCCESS,\r\n// } from '../reducers/post';\r\n// import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\n// function loadUserPostsAPI(data, lastId) {\r\n//     return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n// }\r\n\r\n// function* loadUserPosts(action) {\r\n//     try {\r\n//         const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n//         yield put({\r\n//             type: LOAD_USER_POSTS_SUCCESS,\r\n//             data: result.data,\r\n//         });\r\n//     } catch (err) {\r\n//         console.error(err);\r\n//         yield put({\r\n//             type: LOAD_USER_POSTS_FAILURE,\r\n//             data: err.response.data,\r\n//         });\r\n//     }\r\n// }\r\n\r\n// function loadHashtagPostsAPI(data, lastId) {\r\n//     return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);// 주소에 한글이 들어가면 unescaped character error가 난다\r\n\r\n//     function* loadHashtagPosts(action) {\r\n//         try {\r\n//             const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n//             yield put({\r\n//                 type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: LOAD_HASHTAG_POSTS_FAILURE,\r\n//                 data: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function loadPostsAPI(lastId) {\r\n//         return axios.get(`/posts?lastId=${lastId || 0}`);//get은 주소를 cashing하면 데이터까지 cashing 할 수 있다//lastId가 undefined면 0으로 보내기\r\n//     }\r\n\r\n//     function* loadPosts(action) {\r\n//         try {\r\n//             const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n//             yield put({\r\n//                 type: LOAD_POSTS_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: LOAD_POSTS_FAILURE,\r\n//                 data: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function addPostAPI(data) {\r\n//         return axios.post('/post', data);\r\n//     }\r\n//     function* addPost(action) {\r\n//         try {\r\n//             const result = yield call(addPostAPI, action.data);\r\n\r\n//             yield put({\r\n//                 type: ADD_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         }\r\n//         catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: ADD_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     function addCommentAPI(data) {\r\n//         return axios.post(`/post/${data.postId}/comment`, data)\r\n//     }\r\n//     function* addComment(action) {\r\n//         try {\r\n//             const result = yield call(addCommentAPI, action.data);\r\n//             console.log('comment:', result.data);\r\n//             yield put({\r\n//                 type: ADD_COMMENT_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         }\r\n//         catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: ADD_COMMENT_FAILURE,\r\n//                 error: err.response.data,\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     function retweetAPI(data) {\r\n//         return axios.post(`/post/${data}/retweet`);\r\n//     }\r\n\r\n//     function* retweet(action) {\r\n//         try {\r\n//             const result = yield call(retweetAPI, action.data);\r\n//             yield put({\r\n//                 type: RETWEET_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: RETWEET_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function uploadImagesAPI(data) {\r\n//         return axios.post('/post/images', data);\r\n//     }\r\n\r\n//     function* uploadImages(action) {\r\n//         try {\r\n//             const result = yield call(uploadImagesAPI, action.data);\r\n//             yield put({\r\n//                 type: UPLOAD_IMAGES_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: UPLOAD_IMAGES_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function likePostAPI(data) {\r\n//         return axios.patch(`/post/${data}/like`);\r\n//     }\r\n\r\n//     function* likePost(action) {\r\n//         try {\r\n//             const result = yield call(likePostAPI, action.data);\r\n//             yield put({\r\n//                 type: LIKE_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: LIKE_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function unlikePostAPI(data) {\r\n//         return axios.delete(`/post/${data}/like`);\r\n//     }\r\n\r\n//     function* unlikePost(action) {\r\n//         try {\r\n//             const result = yield call(unlikePostAPI, action.data);\r\n//             yield put({\r\n//                 type: UNLIKE_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         } catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: UNLIKE_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     function removePostAPI(data) {\r\n//         return axios.delete(`/post/${data}`);\r\n//     }\r\n//     function* removePost(action) {\r\n//         try {\r\n//             const result = yield call(removePostAPI, action.data);\r\n\r\n//             yield put({\r\n//                 type: REMOVE_POST_SUCCESS,\r\n//                 data: result.data,\r\n//             });\r\n//         }\r\n//         catch (err) {\r\n//             console.error(err);\r\n//             yield put({\r\n//                 type: REMOVE_POST_FAILURE,\r\n//                 error: err.response.data,\r\n//             })\r\n//         }\r\n//     }\r\n\r\n//     function* watchUploadImages() {\r\n//         yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n//     }\r\n\r\n//     function* watchLikePost() {\r\n//         yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n//     }\r\n\r\n//     function* watchUnlikePost() {\r\n//         yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n//     }\r\n//     function* watchRetweet() {\r\n//         yield takeLatest(RETWEET_REQUEST, retweet);\r\n//     }\r\n//     function* watchLoadPosts() {\r\n//         yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n//     }\r\n//     function* watchLoadUserPosts() {\r\n//         yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n//     }\r\n\r\n//     function* watchLoadHashtagPosts() {\r\n//         yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n//     }\r\n//     function* watchAddPost() {\r\n//         yield takeLatest(ADD_POST_REQUEST, addPost);\r\n//     }\r\n\r\n//     function* watchRemovePost() {\r\n//         yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n//     }\r\n\r\n//     function* watchAddComment() {\r\n//         yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n//     }\r\n\r\n//     export default function* postSaga() {\r\n//         yield all([\r\n//             fork(watchAddPost),\r\n//             fork(watchUploadImages),\r\n//             fork(watchLikePost),\r\n//             fork(watchUnlikePost),\r\n//             fork(watchRetweet),\r\n//             fork(watchLoadUserPosts),\r\n//             fork(watchLoadHashtagPosts),\r\n//             fork(watchLoadPosts),\r\n//             fork(watchRemovePost),\r\n//             fork(watchAddComment),\r\n//         ]);\r\n//     }\r\nimport axios from 'axios';\r\nimport { all, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\n\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}