{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\NicknameEditForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback } from 'react';\nimport useInput from '../hooks/useInput';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CHANGE_NICKNAME_REQUEST } from '../reducers/user';\nimport { NicknameInputSearch } from './style';\nimport { initialState } from \"../reducers/user\";\nimport useSWR, { mutate, trigger } from \"swr\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar NicknameEditForm = function NicknameEditForm(_ref) {\n  _s();\n\n  var onCancel = _ref.onCancel;\n\n  var _useSWR = useSWR(\"globalState\", {\n    initialData: initialState\n  }, {\n    revalidateOnFocus: true\n  }),\n      data = _useSWR.data;\n\n  var dispatch = useDispatch();\n  var me = useSelector(function (state) {\n    return state.user.me;\n  });\n  var changeNicknameLoading = useSelector(function (state) {\n    return state.user.changeNicknameLoading;\n  });\n\n  var _useInput = useInput((me === null || me === void 0 ? void 0 : me.nickname) || ''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      nickname = _useInput2[0],\n      onChangeNickname = _useInput2[1];\n\n  var onSubmit = useCallback(function () {\n    mutate(\"globalState\", _objectSpread(_objectSpread({}, data), {}, {\n      me: {\n        nickname: nickname\n      }\n    }), false);\n    dispatch({\n      type: CHANGE_NICKNAME_REQUEST,\n      data: nickname\n    });\n    trigger(\"globalState\");\n  }, [nickname]);\n  return ___EmotionJSX(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    },\n    __self: _this\n  }, ___EmotionJSX(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    },\n    __self: _this\n  }, ___EmotionJSX(Col, {\n    span: 18,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(Form.Item, {\n    label: \"\\uB2C9\\uB124\\uC784\",\n    rules: [{\n      required: true\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    },\n    __self: _this\n  }, ___EmotionJSX(NicknameInputSearch, {\n    loading: changeNicknameLoading,\n    value: nickname,\n    required: true,\n    onChange: onChangeNickname,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    },\n    __self: _this\n  }))), ___EmotionJSX(Col, {\n    span: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(Button, {\n    onClick: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    },\n    __self: _this\n  }, \"\\uBC14\\uAFB8\\uAE30\")), ___EmotionJSX(Col, {\n    span: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    },\n    __self: _this\n  }, ___EmotionJSX(Button, {\n    onClick: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    },\n    __self: _this\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))));\n};\n\n_s(NicknameEditForm, \"fvpkJFplzuNiRlMraKidaQ0eqcg=\", false, function () {\n  return [useSWR, useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = NicknameEditForm;\nNicknameEditForm.propTypes = {\n  onCancel: PropTypes.func.isRequired\n};\nexport default NicknameEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NicknameEditForm\");","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/NicknameEditForm.js"],"names":["React","useCallback","useInput","PropTypes","Form","Button","Row","Col","useDispatch","useSelector","CHANGE_NICKNAME_REQUEST","NicknameInputSearch","initialState","useSWR","mutate","trigger","NicknameEditForm","onCancel","initialData","revalidateOnFocus","data","dispatch","me","state","user","changeNicknameLoading","nickname","onChangeNickname","onSubmit","type","required","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\r\nimport useInput from '../hooks/useInput';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Button, Row, Col } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CHANGE_NICKNAME_REQUEST } from '../reducers/user';\r\nimport { NicknameInputSearch } from './style';\r\nimport { initialState } from \"../reducers/user\";\r\nimport useSWR, { mutate, trigger } from \"swr\"\r\nconst NicknameEditForm = ({ onCancel }) => {\r\n    const { data } = useSWR(\"globalState\", { initialData: initialState }, { revalidateOnFocus: true })\r\n    const dispatch = useDispatch();\r\n    const me = useSelector(state => state.user.me);\r\n    const changeNicknameLoading = useSelector(state => state.user.changeNicknameLoading);\r\n    const [nickname, onChangeNickname] = useInput(me?.nickname || '');\r\n\r\n    const onSubmit = useCallback(() => {\r\n        mutate(\"globalState\", {\r\n            ...data,\r\n            me: { nickname: nickname }\r\n        }, false)\r\n        dispatch({\r\n            type: CHANGE_NICKNAME_REQUEST,\r\n            data: nickname,\r\n        });\r\n        trigger(\"globalState\");\r\n    }, [nickname]);\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Form.Item\r\n                        label=\"닉네임\"\r\n                        rules={[\r\n                            { required: true, },\r\n                        ]}\r\n                    >\r\n                        <NicknameInputSearch\r\n                            loading={changeNicknameLoading}\r\n                            value={nickname}\r\n                            required\r\n                            onChange={onChangeNickname}\r\n                        />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button onClick={onSubmit}>바꾸기</Button>\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button onClick={onCancel}>취소하기</Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\nNicknameEditForm.propTypes = {\r\n    onCancel: PropTypes.func.isRequired,\r\n};\r\nexport default NicknameEditForm; "]},"metadata":{},"sourceType":"module"}