{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST, UNIGNORE_REQUEST, IGNORE_REQUEST } from '../reducers/user';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst FollowButton = ({\n  post\n}) => {\n  const me = useSelector(state => state.user.me);\n  const followLoading = useSelector(state => state.user.followLoading);\n  const unfollowLoading = useSelector(state => state.user.unfollowLoading);\n  const ignoreLoading = useSelector(state => state.user.ignoreLoading);\n  const unIgnoreLoading = useSelector(state => state.user.unIgnoreLoading);\n  const isFollowing = me.Followings.find(v => v.id === post.User.id);\n  const isIgnoring = me.Ignorings.find(v => v.id === post.User.id);\n  const dispatch = useDispatch();\n  const ToggleFollow = useCallback(() => {\n    if (isFollowing) {\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: post.User.id\n      });\n    } else {\n      dispatch({\n        type: FOLLOW_REQUEST,\n        data: post.User.id\n      });\n    }\n  }, [isFollowing]);\n  const toggleIgnore = useCallback(() => {\n    if (isIgnoring) {\n      dispatch({\n        type: UNIGNORE_REQUEST,\n        data: post.User.id\n      });\n    } else {\n      dispatch({\n        type: IGNORE_REQUEST,\n        data: post.User.id\n      });\n    }\n  }, [isIgnoring]);\n\n  if (post.User.id === me.id) {\n    return null;\n  }\n\n  return ___EmotionJSX(\"div\", null, ___EmotionJSX(_Button, {\n    style: {\n      marginRight: 1\n    },\n    loading: followLoading || unfollowLoading,\n    onClick: ToggleFollow\n  }, isFollowing ? '언팔로우' : '팔로우'), ___EmotionJSX(_Button, {\n    loading: ignoreLoading || unIgnoreLoading,\n    onClick: toggleIgnore\n  }, isIgnoring ? '차단풀기' : '차단하기'));\n};\n\nFollowButton.propTypes = {\n  post: PropTypes.shape({\n    UserId: PropTypes.number\n  }).isRequired\n};\nexport default FollowButton;","map":null,"metadata":{},"sourceType":"module"}