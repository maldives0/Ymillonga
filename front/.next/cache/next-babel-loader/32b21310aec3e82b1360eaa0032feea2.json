{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport UserProfile from '../components/UserProfile';\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { message, Button } from 'antd';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const mainPosts = useSelector(state => state.post.mainPosts);\n  const hasMorePosts = useSelector(state => state.post.hasMorePosts);\n  const loadPostsLoading = useSelector(state => state.post.loadPostsLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const retweetError = useSelector(state => state.post.retweetError);\n  const me = useSelector(state => state.user.me);\n  const {\n    0: showRelatedPost,\n    1: setShowRelatedPost\n  } = useState(false);\n  const onClickRelatedPosts = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LOAD_RELATED_POSTS_REQUEST\n    });\n    setShowRelatedPost(prev => !prev);\n  }, []);\n  const onClickAllPosts = useCallback(() => {\n    setShowRelatedPost(prev => !prev);\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    },\n    __self: this\n  }, me && me.id ? showRelatedPost ? ___EmotionJSX(Button, {\n    onClick: onClickAllPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 36\n    },\n    __self: this\n  }, \"\\uC804\\uCCB4 \\uAC8C\\uC2DC\\uAE00 \\uBCF4\\uAE30\") : ___EmotionJSX(Button, {\n    onClick: onClickRelatedPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 93\n    },\n    __self: this\n  }, \"\\uD314\\uB85C\\uC789\\uD55C \\uC0AC\\uC6A9\\uC790 \\uAC8C\\uC2DC\\uAE00\\uB9CC \\uBCF4\\uAE30\") : null, me && me.id && ___EmotionJSX(UserProfile, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    },\n    __self: this\n  }), me && ___EmotionJSX(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    },\n    __self: this\n  }), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(post => {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      },\n      __self: this\n    });\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\n  console.log('getServerSideProps start'); // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\n  //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\n\n  const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\n\n  axios.defaults.headers.Cookie = ''; //다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  }); //리덕스에 데이터가 채워진 상태로 component가 렌더링된다\n\n  context.store.dispatch(END); //미리 준비된 액션인 END를 가져와서 \n\n  await context.store.sagaTask.toPromise(); //store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\n}); //초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\n//getServerSideProps는 방문할 때마다 불러온다\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useEffect","useState","useCallback","useSelector","useDispatch","AppLayout","PostForm","PostCard","UserProfile","LOAD_POSTS_REQUEST","LOAD_RELATED_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","END","axios","message","Button","Home","dispatch","mainPosts","state","post","hasMorePosts","loadPostsLoading","reportPostDone","reportPostError","retweetError","me","user","showRelatedPost","setShowRelatedPost","onClickRelatedPosts","id","alert","type","prev","onClickAllPosts","success","error","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","addEventListener","removeEventListener","map","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport UserProfile from '../components/UserProfile';\r\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST, } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { message, Button } from 'antd';\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const mainPosts = useSelector((state) => state.post.mainPosts);\r\n    const hasMorePosts = useSelector((state) => state.post.hasMorePosts);\r\n    const loadPostsLoading = useSelector((state) => state.post.loadPostsLoading);\r\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\r\n    const reportPostError = useSelector((state) => state.post.reportPostError);\r\n    const retweetError = useSelector((state) => state.post.retweetError);\r\n    const me = useSelector(state => state.user.me);\r\n    const [showRelatedPost, setShowRelatedPost] = useState(false);\r\n    const onClickRelatedPosts = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        dispatch({\r\n            type: LOAD_RELATED_POSTS_REQUEST,\r\n        });\r\n        setShowRelatedPost((prev) => !prev);\r\n    }, []);\r\n    const onClickAllPosts = useCallback(() => {\r\n        setShowRelatedPost((prev) => !prev);\r\n        dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n        });\r\n    }, []);\r\n    useEffect(() => {\r\n        if (reportPostDone) {\r\n            message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\r\n        }\r\n        if (reportPostError) {\r\n            message.error(reportPostError, 5);\r\n        }\r\n    }, [reportPostDone, reportPostError]);\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n    useEffect(() => {\r\n        function onScroll() {\r\n\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && me.id ? (\r\n                showRelatedPost ? (<Button onClick={onClickAllPosts}>전체 게시글 보기</Button>) : (<Button onClick={onClickRelatedPosts}>팔로잉한 사용자 게시글만 보기</Button>)\r\n            ) : null}\r\n            {me && me.id && <UserProfile />}\r\n            {me && <PostForm />}\r\n            {mainPosts?.map((post) => {\r\n                return (\r\n                    <PostCard key={post.id} post={post} />\r\n                );\r\n            })}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {//redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\r\n    console.log('getServerSideProps start');\r\n    // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\r\n    //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\r\n    const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\r\n    axios.defaults.headers.Cookie = '';//다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });//리덕스에 데이터가 채워진 상태로 component가 렌더링된다\r\n    context.store.dispatch(END);//미리 준비된 액션인 END를 가져와서 \r\n    await context.store.sagaTask.toPromise();//store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\r\n});\r\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\r\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\r\n//getServerSideProps는 방문할 때마다 불러온다\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}