{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\";\nimport React, { useState } from 'react';\nimport dummyUser from '../swr/user';\nimport dummyPost from '../swr/post'; // import useSWR from 'swr';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport fetch from '../libs/fetch';\nimport useSWR, { mutate } from 'swr';\nimport produce from \"immer\";\n\nconst Home = () => {\n  const {\n    data: userData\n  } = useSWR(\"dummyUserState\", {\n    initialData: dummyUser\n  });\n  const {\n    0: me,\n    1: setMe\n  } = useState((userData || {}).me);\n  if (!userData) null;\n  const {\n    data: postData\n  } = useSWR(\"dummyPostState\", {\n    initialData: dummyPost\n  });\n  const {\n    0: mainPosts,\n    1: setmainPosts\n  } = useState((postData || {}).mainPosts);\n  if (!postData) null;\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    data\n  } = useSWR('/api/data', fetch);\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // call mutate to optimistically update the UI\n    // we use Immer produce to allow us to perform and immutable change\n    // while coding it as a normal mutation of the same object\n\n    mutate(\"/api/data\", produce(draftData => {\n      draftData.push(text);\n    }), false); // then we send the request to the API and let mutate\n    // update the data with the API response\n    // if this fail it will rollback the optimistic update\n\n    mutate('/api/data', await fetch('/api/data', {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    }));\n    setText('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: event => setText(event.target.value),\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data ? data.map(datum => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: datum\n        }, datum, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 47\n        }, this)) : 'loading...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 20\n    }, this), mainPosts.map(c => {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useState","dummyUser","dummyPost","AppLayout","PostForm","PostCard","fetch","useSWR","mutate","produce","Home","data","userData","initialData","me","setMe","postData","mainPosts","setmainPosts","text","setText","handleSubmit","event","preventDefault","draftData","push","method","body","JSON","stringify","target","value","map","datum","c","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport dummyUser from '../swr/user';\r\nimport dummyPost from '../swr/post';\r\n\r\n// import useSWR from 'swr';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport fetch from '../libs/fetch'\r\n\r\nimport useSWR, { mutate } from 'swr'\r\nimport produce from \"immer\"\r\nconst Home = () => {\r\n\r\n    const { data: userData } = useSWR(\"dummyUserState\", { initialData: dummyUser });\r\n    const [me, setMe] = useState((userData || {}).me);\r\n    if (!userData) null;\r\n\r\n    const { data: postData } = useSWR(\"dummyPostState\", { initialData: dummyPost });\r\n\r\n    const [mainPosts, setmainPosts] = useState((postData || {}).mainPosts);\r\n    if (!postData) null;\r\n    const [text, setText] = useState('');\r\n    const { data } = useSWR('/api/data', fetch)\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        // call mutate to optimistically update the UI\r\n        // we use Immer produce to allow us to perform and immutable change\r\n        // while coding it as a normal mutation of the same object\r\n        mutate(\"/api/data\", produce(draftData => {\r\n            draftData.push(text)\r\n        }), false)\r\n        // then we send the request to the API and let mutate\r\n        // update the data with the API response\r\n        // if this fail it will rollback the optimistic update\r\n        mutate('/api/data', await fetch('/api/data', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ text })\r\n        }))\r\n        setText('')\r\n    }\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={event => setText(event.target.value)}\r\n                        value={text}\r\n                    />\r\n                    <button>Create</button>\r\n                </form>\r\n                <ul>\r\n                    {data ? data.map(datum => <li key={datum}>{datum}</li>) : 'loading...'}\r\n                </ul>\r\n            </div>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((c) => {\r\n                return (\r\n                    <PostCard key={c.id} post={c} />\r\n                );\r\n            })}\r\n\r\n        </AppLayout>\r\n    );\r\n};\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}