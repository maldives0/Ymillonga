{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"c:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport UserProfile from '../components/UserProfile';\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, CHANGE_MENUKEY_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport { PageHeader, message, Button } from 'antd';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const mainPosts = useSelector(state => state.post.mainPosts);\n  const hasMorePosts = useSelector(state => state.post.hasMorePosts);\n  const loadPostsLoading = useSelector(state => state.post.loadPostsLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const retweetError = useSelector(state => state.post.retweetError);\n  const me = useSelector(state => state.user.me);\n  const loadMyInfoError = useSelector(state => state.user.loadMyInfoError);\n  const ignoreError = useSelector(state => state.user.ignoreError);\n  const unIgnoreError = useSelector(state => state.user.unIgnoreError);\n  const ignoreDone = useSelector(state => state.user.ignoreDone);\n  const unIgnoreDone = useSelector(state => state.user.unIgnoreDone);\n  const onClickLoginKey = useCallback(e => {\n    dispatch({\n      type: CHANGE_MENUKEY_REQUEST,\n      data: '2'\n    });\n    Router.push('/login');\n  }, []);\n  const onClickRelatedPosts = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LOAD_RELATED_POSTS_REQUEST\n    });\n  }, [id]);\n  useEffect(() => {\n    if (ignoreDone) {\n      message.success('차단되었습니다.', 5);\n    }\n\n    if (ignoreError) {\n      message.error(ignoreError, 5);\n    }\n  }, [ignoreDone, ignoreError]);\n  useEffect(() => {\n    if (unIgnoreDone) {\n      message.success('차단이 풀어졌습니다.', 5);\n    }\n\n    if (unIgnoreError) {\n      message.error(unIgnoreError, 5);\n    }\n  }, [unIgnoreDone, unIgnoreError]);\n  useEffect(() => {\n    if (reportPostDone) {\n      message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\n    }\n\n    if (reportPostError) {\n      message.error(reportPostError, 5);\n    }\n  }, [reportPostDone, reportPostError]);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    if (loadMyInfoError) {\n      Router.replace('/');\n    }\n  }, [loadMyInfoError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      //쌓여있는 이벤트 메모리를 제거해주기\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts, hasMorePosts, loadPostsLoading]);\n  return ___EmotionJSX(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    },\n    __self: this\n  }, me && me.id && ___EmotionJSX(Button, {\n    style: {\n      marginBottom: 5\n    },\n    loading: loadPostsLoading,\n    onClick: onClickRelatedPosts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    },\n    __self: this\n  }, ___EmotionJSX(Link, {\n    href: \"/posts/related\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    },\n    __self: this\n  }, ___EmotionJSX(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 45\n    },\n    __self: this\n  }, \"\\uD314\\uB85C\\uC789 \\uAC8C\\uC2DC\\uAE00\\uB9CC \\uBCF4\\uAE30\"))), me && me.id && ___EmotionJSX(UserProfile, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    },\n    __self: this\n  }), me ? ___EmotionJSX(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    },\n    __self: this\n  }) : ___EmotionJSX(PageHeader, {\n    className: \"site-page-header\",\n    onBack: onClickLoginKey,\n    title: \"\\uB2F9\\uC2E0\\uC758 \\uBC00\\uB871\\uAC00 \\uACBD\\uD5D8\\uC744 \\uACF5\\uC720\\uD574\\uC8FC\\uC138\\uC694!\",\n    subTitle: \"\\uB85C\\uADF8\\uC778 \\uD6C4 \\uAC8C\\uC2DC\\uAE00\\uC744 \\uC791\\uC131\\uD574\\uBCF4\\uC138\\uC694.\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    },\n    __self: this\n  }), mainPosts === null || mainPosts === void 0 ? void 0 : mainPosts.map(post => {\n    return ___EmotionJSX(PostCard, {\n      key: post.id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      },\n      __self: this\n    });\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  //redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\n  console.log('getServerSideProps start'); // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\n  //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\n\n  const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\n\n  axios.defaults.headers.Cookie = ''; //다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  }); //리덕스에 데이터가 채워진 상태로 component가 렌더링된다\n\n  context.store.dispatch(END); //미리 준비된 액션인 END를 가져와서 \n\n  await context.store.sagaTask.toPromise(); //store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\n}); //초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\n//getServerSideProps는 방문할 때마다 불러온다\n\nexport default Home;","map":{"version":3,"sources":["c:/Users/HOME/Documents/ymillonga/front/pages/index.js"],"names":["React","useEffect","useCallback","useSelector","useDispatch","AppLayout","PostForm","PostCard","UserProfile","LOAD_POSTS_REQUEST","LOAD_RELATED_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","CHANGE_MENUKEY_REQUEST","wrapper","END","axios","PageHeader","message","Button","Link","Router","Home","dispatch","id","state","user","me","mainPosts","post","hasMorePosts","loadPostsLoading","reportPostDone","reportPostError","retweetError","loadMyInfoError","ignoreError","unIgnoreError","ignoreDone","unIgnoreDone","onClickLoginKey","e","type","data","push","onClickRelatedPosts","alert","success","error","replace","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","addEventListener","removeEventListener","marginBottom","map","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport UserProfile from '../components/UserProfile';\r\nimport { LOAD_POSTS_REQUEST, LOAD_RELATED_POSTS_REQUEST, } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST, CHANGE_MENUKEY_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport { PageHeader, message, Button } from 'antd';\r\nimport Link from 'next/link';\r\nimport Router from 'next/router';\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const id = useSelector((state) => state.user.me?.id);\r\n    const mainPosts = useSelector((state) => state.post.mainPosts);\r\n    const hasMorePosts = useSelector((state) => state.post.hasMorePosts);\r\n    const loadPostsLoading = useSelector((state) => state.post.loadPostsLoading);\r\n    const reportPostDone = useSelector((state) => state.post.reportPostDone);\r\n    const reportPostError = useSelector((state) => state.post.reportPostError);\r\n    const retweetError = useSelector((state) => state.post.retweetError);\r\n    const me = useSelector(state => state.user.me);\r\n\r\n    const loadMyInfoError = useSelector(state => state.user.loadMyInfoError);\r\n    const ignoreError = useSelector(state => state.user.ignoreError);\r\n    const unIgnoreError = useSelector(state => state.user.unIgnoreError);\r\n    const ignoreDone = useSelector(state => state.user.ignoreDone);\r\n    const unIgnoreDone = useSelector(state => state.user.unIgnoreDone);\r\n\r\n\r\n    const onClickLoginKey = useCallback((e) => {\r\n        dispatch({\r\n            type: CHANGE_MENUKEY_REQUEST,\r\n            data: '2',\r\n        });\r\n        Router.push('/login')\r\n    }, []);\r\n    const onClickRelatedPosts = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        dispatch({\r\n            type: LOAD_RELATED_POSTS_REQUEST,\r\n        });\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        if (ignoreDone) {\r\n            message.success('차단되었습니다.', 5)\r\n        }\r\n        if (ignoreError) {\r\n            message.error(ignoreError, 5)\r\n        }\r\n    }, [ignoreDone, ignoreError])\r\n    useEffect(() => {\r\n        if (unIgnoreDone) {\r\n            message.success('차단이 풀어졌습니다.', 5)\r\n        }\r\n        if (unIgnoreError) {\r\n            message.error(unIgnoreError, 5)\r\n        }\r\n    }, [unIgnoreDone, unIgnoreError])\r\n\r\n\r\n    useEffect(() => {\r\n        if (reportPostDone) {\r\n            message.success('신고가 접수되었습니다. 빠른 시일 내로 조치하겠습니다.', 5);\r\n        }\r\n        if (reportPostError) {\r\n            message.error(reportPostError, 5);\r\n        }\r\n    }, [reportPostDone, reportPostError]);\r\n    useEffect(() => {\r\n        if (retweetError) {\r\n            alert(retweetError);\r\n        }\r\n    }, [retweetError]);\r\n    useEffect(() => {\r\n        if (loadMyInfoError) {\r\n            Router.replace('/')\r\n        }\r\n    }, [loadMyInfoError]);\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            //쌓여있는 이벤트 메모리를 제거해주기\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [mainPosts, hasMorePosts, loadPostsLoading]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && me.id && <Button\r\n                style={{ marginBottom: 5 }}\r\n                loading={loadPostsLoading}\r\n                onClick={onClickRelatedPosts}>\r\n                <Link href='/posts/related'><a>팔로잉 게시글만 보기</a></Link></Button>}\r\n            {me && me.id && <UserProfile />}\r\n            {me ? <PostForm /> : (\r\n                <PageHeader\r\n                    className=\"site-page-header\"\r\n                    onBack={onClickLoginKey}\r\n                    title=\"당신의 밀롱가 경험을 공유해주세요!\"\r\n                    subTitle=\"로그인 후 게시글을 작성해보세요.\"\r\n                />\r\n            )}\r\n            {mainPosts?.map((post) => {\r\n                return (\r\n                    <PostCard key={post.id} post={post} />\r\n                );\r\n            })}\r\n        </AppLayout>\r\n    );\r\n};\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {//redux는 next 서버 메소드 4개와 쓸 때 문제가 있어서 wrapper-redux를 사용하기//Component보다 먼저 실행된다(FE에서만 실행된다 FE-> BE, Home component는 BS와 FE 둘다에서 실행된다 )\r\n    console.log('getServerSideProps start');\r\n    // bs=>be는 bs로부터 axios에 cookie에 자동으로 담겨 be로 보내진다\r\n    //fe=>be로 보낼 때는 따로 설정을 해주어야 한다\r\n    const cookie = context.req ? context.req.headers.cookie : ''; //서버일 때만 쿠키값을 담아서\r\n    axios.defaults.headers.Cookie = '';//다른 bs에서 요청을 보내면 fe server에 공유되고 있는 쿠키값을 지워야 한다\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });//리덕스에 데이터가 채워진 상태로 component가 렌더링된다\r\n    context.store.dispatch(END);//미리 준비된 액션인 END를 가져와서 \r\n    await context.store.sagaTask.toPromise();//store.sagaTask를 사용해 success해서 데이터를 가져올 때까지 기다리도록 한다\r\n});\r\n//초기값=>getServerSideProps=> hydrate실행=> payload안에 결과가 담김\r\n//getStaticProps는 미리 만들어진 HTML를 가져온다(바뀌지 않는 게시글 같은 것을 불러올 때 쓴다)\r\n//getServerSideProps는 방문할 때마다 불러온다\r\nexport default Home; "]},"metadata":{},"sourceType":"module"}