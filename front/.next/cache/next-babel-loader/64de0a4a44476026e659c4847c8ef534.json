{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.patch('/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //  const result = yield call(removePostAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","loadPostsAPI","lastId","get","loadPosts","action","result","type","data","err","console","error","response","addPostAPI","post","addPost","addCommentAPI","postId","addComment","uploadImagesAPI","uploadImages","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","removePostAPI","patch","removePost","watchRetweet","RETWEET_REQUEST","retweet","watchUploadImages","UPLOAD_IMAGES_REQUEST","watchLikePost","LIKE_POST_REQUEST","likePost","watchUnlikePost","UNLIKE_POST_REQUEST","unlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.patch('/post', data)\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        //  const result = yield call(removePostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}