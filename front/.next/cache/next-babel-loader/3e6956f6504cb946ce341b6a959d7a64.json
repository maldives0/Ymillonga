{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment, Modal, Form, Tooltip, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { InputReport, CardWrapper } from './style';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport { default as RetweetOutlined } from '@ant-design/icons/RetweetOutlined';\nimport { default as HeartTwoTone } from '@ant-design/icons/HeartTwoTone';\nimport { default as HeartOutlined } from '@ant-design/icons/HeartOutlined';\nimport { default as MessageOutlined } from '@ant-design/icons/MessageOutlined';\nimport { default as EllipsisOutlined } from '@ant-design/icons/EllipsisOutlined';\nimport CommentForm from './CommentForm';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, UPDATE_POST_REQUEST, REPORT_POST_REQUEST } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Likers, _post$User, _post$User2, _post$User3, _post$User4, _post$User5;\n\n  const dispatch = useDispatch();\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const [reportText, onChangeReportText] = useInput('');\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const reportPostLoading = useSelector(state => state.post.reportPostLoading);\n  const reportPostDone = useSelector(state => state.post.reportPostDone);\n  const reportPostError = useSelector(state => state.post.reportPostError);\n  const removePostLoading = useSelector(state => state.post.removePostLoading);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState(false);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return message.info('로그인 후 좋아요를 할 수 있습니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return message.info('로그인 후 리트윗할 수 있습니다.');\n    }\n\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    if (id) {\n      setCommentFormOpened(prev => !prev);\n    } else {\n      return message.info('로그인 후 댓글을 입력할 수 있습니다.');\n    }\n  }, [id]);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n    ;\n  }, []);\n  const onChangePost = useCallback(editText => () => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: UPDATE_POST_REQUEST,\n      data: {\n        PostId: post.id,\n        content: editText\n      }\n    });\n  }, [post]);\n  const onReport = useCallback(() => {\n    if (!id) {\n      return message.info('로그인 후 신고할 수 있습니다.');\n    }\n\n    setModalVisible(true);\n  }, []);\n  const onsubmitReport = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: REPORT_POST_REQUEST,\n      data: {\n        postId: post.id,\n        reason: reportText\n      }\n    });\n  }, [reportText]);\n  const reportCancel = useCallback(() => {\n    setModalVisible(false);\n  }, []);\n  useEffect(() => {\n    if (reportPostDone) {\n      setModalVisible(false);\n    }\n\n    if (reportPostError) {\n      setModalVisible(false);\n    }\n  }, [reportPostDone, reportPostError]);\n  const liked = (_post$Likers = post.Likers) === null || _post$Likers === void 0 ? void 0 : _post$Likers.find(v => v.id === id);\n  return ___EmotionJSX(CardWrapper, {\n    key: post.id\n  }, ___EmotionJSX(Card, {\n    cover: post.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Images\n    }),\n    actions: [___EmotionJSX(Tooltip, {\n      title: \"\\uB9AC\\uD2B8\\uC717\\uD558\\uAE30\"\n    }, ___EmotionJSX(RetweetOutlined, {\n      onClick: onRetweet,\n      key: \"retweet\"\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uC88B\\uC544\\uC694\"\n    }, liked ? ___EmotionJSX(HeartTwoTone, {\n      key: \"heart\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onUnlike\n    }) : ___EmotionJSX(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    })), ___EmotionJSX(Tooltip, {\n      title: \"\\uB313\\uAE00\\uB2EC\\uAE30\"\n    }, ___EmotionJSX(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment\n    })), ___EmotionJSX(Popover, {\n      key: \"ellipsis\",\n      content: ___EmotionJSX(Button.Group, null, id && ((_post$User = post.User) === null || _post$User === void 0 ? void 0 : _post$User.id) === id ? ___EmotionJSX(React.Fragment, null, !post.RetweetId && ___EmotionJSX(Button, {\n        onClick: onClickUpdate\n      }, \"\\uC218\\uC815\"), ___EmotionJSX(Button, {\n        type: \"danger\",\n        onClick: onRemovePost,\n        loading: removePostLoading\n      }, \"\\uC0AD\\uC81C\")) : ___EmotionJSX(Button, {\n        onClick: onReport\n      }, \"\\uC2E0\\uACE0\\uD558\\uAE30\"))\n    }, ___EmotionJSX(EllipsisOutlined, null))],\n    extra: id && ___EmotionJSX(FollowButton, {\n      post: post\n    }),\n    title: post.RetweetId ? `${((_post$User2 = post.User) === null || _post$User2 === void 0 ? void 0 : _post$User2.nickname) || '탈퇴한 사용자'}님이 리트윗하셨습니다.` : null\n  }, ___EmotionJSX(Modal, {\n    title: \"report\",\n    visible: modalVisible,\n    onOk: onsubmitReport,\n    confirmLoading: reportPostLoading,\n    onCancel: reportCancel\n  }, ___EmotionJSX(Form, null, ___EmotionJSX(InputReport, {\n    rows: 4,\n    value: reportText,\n    onChange: onChangeReportText\n  })), ___EmotionJSX(\"p\", null, \"\\uC2E0\\uACE0\\uD558\\uC2E4 \\uACBD\\uC6B0 \\uB418\\uB3CC\\uB9B4 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uACC4\\uC18D \\uC9C4\\uD589\\uD558\\uC2DC\\uACA0\\uC2B5\\uB2C8\\uAE4C?\")), post.RetweetId && post.Retweet ? ___EmotionJSX(Card, {\n    cover: post.Retweet.Images[0] && ___EmotionJSX(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, ___EmotionJSX(\"div\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.Retweet.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, {\n      prefetch: false,\n      href: `/user/${post.Retweet.UserId}`,\n      prefetch: false\n    }, ___EmotionJSX(\"a\", null, ___EmotionJSX(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: ___EmotionJSX(PostCardContent, {\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      editMode: editMode,\n      postData: post.Retweet.content\n    })\n  })) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    style: {\n      float: 'right'\n    }\n  }, moment(post.createdAt).startOf('hour').fromNow()), ___EmotionJSX(Card.Meta, {\n    avatar: ___EmotionJSX(Link, {\n      prefetch: false,\n      href: `/user/${(_post$User3 = post.User) === null || _post$User3 === void 0 ? void 0 : _post$User3.id}`,\n      prefetch: false\n    }, ___EmotionJSX(\"a\", null, ___EmotionJSX(Avatar, null, ((_post$User4 = post.User) === null || _post$User4 === void 0 ? void 0 : _post$User4.nickname[0]) || 'null'))),\n    title: ((_post$User5 = post.User) === null || _post$User5 === void 0 ? void 0 : _post$User5.nickname) || '탈퇴한 사용자',\n    description: ___EmotionJSX(PostCardContent, {\n      editMode: editMode,\n      onCancelUpdate: onCancelUpdate,\n      onChangePost: onChangePost,\n      postData: post.content\n    })\n  }))), id && commentFormOpened && ___EmotionJSX(React.Fragment, null, ___EmotionJSX(CommentForm, {\n    post: post\n  }), ___EmotionJSX(List, {\n    header: `댓글: ${post.Comments ? post.Comments.length : 0}개`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => ___EmotionJSX(\"li\", null, ___EmotionJSX(Comment, {\n      author: item.User.nickname,\n      avatar: ___EmotionJSX(Link, {\n        href: `/user/${item.User.id}`,\n        prefetch: false\n      }, ___EmotionJSX(\"a\", null, ___EmotionJSX(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.any),\n    Images: PropTypes.arrayOf(PropTypes.any),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}