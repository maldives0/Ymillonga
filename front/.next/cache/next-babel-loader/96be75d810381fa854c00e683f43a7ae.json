{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\n\nfunction loadPostsAPI(data) {\n  return axios.get(`/posts?lastId=${lastId || 0}`, data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.patch('/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //  const result = yield call(removePostAPI,action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","loadPostsAPI","data","get","lastId","loadPosts","action","result","type","err","console","error","response","addPostAPI","post","addPost","addCommentAPI","postId","addComment","removePostAPI","patch","removePost","watchLoadPosts","watchAddPost","watchAddComment","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nfunction loadPostsAPI(data) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`, data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data)\r\n}\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction removePostAPI(data) {\r\n    return axios.patch('/post', data)\r\n}\r\nfunction* removePost(action) {\r\n    try {\r\n        //  const result = yield call(removePostAPI,action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}