{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Documents\\\\ymillonga\\\\front\\\\components\\\\NicknameEditForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback } from 'react';\nimport useInput from '../hooks/useInput';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CHANGE_NICKNAME_REQUEST } from '../reducers/user';\nimport { NicknameInputSearch } from './style';\nimport { initialState } from \"../reducers/user\";\nimport useSWR, { mutate, trigger } from \"swr\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst NicknameEditForm = ({\n  onCancel\n}) => {\n  const {\n    data\n  } = useSWR(\"globalState\", {\n    initialData: initialState\n  }, {\n    revalidateOnFocus: true\n  });\n  const dispatch = useDispatch();\n  const me = useSelector(state => state.user.me);\n  const changeNicknameLoading = useSelector(state => state.user.changeNicknameLoading);\n  const [nickname, onChangeNickname] = useInput((me === null || me === void 0 ? void 0 : me.nickname) || '');\n  const onSubmit = useCallback(() => {\n    mutate(\"globalState\", _objectSpread(_objectSpread({}, data), {}, {\n      me: {\n        nickname: nickname\n      }\n    }), false);\n    dispatch({\n      type: CHANGE_NICKNAME_REQUEST,\n      data: nickname\n    });\n    trigger(\"globalState\");\n  }, [nickname]);\n  return ___EmotionJSX(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    },\n    __self: this\n  }, ___EmotionJSX(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    },\n    __self: this\n  }, ___EmotionJSX(Col, {\n    span: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    },\n    __self: this\n  }, ___EmotionJSX(NicknameInputSearch, {\n    loading: changeNicknameLoading,\n    value: nickname,\n    onChange: onChangeNickname,\n    onSearch: onSubmit,\n    addonBefore: \"\\uB2C9\\uB124\\uC784:\",\n    enterButton: \"\\uBC14\\uAFB8\\uAE30\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    },\n    __self: this\n  })), ___EmotionJSX(Col, {\n    span: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    },\n    __self: this\n  }, ___EmotionJSX(Button, {\n    onClick: onCancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    },\n    __self: this\n  }, \"\\uCDE8\\uC18C\\uD558\\uAE30\"))));\n};\n\nNicknameEditForm.propTypes = {\n  onCancel: PropTypes.func.isRequired\n};\nexport default NicknameEditForm;","map":{"version":3,"sources":["C:/Users/HOME/Documents/ymillonga/front/components/NicknameEditForm.js"],"names":["React","useCallback","useInput","PropTypes","Form","Button","Row","useDispatch","useSelector","CHANGE_NICKNAME_REQUEST","NicknameInputSearch","initialState","useSWR","mutate","trigger","NicknameEditForm","onCancel","data","initialData","revalidateOnFocus","dispatch","me","state","user","changeNicknameLoading","nickname","onChangeNickname","onSubmit","type","propTypes","func","isRequired"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,QAAkC,MAAlC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,IAAiBC,MAAjB,EAAyBC,OAAzB,QAAwC,KAAxC;;;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvC,QAAM;AAAEC,IAAAA;AAAF,MAAWL,MAAM,CAAC,aAAD,EAAgB;AAAEM,IAAAA,WAAW,EAAEP;AAAf,GAAhB,EAA+C;AAAEQ,IAAAA,iBAAiB,EAAE;AAArB,GAA/C,CAAvB;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,EAAE,GAAGb,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,EAArB,CAAtB;AACA,QAAMG,qBAAqB,GAAGhB,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,qBAArB,CAAzC;AACA,QAAM,CAACC,QAAD,EAAWC,gBAAX,IAA+BxB,QAAQ,CAAC,CAAAmB,EAAE,SAAF,IAAAA,EAAE,WAAF,YAAAA,EAAE,CAAEI,QAAJ,KAAgB,EAAjB,CAA7C;AAEA,QAAME,QAAQ,GAAG1B,WAAW,CAAC,MAAM;AAC/BY,IAAAA,MAAM,CAAC,aAAD,kCACCI,IADD;AAEFI,MAAAA,EAAE,EAAE;AAAEI,QAAAA,QAAQ,EAAEA;AAAZ;AAFF,QAGH,KAHG,CAAN;AAIAL,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEnB,uBADD;AAELQ,MAAAA,IAAI,EAAEQ;AAFD,KAAD,CAAR;AAIAX,IAAAA,OAAO,CAAC,aAAD,CAAP;AACH,GAV2B,EAUzB,CAACW,QAAD,CAVyB,CAA5B;AAWA,SACI,cAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,cAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,cAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,cAAC,mBAAD;AACI,IAAA,OAAO,EAAED,qBADb;AAEI,IAAA,KAAK,EAAEC,QAFX;AAGI,IAAA,QAAQ,EAAEC,gBAHd;AAII,IAAA,QAAQ,EAAEC,QAJd;AAKI,IAAA,WAAW,EAAC,qBALhB;AAMI,IAAA,WAAW,EAAC,oBANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAUI,cAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,cAAC,MAAD;AAAQ,IAAA,OAAO,EAAEX,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,CAVJ,CADJ,CADJ;AAkBH,CApCD;;AAqCAD,gBAAgB,CAACc,SAAjB,GAA6B;AACzBb,EAAAA,QAAQ,EAAEb,SAAS,CAAC2B,IAAV,CAAeC;AADA,CAA7B;AAGA,eAAehB,gBAAf","sourcesContent":["import React, { useCallback } from 'react';\r\nimport useInput from '../hooks/useInput';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Button, Row } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CHANGE_NICKNAME_REQUEST } from '../reducers/user';\r\nimport { NicknameInputSearch } from './style';\r\nimport { initialState } from \"../reducers/user\";\r\nimport useSWR, { mutate, trigger } from \"swr\"\r\nconst NicknameEditForm = ({ onCancel }) => {\r\n    const { data } = useSWR(\"globalState\", { initialData: initialState }, { revalidateOnFocus: true })\r\n    const dispatch = useDispatch();\r\n    const me = useSelector(state => state.user.me);\r\n    const changeNicknameLoading = useSelector(state => state.user.changeNicknameLoading);\r\n    const [nickname, onChangeNickname] = useInput(me?.nickname || '');\r\n\r\n    const onSubmit = useCallback(() => {\r\n        mutate(\"globalState\", {\r\n            ...data,\r\n            me: { nickname: nickname }\r\n        }, false)\r\n        dispatch({\r\n            type: CHANGE_NICKNAME_REQUEST,\r\n            data: nickname,\r\n        });\r\n        trigger(\"globalState\");\r\n    }, [nickname]);\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Col span={8}>\r\n                    <NicknameInputSearch\r\n                        loading={changeNicknameLoading}\r\n                        value={nickname}\r\n                        onChange={onChangeNickname}\r\n                        onSearch={onSubmit}\r\n                        addonBefore=\"닉네임:\"\r\n                        enterButton=\"바꾸기\" />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button onClick={onCancel}>취소하기</Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\nNicknameEditForm.propTypes = {\r\n    onCancel: PropTypes.func.isRequired,\r\n};\r\nexport default NicknameEditForm; "]},"metadata":{},"sourceType":"module"}